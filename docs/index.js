/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/hogan.js/lib/compiler.js":
/*!***********************************************!*\
  !*** ./node_modules/hogan.js/lib/compiler.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n(function (Hogan) {\n  // Setup regex  assignments\n  // remove whitespace according to Mustache spec\n  var rIsWhitespace = /\\S/,\n      rQuot = /\\\"/g,\n      rNewline =  /\\n/g,\n      rCr = /\\r/g,\n      rSlash = /\\\\/g,\n      rLineSep = /\\u2028/,\n      rParagraphSep = /\\u2029/;\n\n  Hogan.tags = {\n    '#': 1, '^': 2, '<': 3, '$': 4,\n    '/': 5, '!': 6, '>': 7, '=': 8, '_v': 9,\n    '{': 10, '&': 11, '_t': 12\n  };\n\n  Hogan.scan = function scan(text, delimiters) {\n    var len = text.length,\n        IN_TEXT = 0,\n        IN_TAG_TYPE = 1,\n        IN_TAG = 2,\n        state = IN_TEXT,\n        tagType = null,\n        tag = null,\n        buf = '',\n        tokens = [],\n        seenTag = false,\n        i = 0,\n        lineStart = 0,\n        otag = '{{',\n        ctag = '}}';\n\n    function addBuf() {\n      if (buf.length > 0) {\n        tokens.push({tag: '_t', text: new String(buf)});\n        buf = '';\n      }\n    }\n\n    function lineIsWhitespace() {\n      var isAllWhitespace = true;\n      for (var j = lineStart; j < tokens.length; j++) {\n        isAllWhitespace =\n          (Hogan.tags[tokens[j].tag] < Hogan.tags['_v']) ||\n          (tokens[j].tag == '_t' && tokens[j].text.match(rIsWhitespace) === null);\n        if (!isAllWhitespace) {\n          return false;\n        }\n      }\n\n      return isAllWhitespace;\n    }\n\n    function filterLine(haveSeenTag, noNewLine) {\n      addBuf();\n\n      if (haveSeenTag && lineIsWhitespace()) {\n        for (var j = lineStart, next; j < tokens.length; j++) {\n          if (tokens[j].text) {\n            if ((next = tokens[j+1]) && next.tag == '>') {\n              // set indent to token value\n              next.indent = tokens[j].text.toString()\n            }\n            tokens.splice(j, 1);\n          }\n        }\n      } else if (!noNewLine) {\n        tokens.push({tag:'\\n'});\n      }\n\n      seenTag = false;\n      lineStart = tokens.length;\n    }\n\n    function changeDelimiters(text, index) {\n      var close = '=' + ctag,\n          closeIndex = text.indexOf(close, index),\n          delimiters = trim(\n            text.substring(text.indexOf('=', index) + 1, closeIndex)\n          ).split(' ');\n\n      otag = delimiters[0];\n      ctag = delimiters[delimiters.length - 1];\n\n      return closeIndex + close.length - 1;\n    }\n\n    if (delimiters) {\n      delimiters = delimiters.split(' ');\n      otag = delimiters[0];\n      ctag = delimiters[1];\n    }\n\n    for (i = 0; i < len; i++) {\n      if (state == IN_TEXT) {\n        if (tagChange(otag, text, i)) {\n          --i;\n          addBuf();\n          state = IN_TAG_TYPE;\n        } else {\n          if (text.charAt(i) == '\\n') {\n            filterLine(seenTag);\n          } else {\n            buf += text.charAt(i);\n          }\n        }\n      } else if (state == IN_TAG_TYPE) {\n        i += otag.length - 1;\n        tag = Hogan.tags[text.charAt(i + 1)];\n        tagType = tag ? text.charAt(i + 1) : '_v';\n        if (tagType == '=') {\n          i = changeDelimiters(text, i);\n          state = IN_TEXT;\n        } else {\n          if (tag) {\n            i++;\n          }\n          state = IN_TAG;\n        }\n        seenTag = i;\n      } else {\n        if (tagChange(ctag, text, i)) {\n          tokens.push({tag: tagType, n: trim(buf), otag: otag, ctag: ctag,\n                       i: (tagType == '/') ? seenTag - otag.length : i + ctag.length});\n          buf = '';\n          i += ctag.length - 1;\n          state = IN_TEXT;\n          if (tagType == '{') {\n            if (ctag == '}}') {\n              i++;\n            } else {\n              cleanTripleStache(tokens[tokens.length - 1]);\n            }\n          }\n        } else {\n          buf += text.charAt(i);\n        }\n      }\n    }\n\n    filterLine(seenTag, true);\n\n    return tokens;\n  }\n\n  function cleanTripleStache(token) {\n    if (token.n.substr(token.n.length - 1) === '}') {\n      token.n = token.n.substring(0, token.n.length - 1);\n    }\n  }\n\n  function trim(s) {\n    if (s.trim) {\n      return s.trim();\n    }\n\n    return s.replace(/^\\s*|\\s*$/g, '');\n  }\n\n  function tagChange(tag, text, index) {\n    if (text.charAt(index) != tag.charAt(0)) {\n      return false;\n    }\n\n    for (var i = 1, l = tag.length; i < l; i++) {\n      if (text.charAt(index + i) != tag.charAt(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // the tags allowed inside super templates\n  var allowedInSuper = {'_t': true, '\\n': true, '$': true, '/': true};\n\n  function buildTree(tokens, kind, stack, customTags) {\n    var instructions = [],\n        opener = null,\n        tail = null,\n        token = null;\n\n    tail = stack[stack.length - 1];\n\n    while (tokens.length > 0) {\n      token = tokens.shift();\n\n      if (tail && tail.tag == '<' && !(token.tag in allowedInSuper)) {\n        throw new Error('Illegal content in < super tag.');\n      }\n\n      if (Hogan.tags[token.tag] <= Hogan.tags['$'] || isOpener(token, customTags)) {\n        stack.push(token);\n        token.nodes = buildTree(tokens, token.tag, stack, customTags);\n      } else if (token.tag == '/') {\n        if (stack.length === 0) {\n          throw new Error('Closing tag without opener: /' + token.n);\n        }\n        opener = stack.pop();\n        if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {\n          throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);\n        }\n        opener.end = token.i;\n        return instructions;\n      } else if (token.tag == '\\n') {\n        token.last = (tokens.length == 0) || (tokens[0].tag == '\\n');\n      }\n\n      instructions.push(token);\n    }\n\n    if (stack.length > 0) {\n      throw new Error('missing closing tag: ' + stack.pop().n);\n    }\n\n    return instructions;\n  }\n\n  function isOpener(token, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].o == token.n) {\n        token.tag = '#';\n        return true;\n      }\n    }\n  }\n\n  function isCloser(close, open, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].c == close && tags[i].o == open) {\n        return true;\n      }\n    }\n  }\n\n  function stringifySubstitutions(obj) {\n    var items = [];\n    for (var key in obj) {\n      items.push('\"' + esc(key) + '\": function(c,p,t,i) {' + obj[key] + '}');\n    }\n    return \"{ \" + items.join(\",\") + \" }\";\n  }\n\n  function stringifyPartials(codeObj) {\n    var partials = [];\n    for (var key in codeObj.partials) {\n      partials.push('\"' + esc(key) + '\":{name:\"' + esc(codeObj.partials[key].name) + '\", ' + stringifyPartials(codeObj.partials[key]) + \"}\");\n    }\n    return \"partials: {\" + partials.join(\",\") + \"}, subs: \" + stringifySubstitutions(codeObj.subs);\n  }\n\n  Hogan.stringify = function(codeObj, text, options) {\n    return \"{code: function (c,p,i) { \" + Hogan.wrapMain(codeObj.code) + \" },\" + stringifyPartials(codeObj) +  \"}\";\n  }\n\n  var serialNo = 0;\n  Hogan.generate = function(tree, text, options) {\n    serialNo = 0;\n    var context = { code: '', subs: {}, partials: {} };\n    Hogan.walk(tree, context);\n\n    if (options.asString) {\n      return this.stringify(context, text, options);\n    }\n\n    return this.makeTemplate(context, text, options);\n  }\n\n  Hogan.wrapMain = function(code) {\n    return 'var t=this;t.b(i=i||\"\");' + code + 'return t.fl();';\n  }\n\n  Hogan.template = Hogan.Template;\n\n  Hogan.makeTemplate = function(codeObj, text, options) {\n    var template = this.makePartials(codeObj);\n    template.code = new Function('c', 'p', 'i', this.wrapMain(codeObj.code));\n    return new this.template(template, text, this, options);\n  }\n\n  Hogan.makePartials = function(codeObj) {\n    var key, template = {subs: {}, partials: codeObj.partials, name: codeObj.name};\n    for (key in template.partials) {\n      template.partials[key] = this.makePartials(template.partials[key]);\n    }\n    for (key in codeObj.subs) {\n      template.subs[key] = new Function('c', 'p', 't', 'i', codeObj.subs[key]);\n    }\n    return template;\n  }\n\n  function esc(s) {\n    return s.replace(rSlash, '\\\\\\\\')\n            .replace(rQuot, '\\\\\\\"')\n            .replace(rNewline, '\\\\n')\n            .replace(rCr, '\\\\r')\n            .replace(rLineSep, '\\\\u2028')\n            .replace(rParagraphSep, '\\\\u2029');\n  }\n\n  function chooseMethod(s) {\n    return (~s.indexOf('.')) ? 'd' : 'f';\n  }\n\n  function createPartial(node, context) {\n    var prefix = \"<\" + (context.prefix || \"\");\n    var sym = prefix + node.n + serialNo++;\n    context.partials[sym] = {name: node.n, partials: {}};\n    context.code += 't.b(t.rp(\"' +  esc(sym) + '\",c,p,\"' + (node.indent || '') + '\"));';\n    return sym;\n  }\n\n  Hogan.codegen = {\n    '#': function(node, context) {\n      context.code += 'if(t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),' +\n                      'c,p,0,' + node.i + ',' + node.end + ',\"' + node.otag + \" \" + node.ctag + '\")){' +\n                      't.rs(c,p,' + 'function(c,p,t){';\n      Hogan.walk(node.nodes, context);\n      context.code += '});c.pop();}';\n    },\n\n    '^': function(node, context) {\n      context.code += 'if(!t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),c,p,1,0,0,\"\")){';\n      Hogan.walk(node.nodes, context);\n      context.code += '};';\n    },\n\n    '>': createPartial,\n    '<': function(node, context) {\n      var ctx = {partials: {}, code: '', subs: {}, inPartial: true};\n      Hogan.walk(node.nodes, ctx);\n      var template = context.partials[createPartial(node, context)];\n      template.subs = ctx.subs;\n      template.partials = ctx.partials;\n    },\n\n    '$': function(node, context) {\n      var ctx = {subs: {}, code: '', partials: context.partials, prefix: node.n};\n      Hogan.walk(node.nodes, ctx);\n      context.subs[node.n] = ctx.code;\n      if (!context.inPartial) {\n        context.code += 't.sub(\"' + esc(node.n) + '\",c,p,i);';\n      }\n    },\n\n    '\\n': function(node, context) {\n      context.code += write('\"\\\\n\"' + (node.last ? '' : ' + i'));\n    },\n\n    '_v': function(node, context) {\n      context.code += 't.b(t.v(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n    },\n\n    '_t': function(node, context) {\n      context.code += write('\"' + esc(node.text) + '\"');\n    },\n\n    '{': tripleStache,\n\n    '&': tripleStache\n  }\n\n  function tripleStache(node, context) {\n    context.code += 't.b(t.t(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n  }\n\n  function write(s) {\n    return 't.b(' + s + ');';\n  }\n\n  Hogan.walk = function(nodelist, context) {\n    var func;\n    for (var i = 0, l = nodelist.length; i < l; i++) {\n      func = Hogan.codegen[nodelist[i].tag];\n      func && func(nodelist[i], context);\n    }\n    return context;\n  }\n\n  Hogan.parse = function(tokens, text, options) {\n    options = options || {};\n    return buildTree(tokens, '', [], options.sectionTags || []);\n  }\n\n  Hogan.cache = {};\n\n  Hogan.cacheKey = function(text, options) {\n    return [text, !!options.asString, !!options.disableLambda, options.delimiters, !!options.modelGet].join('||');\n  }\n\n  Hogan.compile = function(text, options) {\n    options = options || {};\n    var key = Hogan.cacheKey(text, options);\n    var template = this.cache[key];\n\n    if (template) {\n      var partials = template.partials;\n      for (var name in partials) {\n        delete partials[name].instance;\n      }\n      return template;\n    }\n\n    template = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);\n    return this.cache[key] = template;\n  }\n})( true ? exports : 0);\n\n\n//# sourceURL=webpack://llexicom/./node_modules/hogan.js/lib/compiler.js?");

/***/ }),

/***/ "./node_modules/hogan.js/lib/hogan.js":
/*!********************************************!*\
  !*** ./node_modules/hogan.js/lib/hogan.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n// This file is for use with Node.js. See dist/ for browser files.\n\nvar Hogan = __webpack_require__(/*! ./compiler */ \"./node_modules/hogan.js/lib/compiler.js\");\nHogan.Template = (__webpack_require__(/*! ./template */ \"./node_modules/hogan.js/lib/template.js\").Template);\nHogan.template = Hogan.Template;\nmodule.exports = Hogan;\n\n\n//# sourceURL=webpack://llexicom/./node_modules/hogan.js/lib/hogan.js?");

/***/ }),

/***/ "./node_modules/hogan.js/lib/template.js":
/*!***********************************************!*\
  !*** ./node_modules/hogan.js/lib/template.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nvar Hogan = {};\n\n(function (Hogan) {\n  Hogan.Template = function (codeObj, text, compiler, options) {\n    codeObj = codeObj || {};\n    this.r = codeObj.code || this.r;\n    this.c = compiler;\n    this.options = options || {};\n    this.text = text || '';\n    this.partials = codeObj.partials || {};\n    this.subs = codeObj.subs || {};\n    this.buf = '';\n  }\n\n  Hogan.Template.prototype = {\n    // render: replaced by generated code.\n    r: function (context, partials, indent) { return ''; },\n\n    // variable escaping\n    v: hoganEscape,\n\n    // triple stache\n    t: coerceToString,\n\n    render: function render(context, partials, indent) {\n      return this.ri([context], partials || {}, indent);\n    },\n\n    // render internal -- a hook for overrides that catches partials too\n    ri: function (context, partials, indent) {\n      return this.r(context, partials, indent);\n    },\n\n    // ensurePartial\n    ep: function(symbol, partials) {\n      var partial = this.partials[symbol];\n\n      // check to see that if we've instantiated this partial before\n      var template = partials[partial.name];\n      if (partial.instance && partial.base == template) {\n        return partial.instance;\n      }\n\n      if (typeof template == 'string') {\n        if (!this.c) {\n          throw new Error(\"No compiler available.\");\n        }\n        template = this.c.compile(template, this.options);\n      }\n\n      if (!template) {\n        return null;\n      }\n\n      // We use this to check whether the partials dictionary has changed\n      this.partials[symbol].base = template;\n\n      if (partial.subs) {\n        // Make sure we consider parent template now\n        if (!partials.stackText) partials.stackText = {};\n        for (key in partial.subs) {\n          if (!partials.stackText[key]) {\n            partials.stackText[key] = (this.activeSub !== undefined && partials.stackText[this.activeSub]) ? partials.stackText[this.activeSub] : this.text;\n          }\n        }\n        template = createSpecializedPartial(template, partial.subs, partial.partials,\n          this.stackSubs, this.stackPartials, partials.stackText);\n      }\n      this.partials[symbol].instance = template;\n\n      return template;\n    },\n\n    // tries to find a partial in the current scope and render it\n    rp: function(symbol, context, partials, indent) {\n      var partial = this.ep(symbol, partials);\n      if (!partial) {\n        return '';\n      }\n\n      return partial.ri(context, partials, indent);\n    },\n\n    // render a section\n    rs: function(context, partials, section) {\n      var tail = context[context.length - 1];\n\n      if (!isArray(tail)) {\n        section(context, partials, this);\n        return;\n      }\n\n      for (var i = 0; i < tail.length; i++) {\n        context.push(tail[i]);\n        section(context, partials, this);\n        context.pop();\n      }\n    },\n\n    // maybe start a section\n    s: function(val, ctx, partials, inverted, start, end, tags) {\n      var pass;\n\n      if (isArray(val) && val.length === 0) {\n        return false;\n      }\n\n      if (typeof val == 'function') {\n        val = this.ms(val, ctx, partials, inverted, start, end, tags);\n      }\n\n      pass = !!val;\n\n      if (!inverted && pass && ctx) {\n        ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);\n      }\n\n      return pass;\n    },\n\n    // find values with dotted names\n    d: function(key, ctx, partials, returnFound) {\n      var found,\n          names = key.split('.'),\n          val = this.f(names[0], ctx, partials, returnFound),\n          doModelGet = this.options.modelGet,\n          cx = null;\n\n      if (key === '.' && isArray(ctx[ctx.length - 2])) {\n        val = ctx[ctx.length - 1];\n      } else {\n        for (var i = 1; i < names.length; i++) {\n          found = findInScope(names[i], val, doModelGet);\n          if (found !== undefined) {\n            cx = val;\n            val = found;\n          } else {\n            val = '';\n          }\n        }\n      }\n\n      if (returnFound && !val) {\n        return false;\n      }\n\n      if (!returnFound && typeof val == 'function') {\n        ctx.push(cx);\n        val = this.mv(val, ctx, partials);\n        ctx.pop();\n      }\n\n      return val;\n    },\n\n    // find values with normal names\n    f: function(key, ctx, partials, returnFound) {\n      var val = false,\n          v = null,\n          found = false,\n          doModelGet = this.options.modelGet;\n\n      for (var i = ctx.length - 1; i >= 0; i--) {\n        v = ctx[i];\n        val = findInScope(key, v, doModelGet);\n        if (val !== undefined) {\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        return (returnFound) ? false : \"\";\n      }\n\n      if (!returnFound && typeof val == 'function') {\n        val = this.mv(val, ctx, partials);\n      }\n\n      return val;\n    },\n\n    // higher order templates\n    ls: function(func, cx, partials, text, tags) {\n      var oldTags = this.options.delimiters;\n\n      this.options.delimiters = tags;\n      this.b(this.ct(coerceToString(func.call(cx, text)), cx, partials));\n      this.options.delimiters = oldTags;\n\n      return false;\n    },\n\n    // compile text\n    ct: function(text, cx, partials) {\n      if (this.options.disableLambda) {\n        throw new Error('Lambda features disabled.');\n      }\n      return this.c.compile(text, this.options).render(cx, partials);\n    },\n\n    // template result buffering\n    b: function(s) { this.buf += s; },\n\n    fl: function() { var r = this.buf; this.buf = ''; return r; },\n\n    // method replace section\n    ms: function(func, ctx, partials, inverted, start, end, tags) {\n      var textSource,\n          cx = ctx[ctx.length - 1],\n          result = func.call(cx);\n\n      if (typeof result == 'function') {\n        if (inverted) {\n          return true;\n        } else {\n          textSource = (this.activeSub && this.subsText && this.subsText[this.activeSub]) ? this.subsText[this.activeSub] : this.text;\n          return this.ls(result, cx, partials, textSource.substring(start, end), tags);\n        }\n      }\n\n      return result;\n    },\n\n    // method replace variable\n    mv: function(func, ctx, partials) {\n      var cx = ctx[ctx.length - 1];\n      var result = func.call(cx);\n\n      if (typeof result == 'function') {\n        return this.ct(coerceToString(result.call(cx)), cx, partials);\n      }\n\n      return result;\n    },\n\n    sub: function(name, context, partials, indent) {\n      var f = this.subs[name];\n      if (f) {\n        this.activeSub = name;\n        f(context, partials, this, indent);\n        this.activeSub = false;\n      }\n    }\n\n  };\n\n  //Find a key in an object\n  function findInScope(key, scope, doModelGet) {\n    var val;\n\n    if (scope && typeof scope == 'object') {\n\n      if (scope[key] !== undefined) {\n        val = scope[key];\n\n      // try lookup with get for backbone or similar model data\n      } else if (doModelGet && scope.get && typeof scope.get == 'function') {\n        val = scope.get(key);\n      }\n    }\n\n    return val;\n  }\n\n  function createSpecializedPartial(instance, subs, partials, stackSubs, stackPartials, stackText) {\n    function PartialTemplate() {};\n    PartialTemplate.prototype = instance;\n    function Substitutions() {};\n    Substitutions.prototype = instance.subs;\n    var key;\n    var partial = new PartialTemplate();\n    partial.subs = new Substitutions();\n    partial.subsText = {};  //hehe. substext.\n    partial.buf = '';\n\n    stackSubs = stackSubs || {};\n    partial.stackSubs = stackSubs;\n    partial.subsText = stackText;\n    for (key in subs) {\n      if (!stackSubs[key]) stackSubs[key] = subs[key];\n    }\n    for (key in stackSubs) {\n      partial.subs[key] = stackSubs[key];\n    }\n\n    stackPartials = stackPartials || {};\n    partial.stackPartials = stackPartials;\n    for (key in partials) {\n      if (!stackPartials[key]) stackPartials[key] = partials[key];\n    }\n    for (key in stackPartials) {\n      partial.partials[key] = stackPartials[key];\n    }\n\n    return partial;\n  }\n\n  var rAmp = /&/g,\n      rLt = /</g,\n      rGt = />/g,\n      rApos = /\\'/g,\n      rQuot = /\\\"/g,\n      hChars = /[&<>\\\"\\']/;\n\n  function coerceToString(val) {\n    return String((val === null || val === undefined) ? '' : val);\n  }\n\n  function hoganEscape(str) {\n    str = coerceToString(str);\n    return hChars.test(str) ?\n      str\n        .replace(rAmp, '&amp;')\n        .replace(rLt, '&lt;')\n        .replace(rGt, '&gt;')\n        .replace(rApos, '&#39;')\n        .replace(rQuot, '&quot;') :\n      str;\n  }\n\n  var isArray = Array.isArray || function(a) {\n    return Object.prototype.toString.call(a) === '[object Array]';\n  };\n\n})( true ? exports : 0);\n\n\n//# sourceURL=webpack://llexicom/./node_modules/hogan.js/lib/template.js?");

/***/ }),

/***/ "./scripts/index.ts":
/*!**************************!*\
  !*** ./scripts/index.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n;\nclass Finder {\n    constructor() {\n        this.table = __webpack_require__(/*! ./table */ \"./scripts/table.ts\");\n        this.cachedDictionary = {};\n    }\n    nearestIndex(key) {\n        let left = -1;\n        let right = this.table.length;\n        while (right - left > 1) {\n            const mid = Math.floor(left + (right - left) / 2);\n            if (this.table[mid] > key) {\n                right = mid;\n            }\n            else {\n                left = mid;\n            }\n        }\n        return this.table[left];\n    }\n    find(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.cachedDictionary[key] !== null) {\n                return this.cachedDictionary[key];\n            }\n            try {\n                const requestUrl = this.nearestIndex(key) + \".json.lz\";\n                const response = yield fetch(requestUrl, {\n                    method: 'GET',\n                    headers: {\n                        'Accept-Encoding': 'br'\n                    }\n                });\n                const ds = new DecompressionStream(\"deflate\");\n                const readableStream = response.body;\n                if (readableStream === null) {\n                    return null;\n                }\n                const decompressedStream = readableStream.pipeThrough(ds);\n                const blob = yield new Response(decompressedStream).blob();\n                const dict = JSON.parse(yield blob.text());\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                this.cachedDictionary = Object.assign(Object.assign({}, this.cachedDictionary), dict);\n                return this.cachedDictionary[key];\n            }\n            catch (error) {\n                console.error('Error fetching dictionary data:', error);\n                return null;\n            }\n        });\n    }\n}\nconst Hogan = __webpack_require__(/*! hogan.js */ \"./node_modules/hogan.js/lib/hogan.js\");\nconst finder = new Finder();\nconst template = fetch('word.mustache')\n    .then(response => {\n    if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.text();\n})\n    .then(templateString => {\n    return Hogan.compile(templateString);\n})\n    .catch(error => {\n    console.error('failed to load template', error);\n});\nfunction parseMarkdownBold(text) {\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n}\nconst schema = (__webpack_require__(/*! ./schema */ \"./scripts/schema.ts\").schema);\nconst render = (data, template) => __awaiter(void 0, void 0, void 0, function* () {\n    data.readability_explanation.text = parseMarkdownBold(data.readability_explanation.text);\n    data.usage_notes.explanation = parseMarkdownBold(data.usage_notes.explanation);\n    return (yield template).render(data);\n});\nconst performSearch = () => {\n    const searchInput = document.getElementById('searchInput');\n    if (!(searchInput instanceof HTMLInputElement)) {\n        console.error(\"not valid input\");\n        return;\n    }\n    const searchTerm = searchInput === null || searchInput === void 0 ? void 0 : searchInput.value.trim();\n    if (searchTerm === undefined) {\n        return;\n    }\n    performSearchImpl(searchTerm);\n    const newUrl = '?query=' + searchTerm;\n    history.pushState({\n        query: searchTerm\n    }, '', newUrl);\n};\nconst performSearchImpl = (searchTerm) => __awaiter(void 0, void 0, void 0, function* () {\n    if (searchTerm === '') {\n        console.log(\"empty query\");\n        return;\n    }\n    const resultsContainer = document.getElementById('results');\n    if (resultsContainer === null) {\n        return;\n    }\n    const data = yield finder.find(searchTerm);\n    if (data !== null) {\n        resultsContainer.innerHTML = yield render(data, template);\n    }\n    else {\n        resultsContainer.innerHTML = '<p>一致する単語は見つかりませんでした。</p>';\n    }\n});\nfunction load() {\n    const searchButton = document.getElementById('searchButton');\n    searchButton === null || searchButton === void 0 ? void 0 : searchButton.addEventListener('click', () => {\n        performSearch();\n    });\n    const searchInput = document.getElementById('searchInput');\n    searchInput === null || searchInput === void 0 ? void 0 : searchInput.addEventListener('keypress', (event) => {\n        if (event.key === 'Enter') {\n            performSearch();\n        }\n    });\n    const params = new URLSearchParams(window.location.search);\n    const query = params.get('query');\n    if (searchInput instanceof HTMLInputElement && query !== null) {\n        searchInput.value = query;\n        performSearchImpl(query);\n    }\n}\n;\nwindow.addEventListener('pageshow', (event) => __awaiter(void 0, void 0, void 0, function* () {\n    // event.persisted が true なら bfcache から復元された\n    // false なら通常のページロード\n    console.log('pageshow event fired. persisted:', event.persisted);\n    // bfcacheから復元された場合でも、URLパラメータに基づいてUIを再初期化する\n    // 状態が保存されている場合は、popstateイベントで処理されるため、\n    // ここでは強制的にUIをURLから復元する。\n    load();\n}));\nwindow.addEventListener('popstate', (event) => __awaiter(void 0, void 0, void 0, function* () {\n    console.log(\"popstate event fired. state:\", event.state);\n    // popstateは履歴エントリが変更されたときに発火する\n    // bfcacheからの復元時にも発火しうるが、pageshowとの役割分担を明確にする\n    // ここではUIの更新をinitializePageFromUrlに任せ、\n    // popstateは主にイベントの検知とログに留めるか、\n    // 特定のstateオブジェクトを使ったより詳細な復元処理を行う。\n    // 今回のケースではinitializePageFromUrlがURLから復元するので、\n    // popstateで特別なstate処理は必須ではない。\n    // しかし、より複雑な状態管理の場合はevent.stateを直接利用するのが良い。\n    // 例えば、event.stateに直前の検索条件が含まれている場合など。\n    const searchInput = document.getElementById('searchInput');\n    if (event.state && searchInput instanceof HTMLInputElement) {\n        // history.pushStateで保存したstateがあればそれを利用して復元\n        const query = event.state.query || '';\n        searchInput.value = query;\n        performSearchImpl(query);\n    }\n    else {\n        load();\n    }\n}));\n//*/\n\n\n//# sourceURL=webpack://llexicom/./scripts/index.ts?");

/***/ }),

/***/ "./scripts/schema.ts":
/*!***************************!*\
  !*** ./scripts/schema.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nexports.schema = {\n    \"name\": \"Word Definition Schema\",\n    \"strict\": \"true\",\n    \"description\": \"Schema for defining a word with its various meanings, etymology, pronunciation, and usage.\",\n    \"required\": [\n        \"word\",\n        \"priority\",\n        \"meanings\",\n        \"etymology\",\n        \"pronunciation\",\n        \"inflection\",\n        \"usage_notes\",\n        \"common_mistakes\",\n        \"related_words\",\n        \"level_frequency\",\n        \"readability_explanation\",\n        \"example_sentences\"\n    ],\n    \"schema\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"word\": {\n                \"type\": \"string\",\n                \"description\": \"The word being defined.\"\n            },\n            \"priority\": {\n                \"type\": \"string\",\n                \"description\": \"The priority level of the word (e.g., '★★★').\"\n            },\n            \"meanings\": {\n                \"type\": \"array\",\n                \"description\": \"An array of different meanings for the word.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"part_of_speech\",\n                        \"definition\",\n                        \"english_definition\",\n                        \"examples\",\n                        \"collocations\",\n                        \"synonyms\",\n                        \"antonyms\"\n                    ],\n                    \"properties\": {\n                        \"part_of_speech\": {\n                            \"type\": \"string\",\n                            \"description\": \"The part of speech (e.g., 'noun', 'verb').\"\n                        },\n                        \"transitivity\": {\n                            \"type\": \"string\",\n                            \"description\": \"For verbs, indicates transitivity (e.g., 'vt', 'vi').\",\n                            \"enum\": [\"vt\", \"vi\"]\n                        },\n                        \"definition\": {\n                            \"type\": \"string\",\n                            \"description\": \"Japanese definition of the meaning.\"\n                        },\n                        \"english_definition\": {\n                            \"type\": \"string\",\n                            \"description\": \"English definition of the meaning.\"\n                        },\n                        \"examples\": {\n                            \"type\": \"array\",\n                            \"description\": \"Example sentences with translations.\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"required\": [\n                                    \"sentence\",\n                                    \"translation\"\n                                ],\n                                \"properties\": {\n                                    \"sentence\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"An example sentence in English.\"\n                                    },\n                                    \"translation\": {\n                                        \"type\": \"string\",\n                                        \"description\": \"Japanese translation of the example sentence.\"\n                                    }\n                                }\n                            }\n                        },\n                        \"collocations\": {\n                            \"type\": \"array\",\n                            \"description\": \"Common collocations for this meaning.\",\n                            \"items\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"synonyms\": {\n                            \"type\": \"array\",\n                            \"description\": \"Synonyms for this meaning.\",\n                            \"items\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"antonyms\": {\n                            \"type\": \"array\",\n                            \"description\": \"Antonyms for this meaning.\",\n                            \"items\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    }\n                }\n            },\n            \"etymology\": {\n                \"type\": \"object\",\n                \"description\": \"Information about the word's origin.\",\n                \"required\": [\n                    \"value\"\n                ],\n                \"properties\": {\n                    \"value\": {\n                        \"type\": \"string\",\n                        \"description\": \"The etymological explanation.\"\n                    }\n                }\n            },\n            \"pronunciation\": {\n                \"type\": \"object\",\n                \"description\": \"Pronunciation details.\",\n                \"required\": [\n                    \"ipa_uk\",\n                    \"ipa_us\",\n                    \"syllables\"\n                ],\n                \"properties\": {\n                    \"ipa_uk\": {\n                        \"type\": \"string\",\n                        \"description\": \"IPA pronunciation for UK English.\"\n                    },\n                    \"ipa_us\": {\n                        \"type\": \"string\",\n                        \"description\": \"IPA pronunciation for US English.\"\n                    },\n                    \"syllables\": {\n                        \"type\": \"string\",\n                        \"description\": \"Syllabification of the word.\"\n                    }\n                }\n            },\n            \"inflection\": {\n                \"type\": \"object\",\n                \"description\": \"Grammatical inflections of the word.\",\n                \"properties\": {\n                    \"noun_forms\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"singular\": {\n                                \"type\": \"string\",\n                                \"description\": \"Singular form of the noun.\"\n                            },\n                            \"plural\": {\n                                \"type\": \"string\",\n                                \"description\": \"Plural form(s) of the noun, with notes on usage.\"\n                            }\n                        }\n                    },\n                    \"verb_forms\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"present_simple\": {\n                                \"type\": \"array\",\n                                \"items\": {\n                                    \"type\": \"string\"\n                                },\n                                \"description\": \"Present simple forms of the verb.\"\n                            },\n                            \"past_simple\": {\n                                \"type\": \"string\",\n                                \"description\": \"Past simple form of the verb.\"\n                            },\n                            \"past_participle\": {\n                                \"type\": \"string\",\n                                \"description\": \"Past participle form of the verb.\"\n                            },\n                            \"present_participle\": {\n                                \"type\": \"string\",\n                                \"description\": \"Present participle form of the verb.\"\n                            }\n                        }\n                    }\n                }\n            },\n            \"usage_notes\": {\n                \"type\": \"object\",\n                \"description\": \"Notes on how the word is typically used.\",\n                \"required\": [\n                    \"explanation\"\n                ],\n                \"properties\": {\n                    \"explanation\": {\n                        \"type\": \"string\",\n                        \"description\": \"Detailed explanation of usage, including common patterns and variations.\"\n                    }\n                }\n            },\n            \"common_mistakes\": {\n                \"type\": \"object\",\n                \"description\": \"Common errors made by learners and their corrections.\",\n                \"required\": [\n                    \"examples\"\n                ],\n                \"properties\": {\n                    \"examples\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"object\",\n                            \"required\": [\n                                \"incorrect\",\n                                \"correct\",\n                                \"note\"\n                            ],\n                            \"properties\": {\n                                \"incorrect\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"An incorrect usage example.\"\n                                },\n                                \"correct\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"The correct usage example.\"\n                                },\n                                \"note\": {\n                                    \"type\": \"string\",\n                                    \"description\": \"An explanation of why the incorrect usage is wrong.\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"related_words\": {\n                \"type\": \"object\",\n                \"description\": \"Words and phrases related to the main word.\",\n                \"properties\": {\n                    \"derivatives\": {\n                        \"type\": \"array\",\n                        \"description\": \"Words derived from the main word.\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"phrasal_verbs\": {\n                        \"type\": \"array\",\n                        \"description\": \"Phrasal verbs using the main word.\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    },\n                    \"idioms_phrases\": {\n                        \"type\": \"array\",\n                        \"description\": \"Idiomatic expressions and common phrases using the main word.\",\n                        \"items\": {\n                            \"type\": \"string\"\n                        }\n                    }\n                }\n            },\n            \"level_frequency\": {\n                \"type\": \"object\",\n                \"description\": \"Information about the word's difficulty level and frequency.\",\n                \"required\": [\n                    \"CEFR\",\n                    \"frequency_google_ngram\"\n                ],\n                \"properties\": {\n                    \"CEFR\": {\n                        \"type\": \"string\",\n                        \"description\": \"CEFR level for the word and its usages.\"\n                    },\n                    \"frequency_google_ngram\": {\n                        \"type\": \"string\",\n                        \"description\": \"Frequency of the word based on Google Ngram data.\"\n                    }\n                }\n            },\n            \"readability_explanation\": {\n                \"type\": \"object\",\n                \"description\": \"A simplified explanation for readability, targeted at a specific level.\",\n                \"required\": [\n                    \"level\",\n                    \"text\"\n                ],\n                \"properties\": {\n                    \"level\": {\n                        \"type\": \"string\",\n                        \"description\": \"The target readability level (e.g., 'A1').\"\n                    },\n                    \"text\": {\n                        \"type\": \"string\",\n                        \"description\": \"The simplified explanation text.\"\n                    }\n                }\n            },\n            \"example_sentences\": {\n                \"type\": \"array\",\n                \"description\": \"Additional example sentences categorised by type and meaning.\",\n                \"items\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                        \"sentence\",\n                        \"translation\",\n                        \"type\",\n                        \"meaning_category\"\n                    ],\n                    \"properties\": {\n                        \"sentence\": {\n                            \"type\": \"string\",\n                            \"description\": \"The example sentence in English.\"\n                        },\n                        \"translation\": {\n                            \"type\": \"string\",\n                            \"description\": \"The Japanese translation of the example sentence.\"\n                        },\n                        \"type\": {\n                            \"type\": \"string\",\n                            \"description\": \"The grammatical type of usage (e.g., 'noun (uncountable)', 'verb (vt)', 'idiom').\"\n                        },\n                        \"meaning_category\": {\n                            \"type\": \"string\",\n                            \"description\": \"A brief category for the meaning illustrated by the sentence.\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n};\n\n\n//# sourceURL=webpack://llexicom/./scripts/schema.ts?");

/***/ }),

/***/ "./scripts/table.ts":
/*!**************************!*\
  !*** ./scripts/table.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nexports.table = [\"-\", \"Adriatic\", \"Amtrak\", \"Aussichtslosigkeit\", \"Beklommenheit\", \"Brasília\", \"CPU\", \"Chillon\", \"Congregationalist\", \"Dionysian\", \"Eden\", \"Erse\", \"Fabian\", \"GCE\", \"Giza\", \"HST\", \"Hibernia\", \"Israelites\", \"KO\", \"LOL\", \"Lizzy\", \"Majorca\", \"Mendelevium\", \"Morse\", \"Nepalese\", \"OCR\", \"PG\", \"Romanian\", \"Saipan\", \"September\", \"Spanish-inspired\", \"TTY\", \"Titian\", \"Trappist\", \"Ulyanov\", \"Unico\", \"Western-centeredness\", \"Yemen\", \"abastecido\", \"abgedichtet\", \"abnormal\", \"abri\", \"absorber\", \"abwickeln\", \"accepters\", \"accorciare\", \"acephalous\", \"acidosis\", \"acquisitively\", \"actualizado\", \"addicts\", \"adictarse\", \"admirado\", \"adrenocorticotropin\", \"adverbially\", \"afficher\", \"afinar\", \"ageism\", \"agile-legged\", \"agraviar\", \"ailments\", \"aiutante\", \"alcohol-attributable\", \"algo\", \"alkalize\", \"allergy-inducing\", \"allurements\", \"alternative\", \"amateurishly\", \"amenably\", \"amoralism\", \"amusingly\", \"anbieten\", \"angelically\", \"animal-borne\", \"annihilating\", \"anpinnen\", \"anthemis\", \"anti-democratic\", \"anti-reader\", \"antiderivative\", \"antisepsis\", \"apaciguar\", \"aplaciblemente\", \"apparente\", \"applicably\", \"approach-independent\", \"aprisa\", \"arare\", \"archer\", \"archive\", \"aridly\", \"aromatizing\", \"arrogance\", \"artificially-induced\", \"asesinar\", \"asphyxiated\", \"assertive-looking\", \"assistively\", \"astonishing\", \"atenerse\", \"atrasado\", \"attenuante\", \"attunement\", \"aufpassen\", \"ausencia\", \"authenticatable\", \"autological\", \"available\", \"avisado\", \"aweary\", \"back-end\", \"backwoods\", \"baking\", \"ballet-zealous\", \"bankruptcy\", \"barkentine\", \"basely\", \"battery-caged\", \"beard\", \"bedlam\", \"befit\", \"beheading\", \"belladonna\", \"beneficiality\", \"beres\", \"beschwichtigen\", \"betray\", \"biasanya\", \"bigger\", \"binding\", \"biotechnology\", \"bite-sized\", \"blamable\", \"blender\", \"blood-consuming\", \"blue-violet\", \"boatswain\", \"bolus\", \"bookable\", \"borderer\", \"bottom-floor\", \"bowwow\", \"brakeman\", \"bray\", \"breezes\", \"brinde\", \"brokenly\", \"bruit\", \"budget-minded\", \"bullfight\", \"bureaucracy-driven\", \"bushy\", \"button-controlled\", \"cachou\", \"calcination\", \"calm\", \"campaigner\", \"capsulation\", \"carbon-rich\", \"caricaturally\", \"carousel\", \"casserole\", \"catches\", \"cautamente\", \"celebratorily\", \"centi-\", \"centrifugal\", \"cert\", \"challengeability\", \"chaos\", \"chapter\", \"chastisement\", \"cheesy\", \"chiaro\", \"chowder\", \"chum\", \"churchmen\", \"circulation-enhancing\", \"citrous\", \"clandestino\", \"classmate\", \"cleavable\", \"climate-vulnerable\", \"close-fitting\", \"clownishness\", \"co-workers\", \"coats\", \"codified\", \"coliseum\", \"colluding\", \"columnist\", \"comico\", \"commiserate\", \"community-focused\", \"comparire\", \"competitiveness\", \"complicatamente\", \"comprendere\", \"comrades\", \"concertina\", \"concur\", \"conduire\", \"confined\", \"confrere\", \"congruent\", \"conocer\", \"conservador\", \"consolidar-se\", \"constructible\", \"containable\", \"contention-based\", \"contra-\", \"contribuir\", \"convenient\", \"convinto\", \"coperto\", \"cordovan\", \"corporate-operated\", \"corroborated\", \"cosmetic\", \"couch\", \"countermissile\", \"couture\", \"crackdown\", \"crawling\", \"credit-funded\", \"crier\", \"crochet\", \"cross-post\", \"crucciarsi\", \"cryogenic-resistant\", \"cuidadoso\", \"cunning\", \"currish\", \"customer-centricity\", \"cyclically\", \"dahingegangen\", \"dankbar\", \"data-frugal\", \"daytime-inspired\", \"de-urbanize\", \"debut\", \"decently\", \"declinable\", \"deconstructivism\", \"dedication\", \"defeating\", \"deficit-reduced\", \"defraudar\", \"dehumanizing\", \"delegating\", \"delirious\", \"demerit\", \"demoralizer\", \"denormalization\", \"depend\", \"deporre\", \"deracinated\", \"desastrado\", \"desconocedor\", \"desencadear\", \"desfogarse\", \"desinteresar\", \"desolado\", \"desprecintar\", \"destructible\", \"detenere\", \"detractor\", \"device\", \"diabetes-free\", \"dibagi\", \"dietitian\", \"digested\", \"dildo\", \"dimple\", \"directing\", \"disaffecting\", \"disbandment\", \"disconnectable\", \"discriminate\", \"disfare\", \"dishware\", \"diskusi\", \"disparage\", \"disposizione\", \"dissatisfied\", \"dissuading\", \"distorting\", \"dither\", \"divine\", \"doctrinairism\", \"dolere\", \"donee\", \"dote\", \"dove-grey\", \"downy-haired\", \"dram\", \"drawstring\", \"drivel\", \"drum-focused\", \"ductless\", \"dunking\", \"duteous\", \"e-ready\", \"earthmoving\", \"eccedenza\", \"economizzare\", \"edulcorante\", \"effort-based\", \"eigenartig\", \"ekelhaft\", \"electrocardiograph\", \"elfish\", \"emanare\", \"embed\", \"embodiment\", \"emissivity\", \"employ\", \"emptying\", \"encephalopathic\", \"end-of-roll\", \"endure\", \"enfermizo\", \"engravings\", \"ennoblishing\", \"entbunden\", \"entitle\", \"entryway\", \"environmentally-destructive\", \"epistrophe\", \"equipo\", \"ergriffen\", \"erringen\", \"escalation\", \"esile\", \"esquiver\", \"estimar\", \"etcher\", \"europium\", \"evenly-sized\", \"exasperate\", \"excitatory\", \"execrated\", \"exhibitable\", \"exorbitance\", \"expendable\", \"explainable\", \"exposingly\", \"extendida\", \"extra-atomic\", \"extremist\", \"fa\", \"factitious\", \"fair-weather\", \"falsifying\", \"fantastisch\", \"fassungslos\", \"fatigar\", \"fearfully\", \"feedback\", \"felted\", \"ferocious\", \"fidelity\", \"filial\", \"financiers\", \"fire-lit\", \"fishbowl\", \"fizz\", \"flange\", \"flaunt\", \"flexible hours\", \"floodlights\", \"fluctuate\", \"flux\", \"foiling\", \"foolery\", \"forcefulness\", \"foreseen\", \"form-based\", \"fornire\", \"fossa\", \"fowl\", \"fragrant\", \"frecuentador\", \"freiwillig\", \"frier\", \"frontrunner\", \"frustrato\", \"full-strength\", \"funeral\", \"fusee\", \"gainful\", \"gaming-related\", \"garnish\", \"gathering\", \"gehaltvoll\", \"gender-unequal\", \"genomic\", \"geometrically\", \"geschmacklos\", \"giubilantemente\", \"gleamed\", \"glorified\", \"goal-driven\", \"gonad\", \"gotten\", \"gradito\", \"granny\", \"grato\", \"greasy-haired\", \"griddlecake\", \"grooving\", \"growing\", \"guardedly\", \"gullibly\", \"gymnastically\", \"hackwork\", \"half-dozen\", \"hamburger\", \"handpick\", \"hard-featured\", \"haziness\", \"health-unconscious\", \"heat-retaining\", \"heft\", \"helps\", \"here-and-now\", \"hesitant\", \"hickory\", \"high-lofted\", \"highfaluting\", \"hintersinnig\", \"hoarhound\", \"holist\", \"hommes\", \"honor\", \"hormonology\", \"hospitalario\", \"houseman\", \"human-friendly\", \"hummock\", \"hutch\", \"hydrous\", \"hypersensitive\", \"hypothecate\", \"iconolatry\", \"idleness\", \"ilex\", \"illogico\", \"immettersi\", \"immunopotentiating\", \"impeccably\", \"impertinent\", \"implosion\", \"impractical\", \"improvement-oriented\", \"in-stater\", \"inaptitude\", \"incastrarsi\", \"inclinarsi\", \"incompetent-looking\", \"inconvenablement\", \"inculcated\", \"indemnification\", null, null, \"indifferenza\", \"indite\", \"indugiare\", \"inefficientemente\", \"inexpensiveness\", \"inferior\", \"inflation-hedging\", \"informational\", \"ingestion\", \"inhibitingly\", \"injustice\", \"innocuous-appearing\", \"inquietante\", \"insediarsi\", \"insipid\", \"installer\", \"instrumentalization\", \"intacto\", \"intendere\", \"interchangeable\", \"interim\", \"internally-supported\", \"interschool\", \"intonate\", \"intrecciare\", \"inundate\", \"investigate\", \"invoice\", \"iron-gray\", \"irreligiosidad\", \"irritar\", \"isotope\", \"jackrock\", \"jazz\", \"jiggly\", \"jollity\", \"juice\", \"jut-jawed\", \"keberagaman\", \"kelaparan\", \"kesegaran\", \"kewaspadaan\", \"kindergarteners\", \"klobig\", \"knuckle\", \"korrekt\", \"labor-managed\", \"lactic\", \"lamentableness\", \"landsman\", \"larron\", \"lauding\", \"lay\", \"leaf-shaped\", \"lebend\", \"legalism\", \"lemma\", \"lesson\", \"liability\", \"licentiously\", \"ligand-activated\", \"lightweight-looking\", \"limonite\", \"lionhearted\", \"listing\", \"liveliness\", \"lobsterpot\", \"loftier\", \"long-sleeved\", \"lovable\", \"low-permeability\", \"lowlights\", \"lumbering\", \"machinate\", \"madrugar\", \"maiden\", \"maladroitness\", \"malice\", \"mammectomy\", \"mandrake\", \"many\", \"marinating\", \"marquess\", \"mass-market\", \"materiality\", \"mauve-blue\", \"meanly\", \"mediator\", \"megillah\", \"memahami\", \"memoranda\", \"memprediksi\", \"menganggur\", \"menor\", \"mercantilist\", \"mescaline\", \"metal-look\", \"meticoloso\", \"microcrystal\", \"midshipman\", \"milk-fed\", \"mind-numbing\", \"ministering\", \"misanthropic\", \"misericordioso\", \"misplacing\", \"mistune\", \"mobbing\", \"modernize\", \"moisture-sensitive\", \"monedas\", \"monoculturalist\", \"monosomatic\", \"moorage\", \"mortgage\", \"motive\", \"mouthwash\", \"muffledly\", \"multi-racial\", \"multimillionaire\", \"mumps\", \"musically\", \"muzzled\", \"nahezu\", \"narcotism\", \"nationhood\", \"navigators\", \"nectareous\", \"neighborly\", \"nettle\", \"never\", \"nicotine-added\", \"noblest\", \"non-DNA-associated\", \"non-addictive\", \"non-attributable\", \"non-circular\", \"non-consenting\", \"non-degeneration\", \"non-elastic\", \"non-favorite\", \"non-governmental\", \"non-interacting\", \"non-lobed\", \"non-moralizing\", \"non-painful\", \"non-prehensile\", \"non-reentrant\", \"non-salaried\", \"non-socialist\", \"non-symmetric\", \"non-vector-borne\", \"nonbleeding\", \"nonethnic\", \"nonmorally\", \"nonskid\", \"normative\", \"noticeability\", \"nuclease\", \"nut\", \"obbligare\", \"obligare\", \"observatory\", \"ocasionalmente\", \"oculist\", \"off-gas\", \"offish\", \"oilcan\", \"oltretutto\", \"oncolytic\", \"onrushing\", \"openwork\", \"oportunista\", \"optimization-blocking\", \"ordentlich\", \"organizzarsi\", \"orogenesis\", \"ostentar\", \"ousted\", \"outfall\", \"outraging\", \"over-attentively\", \"overbooked\", \"overemployment\", \"overline\", \"overripe\", \"overtook\", \"oxidizer-rich\", \"pacifying\", \"painful\", \"palmetto\", \"panoply\", \"paraded\", \"parathion\", \"parlare\", \"participial\", \"pass\", \"patcher\", \"patron\", \"peace-building\", \"pedantic\", \"pejoratively\", \"pengambilan\", \"penyembunyian\", \"perdebatan\", \"perfume-related\", \"perjure\", \"perplex\", \"personnel-independent\", \"pervenuto\", \"petition\", \"petrol-powered\", \"phenomena\", \"phosphoric\", \"phrenic\", \"picnicker\", \"pigpen\", \"pine\", \"pista\", \"placekick\", \"planificar\", \"plauderhaft\", \"plena\", \"plumbing\", \"poem\", \"policing\", \"polyester\", \"poncho\", \"popgun\", \"porticoed\", \"possibly\", \"postnatal\", \"potsherd\", \"ppm\", \"pre-configuration\", \"preceded\", \"predestined\", \"preheat\", \"preoccupy\", \"prescrire\", \"pressure-operated\", \"prevalentemente\", \"priesthood\", \"priority\", \"pro-Westernism\", \"proativamente\", \"procoagulant\", \"productivity-centered\", \"profit-orientedly\", \"progressives\", \"prometedor\", \"promised\", \"proofs\", \"proppen\", \"prostrate\", \"protocol-exploitable\", \"provider-centric\", \"pruritic\", \"public-influenced\", \"pugnacious\", \"pungent\", \"purificatory\", \"putrefy\", \"quadru-\", \"quarters\", \"quibbling\", \"quittance\", \"rack-mountable\", \"radiographer\", \"railfan\", \"ramshackle\", \"raptly\", \"rational\", \"razonabilidad\", \"re-embark\", \"re-let\", \"reaccommodation\", \"real-looking\", \"rearming\", \"rebranded\", \"receptionist\", \"reclaim\", \"reconcile\", \"recovery\", \"recyclables\", \"redly\", \"reeds\", \"reflationist\", \"refueling\", \"regionalization\", \"regulo\", \"reinsman\", \"relacionados\", \"relevant\", \"remarkable\", \"remote-unfriendly\", \"renounce\", \"repayable\", \"replica\", \"reprint\", \"repurpose\", \"research-driven\", \"resigned\", \"resource-based\", \"restricted-color\", \"retaliating\", \"retransfusion\", \"reuse\", \"reversing\", \"revolutionize\", \"rhythmical\", \"rickshaw\", \"rifiutato\", \"riot\", \"risk-insensitive\", \"rivalrous\", \"robust-looking\", \"rolling\", \"rosewood\", \"round\", \"rubbish bin\", \"ruinously\", \"rurality\", \"saciedad\", \"sagacious-looking\", \"salida\", \"salve-like\", \"sangat\", \"satiable\", \"savoriness\", \"scallopini\", \"scatterbrain\", \"schierarsi\", \"schuldig\", \"scompigliatamente\", \"scoured\", \"script-like\", \"scurvy-affected\", \"sect\", \"sedikit\", \"segregarsi\", \"selesai\", \"self-conscious\", \"self-examining\", \"self-knowledge\", \"self-regulation\", \"selisih\", \"semitropical\", \"sensitive-skinned\", \"seperti\", \"serially\", \"sessionable\", \"sexism\", \"shade-dependent\", \"shame\", \"shaved\", \"shiftily\", \"shiveringly\", \"short-stemmed\", \"shrapnel\", \"sialorrhea\", \"siempre\", \"silent\", \"simoom\", \"singalong\", \"single-step\", \"sipping\", \"skateboarder\", \"skin\", \"slag\", \"sleepshirt\", \"slithery\", \"slumberous\", \"smearable\", \"smoothbore\", \"snap-on\", \"snowball\", \"sobresalir\", \"sofort\", \"solaparse\", \"solidness\", \"somigliare\", \"sopping\", \"soutenir\", \"spade\", \"spaventare\", \"specter\", \"spending-oriented\", \"spin-dried\", \"splendente\", \"spopolarsi\", \"spreco\", \"squalidly\", \"sradicarsi\", \"stagger\", \"stand-alone\", \"starling\", \"stationing\", \"steeplechase\", \"sterilizer\", \"stimolato\", \"stockjobber\", \"storage\", \"straightened\", \"stratosphere\", \"stressing\", \"stroll-loving\", \"stuck-up\", \"sturdier\", null, \"subdivision\", \"submersibility\", \"substance\", \"suburb\", \"sudorific\", \"suits\", \"sun-affected\", \"sunstroke\", \"superlight\", \"supplicatingly\", \"surcharge\", \"surrender\", \"sustentarse\", \"swat\", \"swindler\", \"symbolization\", \"synthesized\", \"tabulation\", \"taire\", \"tameness\", \"tardar\", \"tattoo\", \"teamwork\", \"technology-centered\", \"telamon\", \"temeroso\", \"tender\", \"teratology\", \"terrier\", \"tetragonal\", \"thematize\", \"thermo-activated\", \"thine\", \"thread-like\", \"thrombus\", \"tideless\", \"timbrel\", \"tingersi\", \"toilsomely\", \"tonificare\", \"topology-unaware\", \"totaled\", \"tournament\", \"tractably\", \"traidor\", \"transaction\", \"transient\", \"transpire\", \"trattoria\", \"tree-like\", \"triangulation\", \"trimaran\", \"trivium\", \"trudge\", \"tuberculosis-related\", \"tunneled\", \"tussock\", \"two-chamber\", \"typewriter-like\", \"ultra-\", \"unaffectionate\", \"unapproachability\", \"unauthentic\", \"unberthing\", \"unbuildable\", \"unchristian\", \"uncommunicated\", \"unconsumables\", \"uncriticizable\", \"under-fertilize\", \"underdevelopment\", \"underloading\", \"undershoot\", \"undeserving\", \"undramatically\", \"unearthed\", \"unendurably\", \"unexchangeability\", \"unfazed\", \"unforeseenly\", \"ungemein\", \"unhappiness\", \"unimpaired\", \"unintelligibly\", \"unit-dependent\", \"unlabialized\", \"unloved-looking\", \"unmethylated\", \"unnoticedly\", \"unpartitioned\", \"unpollutedly\", \"unprophetic\", \"unreason\", \"unreliable-looking\", \"unrestrained\", \"unsalvageability\", \"unseen\", \"unsingable\", \"unspreadable\", \"unsuitably\", \"untaxed\", \"untoned\", \"unutterability\", \"unweeded\", \"unzutreffend\", \"uprightly\", \"urbanology\", \"usurper\", \"vacillating\", \"validity\", \"vanquish\", \"varying\", \"vehicle-reliant\", \"vengeance\", \"verbannen\", \"verifiable\", \"vernacular\", \"verraten\", \"vertreiben\", \"vexingly\", \"video-compatible\", \"villainy\", \"viridity\", \"visual-related\", \"vocal\", \"voler\", \"vorgeblich\", \"vullen\", \"waiting\", \"warble\", \"washout\", \"water-resistance\", \"waxlike\", \"weary-eyed\", \"weeper\", \"weld\", \"well-off-looking\", \"westerly\", \"whensoever\", \"white-capped\", \"whosever\", \"wild-type\", \"windchill\", \"wintertide\", \"withholder\", \"womanizer\", \"wooer\", \"workflow\", \"worseners\", \"wringer\", \"yachting\", \"yesteryear\", \"zealously\", \"zoologist\"];\n\n\n//# sourceURL=webpack://llexicom/./scripts/table.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./scripts/index.ts");
/******/ 	
/******/ })()
;