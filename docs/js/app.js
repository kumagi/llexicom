/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/hogan.js/lib/compiler.js":
/*!***********************************************!*\
  !*** ./node_modules/hogan.js/lib/compiler.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n(function (Hogan) {\n  // Setup regex  assignments\n  // remove whitespace according to Mustache spec\n  var rIsWhitespace = /\\S/,\n      rQuot = /\\\"/g,\n      rNewline =  /\\n/g,\n      rCr = /\\r/g,\n      rSlash = /\\\\/g,\n      rLineSep = /\\u2028/,\n      rParagraphSep = /\\u2029/;\n\n  Hogan.tags = {\n    '#': 1, '^': 2, '<': 3, '$': 4,\n    '/': 5, '!': 6, '>': 7, '=': 8, '_v': 9,\n    '{': 10, '&': 11, '_t': 12\n  };\n\n  Hogan.scan = function scan(text, delimiters) {\n    var len = text.length,\n        IN_TEXT = 0,\n        IN_TAG_TYPE = 1,\n        IN_TAG = 2,\n        state = IN_TEXT,\n        tagType = null,\n        tag = null,\n        buf = '',\n        tokens = [],\n        seenTag = false,\n        i = 0,\n        lineStart = 0,\n        otag = '{{',\n        ctag = '}}';\n\n    function addBuf() {\n      if (buf.length > 0) {\n        tokens.push({tag: '_t', text: new String(buf)});\n        buf = '';\n      }\n    }\n\n    function lineIsWhitespace() {\n      var isAllWhitespace = true;\n      for (var j = lineStart; j < tokens.length; j++) {\n        isAllWhitespace =\n          (Hogan.tags[tokens[j].tag] < Hogan.tags['_v']) ||\n          (tokens[j].tag == '_t' && tokens[j].text.match(rIsWhitespace) === null);\n        if (!isAllWhitespace) {\n          return false;\n        }\n      }\n\n      return isAllWhitespace;\n    }\n\n    function filterLine(haveSeenTag, noNewLine) {\n      addBuf();\n\n      if (haveSeenTag && lineIsWhitespace()) {\n        for (var j = lineStart, next; j < tokens.length; j++) {\n          if (tokens[j].text) {\n            if ((next = tokens[j+1]) && next.tag == '>') {\n              // set indent to token value\n              next.indent = tokens[j].text.toString()\n            }\n            tokens.splice(j, 1);\n          }\n        }\n      } else if (!noNewLine) {\n        tokens.push({tag:'\\n'});\n      }\n\n      seenTag = false;\n      lineStart = tokens.length;\n    }\n\n    function changeDelimiters(text, index) {\n      var close = '=' + ctag,\n          closeIndex = text.indexOf(close, index),\n          delimiters = trim(\n            text.substring(text.indexOf('=', index) + 1, closeIndex)\n          ).split(' ');\n\n      otag = delimiters[0];\n      ctag = delimiters[delimiters.length - 1];\n\n      return closeIndex + close.length - 1;\n    }\n\n    if (delimiters) {\n      delimiters = delimiters.split(' ');\n      otag = delimiters[0];\n      ctag = delimiters[1];\n    }\n\n    for (i = 0; i < len; i++) {\n      if (state == IN_TEXT) {\n        if (tagChange(otag, text, i)) {\n          --i;\n          addBuf();\n          state = IN_TAG_TYPE;\n        } else {\n          if (text.charAt(i) == '\\n') {\n            filterLine(seenTag);\n          } else {\n            buf += text.charAt(i);\n          }\n        }\n      } else if (state == IN_TAG_TYPE) {\n        i += otag.length - 1;\n        tag = Hogan.tags[text.charAt(i + 1)];\n        tagType = tag ? text.charAt(i + 1) : '_v';\n        if (tagType == '=') {\n          i = changeDelimiters(text, i);\n          state = IN_TEXT;\n        } else {\n          if (tag) {\n            i++;\n          }\n          state = IN_TAG;\n        }\n        seenTag = i;\n      } else {\n        if (tagChange(ctag, text, i)) {\n          tokens.push({tag: tagType, n: trim(buf), otag: otag, ctag: ctag,\n                       i: (tagType == '/') ? seenTag - otag.length : i + ctag.length});\n          buf = '';\n          i += ctag.length - 1;\n          state = IN_TEXT;\n          if (tagType == '{') {\n            if (ctag == '}}') {\n              i++;\n            } else {\n              cleanTripleStache(tokens[tokens.length - 1]);\n            }\n          }\n        } else {\n          buf += text.charAt(i);\n        }\n      }\n    }\n\n    filterLine(seenTag, true);\n\n    return tokens;\n  }\n\n  function cleanTripleStache(token) {\n    if (token.n.substr(token.n.length - 1) === '}') {\n      token.n = token.n.substring(0, token.n.length - 1);\n    }\n  }\n\n  function trim(s) {\n    if (s.trim) {\n      return s.trim();\n    }\n\n    return s.replace(/^\\s*|\\s*$/g, '');\n  }\n\n  function tagChange(tag, text, index) {\n    if (text.charAt(index) != tag.charAt(0)) {\n      return false;\n    }\n\n    for (var i = 1, l = tag.length; i < l; i++) {\n      if (text.charAt(index + i) != tag.charAt(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // the tags allowed inside super templates\n  var allowedInSuper = {'_t': true, '\\n': true, '$': true, '/': true};\n\n  function buildTree(tokens, kind, stack, customTags) {\n    var instructions = [],\n        opener = null,\n        tail = null,\n        token = null;\n\n    tail = stack[stack.length - 1];\n\n    while (tokens.length > 0) {\n      token = tokens.shift();\n\n      if (tail && tail.tag == '<' && !(token.tag in allowedInSuper)) {\n        throw new Error('Illegal content in < super tag.');\n      }\n\n      if (Hogan.tags[token.tag] <= Hogan.tags['$'] || isOpener(token, customTags)) {\n        stack.push(token);\n        token.nodes = buildTree(tokens, token.tag, stack, customTags);\n      } else if (token.tag == '/') {\n        if (stack.length === 0) {\n          throw new Error('Closing tag without opener: /' + token.n);\n        }\n        opener = stack.pop();\n        if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {\n          throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);\n        }\n        opener.end = token.i;\n        return instructions;\n      } else if (token.tag == '\\n') {\n        token.last = (tokens.length == 0) || (tokens[0].tag == '\\n');\n      }\n\n      instructions.push(token);\n    }\n\n    if (stack.length > 0) {\n      throw new Error('missing closing tag: ' + stack.pop().n);\n    }\n\n    return instructions;\n  }\n\n  function isOpener(token, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].o == token.n) {\n        token.tag = '#';\n        return true;\n      }\n    }\n  }\n\n  function isCloser(close, open, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].c == close && tags[i].o == open) {\n        return true;\n      }\n    }\n  }\n\n  function stringifySubstitutions(obj) {\n    var items = [];\n    for (var key in obj) {\n      items.push('\"' + esc(key) + '\": function(c,p,t,i) {' + obj[key] + '}');\n    }\n    return \"{ \" + items.join(\",\") + \" }\";\n  }\n\n  function stringifyPartials(codeObj) {\n    var partials = [];\n    for (var key in codeObj.partials) {\n      partials.push('\"' + esc(key) + '\":{name:\"' + esc(codeObj.partials[key].name) + '\", ' + stringifyPartials(codeObj.partials[key]) + \"}\");\n    }\n    return \"partials: {\" + partials.join(\",\") + \"}, subs: \" + stringifySubstitutions(codeObj.subs);\n  }\n\n  Hogan.stringify = function(codeObj, text, options) {\n    return \"{code: function (c,p,i) { \" + Hogan.wrapMain(codeObj.code) + \" },\" + stringifyPartials(codeObj) +  \"}\";\n  }\n\n  var serialNo = 0;\n  Hogan.generate = function(tree, text, options) {\n    serialNo = 0;\n    var context = { code: '', subs: {}, partials: {} };\n    Hogan.walk(tree, context);\n\n    if (options.asString) {\n      return this.stringify(context, text, options);\n    }\n\n    return this.makeTemplate(context, text, options);\n  }\n\n  Hogan.wrapMain = function(code) {\n    return 'var t=this;t.b(i=i||\"\");' + code + 'return t.fl();';\n  }\n\n  Hogan.template = Hogan.Template;\n\n  Hogan.makeTemplate = function(codeObj, text, options) {\n    var template = this.makePartials(codeObj);\n    template.code = new Function('c', 'p', 'i', this.wrapMain(codeObj.code));\n    return new this.template(template, text, this, options);\n  }\n\n  Hogan.makePartials = function(codeObj) {\n    var key, template = {subs: {}, partials: codeObj.partials, name: codeObj.name};\n    for (key in template.partials) {\n      template.partials[key] = this.makePartials(template.partials[key]);\n    }\n    for (key in codeObj.subs) {\n      template.subs[key] = new Function('c', 'p', 't', 'i', codeObj.subs[key]);\n    }\n    return template;\n  }\n\n  function esc(s) {\n    return s.replace(rSlash, '\\\\\\\\')\n            .replace(rQuot, '\\\\\\\"')\n            .replace(rNewline, '\\\\n')\n            .replace(rCr, '\\\\r')\n            .replace(rLineSep, '\\\\u2028')\n            .replace(rParagraphSep, '\\\\u2029');\n  }\n\n  function chooseMethod(s) {\n    return (~s.indexOf('.')) ? 'd' : 'f';\n  }\n\n  function createPartial(node, context) {\n    var prefix = \"<\" + (context.prefix || \"\");\n    var sym = prefix + node.n + serialNo++;\n    context.partials[sym] = {name: node.n, partials: {}};\n    context.code += 't.b(t.rp(\"' +  esc(sym) + '\",c,p,\"' + (node.indent || '') + '\"));';\n    return sym;\n  }\n\n  Hogan.codegen = {\n    '#': function(node, context) {\n      context.code += 'if(t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),' +\n                      'c,p,0,' + node.i + ',' + node.end + ',\"' + node.otag + \" \" + node.ctag + '\")){' +\n                      't.rs(c,p,' + 'function(c,p,t){';\n      Hogan.walk(node.nodes, context);\n      context.code += '});c.pop();}';\n    },\n\n    '^': function(node, context) {\n      context.code += 'if(!t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),c,p,1,0,0,\"\")){';\n      Hogan.walk(node.nodes, context);\n      context.code += '};';\n    },\n\n    '>': createPartial,\n    '<': function(node, context) {\n      var ctx = {partials: {}, code: '', subs: {}, inPartial: true};\n      Hogan.walk(node.nodes, ctx);\n      var template = context.partials[createPartial(node, context)];\n      template.subs = ctx.subs;\n      template.partials = ctx.partials;\n    },\n\n    '$': function(node, context) {\n      var ctx = {subs: {}, code: '', partials: context.partials, prefix: node.n};\n      Hogan.walk(node.nodes, ctx);\n      context.subs[node.n] = ctx.code;\n      if (!context.inPartial) {\n        context.code += 't.sub(\"' + esc(node.n) + '\",c,p,i);';\n      }\n    },\n\n    '\\n': function(node, context) {\n      context.code += write('\"\\\\n\"' + (node.last ? '' : ' + i'));\n    },\n\n    '_v': function(node, context) {\n      context.code += 't.b(t.v(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n    },\n\n    '_t': function(node, context) {\n      context.code += write('\"' + esc(node.text) + '\"');\n    },\n\n    '{': tripleStache,\n\n    '&': tripleStache\n  }\n\n  function tripleStache(node, context) {\n    context.code += 't.b(t.t(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n  }\n\n  function write(s) {\n    return 't.b(' + s + ');';\n  }\n\n  Hogan.walk = function(nodelist, context) {\n    var func;\n    for (var i = 0, l = nodelist.length; i < l; i++) {\n      func = Hogan.codegen[nodelist[i].tag];\n      func && func(nodelist[i], context);\n    }\n    return context;\n  }\n\n  Hogan.parse = function(tokens, text, options) {\n    options = options || {};\n    return buildTree(tokens, '', [], options.sectionTags || []);\n  }\n\n  Hogan.cache = {};\n\n  Hogan.cacheKey = function(text, options) {\n    return [text, !!options.asString, !!options.disableLambda, options.delimiters, !!options.modelGet].join('||');\n  }\n\n  Hogan.compile = function(text, options) {\n    options = options || {};\n    var key = Hogan.cacheKey(text, options);\n    var template = this.cache[key];\n\n    if (template) {\n      var partials = template.partials;\n      for (var name in partials) {\n        delete partials[name].instance;\n      }\n      return template;\n    }\n\n    template = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);\n    return this.cache[key] = template;\n  }\n})( true ? exports : 0);\n\n\n//# sourceURL=webpack://llexicom/./node_modules/hogan.js/lib/compiler.js?");

/***/ }),

/***/ "./node_modules/hogan.js/lib/hogan.js":
/*!********************************************!*\
  !*** ./node_modules/hogan.js/lib/hogan.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n// This file is for use with Node.js. See dist/ for browser files.\n\nvar Hogan = __webpack_require__(/*! ./compiler */ \"./node_modules/hogan.js/lib/compiler.js\");\nHogan.Template = (__webpack_require__(/*! ./template */ \"./node_modules/hogan.js/lib/template.js\").Template);\nHogan.template = Hogan.Template;\nmodule.exports = Hogan;\n\n\n//# sourceURL=webpack://llexicom/./node_modules/hogan.js/lib/hogan.js?");

/***/ }),

/***/ "./node_modules/hogan.js/lib/template.js":
/*!***********************************************!*\
  !*** ./node_modules/hogan.js/lib/template.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nvar Hogan = {};\n\n(function (Hogan) {\n  Hogan.Template = function (codeObj, text, compiler, options) {\n    codeObj = codeObj || {};\n    this.r = codeObj.code || this.r;\n    this.c = compiler;\n    this.options = options || {};\n    this.text = text || '';\n    this.partials = codeObj.partials || {};\n    this.subs = codeObj.subs || {};\n    this.buf = '';\n  }\n\n  Hogan.Template.prototype = {\n    // render: replaced by generated code.\n    r: function (context, partials, indent) { return ''; },\n\n    // variable escaping\n    v: hoganEscape,\n\n    // triple stache\n    t: coerceToString,\n\n    render: function render(context, partials, indent) {\n      return this.ri([context], partials || {}, indent);\n    },\n\n    // render internal -- a hook for overrides that catches partials too\n    ri: function (context, partials, indent) {\n      return this.r(context, partials, indent);\n    },\n\n    // ensurePartial\n    ep: function(symbol, partials) {\n      var partial = this.partials[symbol];\n\n      // check to see that if we've instantiated this partial before\n      var template = partials[partial.name];\n      if (partial.instance && partial.base == template) {\n        return partial.instance;\n      }\n\n      if (typeof template == 'string') {\n        if (!this.c) {\n          throw new Error(\"No compiler available.\");\n        }\n        template = this.c.compile(template, this.options);\n      }\n\n      if (!template) {\n        return null;\n      }\n\n      // We use this to check whether the partials dictionary has changed\n      this.partials[symbol].base = template;\n\n      if (partial.subs) {\n        // Make sure we consider parent template now\n        if (!partials.stackText) partials.stackText = {};\n        for (key in partial.subs) {\n          if (!partials.stackText[key]) {\n            partials.stackText[key] = (this.activeSub !== undefined && partials.stackText[this.activeSub]) ? partials.stackText[this.activeSub] : this.text;\n          }\n        }\n        template = createSpecializedPartial(template, partial.subs, partial.partials,\n          this.stackSubs, this.stackPartials, partials.stackText);\n      }\n      this.partials[symbol].instance = template;\n\n      return template;\n    },\n\n    // tries to find a partial in the current scope and render it\n    rp: function(symbol, context, partials, indent) {\n      var partial = this.ep(symbol, partials);\n      if (!partial) {\n        return '';\n      }\n\n      return partial.ri(context, partials, indent);\n    },\n\n    // render a section\n    rs: function(context, partials, section) {\n      var tail = context[context.length - 1];\n\n      if (!isArray(tail)) {\n        section(context, partials, this);\n        return;\n      }\n\n      for (var i = 0; i < tail.length; i++) {\n        context.push(tail[i]);\n        section(context, partials, this);\n        context.pop();\n      }\n    },\n\n    // maybe start a section\n    s: function(val, ctx, partials, inverted, start, end, tags) {\n      var pass;\n\n      if (isArray(val) && val.length === 0) {\n        return false;\n      }\n\n      if (typeof val == 'function') {\n        val = this.ms(val, ctx, partials, inverted, start, end, tags);\n      }\n\n      pass = !!val;\n\n      if (!inverted && pass && ctx) {\n        ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);\n      }\n\n      return pass;\n    },\n\n    // find values with dotted names\n    d: function(key, ctx, partials, returnFound) {\n      var found,\n          names = key.split('.'),\n          val = this.f(names[0], ctx, partials, returnFound),\n          doModelGet = this.options.modelGet,\n          cx = null;\n\n      if (key === '.' && isArray(ctx[ctx.length - 2])) {\n        val = ctx[ctx.length - 1];\n      } else {\n        for (var i = 1; i < names.length; i++) {\n          found = findInScope(names[i], val, doModelGet);\n          if (found !== undefined) {\n            cx = val;\n            val = found;\n          } else {\n            val = '';\n          }\n        }\n      }\n\n      if (returnFound && !val) {\n        return false;\n      }\n\n      if (!returnFound && typeof val == 'function') {\n        ctx.push(cx);\n        val = this.mv(val, ctx, partials);\n        ctx.pop();\n      }\n\n      return val;\n    },\n\n    // find values with normal names\n    f: function(key, ctx, partials, returnFound) {\n      var val = false,\n          v = null,\n          found = false,\n          doModelGet = this.options.modelGet;\n\n      for (var i = ctx.length - 1; i >= 0; i--) {\n        v = ctx[i];\n        val = findInScope(key, v, doModelGet);\n        if (val !== undefined) {\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        return (returnFound) ? false : \"\";\n      }\n\n      if (!returnFound && typeof val == 'function') {\n        val = this.mv(val, ctx, partials);\n      }\n\n      return val;\n    },\n\n    // higher order templates\n    ls: function(func, cx, partials, text, tags) {\n      var oldTags = this.options.delimiters;\n\n      this.options.delimiters = tags;\n      this.b(this.ct(coerceToString(func.call(cx, text)), cx, partials));\n      this.options.delimiters = oldTags;\n\n      return false;\n    },\n\n    // compile text\n    ct: function(text, cx, partials) {\n      if (this.options.disableLambda) {\n        throw new Error('Lambda features disabled.');\n      }\n      return this.c.compile(text, this.options).render(cx, partials);\n    },\n\n    // template result buffering\n    b: function(s) { this.buf += s; },\n\n    fl: function() { var r = this.buf; this.buf = ''; return r; },\n\n    // method replace section\n    ms: function(func, ctx, partials, inverted, start, end, tags) {\n      var textSource,\n          cx = ctx[ctx.length - 1],\n          result = func.call(cx);\n\n      if (typeof result == 'function') {\n        if (inverted) {\n          return true;\n        } else {\n          textSource = (this.activeSub && this.subsText && this.subsText[this.activeSub]) ? this.subsText[this.activeSub] : this.text;\n          return this.ls(result, cx, partials, textSource.substring(start, end), tags);\n        }\n      }\n\n      return result;\n    },\n\n    // method replace variable\n    mv: function(func, ctx, partials) {\n      var cx = ctx[ctx.length - 1];\n      var result = func.call(cx);\n\n      if (typeof result == 'function') {\n        return this.ct(coerceToString(result.call(cx)), cx, partials);\n      }\n\n      return result;\n    },\n\n    sub: function(name, context, partials, indent) {\n      var f = this.subs[name];\n      if (f) {\n        this.activeSub = name;\n        f(context, partials, this, indent);\n        this.activeSub = false;\n      }\n    }\n\n  };\n\n  //Find a key in an object\n  function findInScope(key, scope, doModelGet) {\n    var val;\n\n    if (scope && typeof scope == 'object') {\n\n      if (scope[key] !== undefined) {\n        val = scope[key];\n\n      // try lookup with get for backbone or similar model data\n      } else if (doModelGet && scope.get && typeof scope.get == 'function') {\n        val = scope.get(key);\n      }\n    }\n\n    return val;\n  }\n\n  function createSpecializedPartial(instance, subs, partials, stackSubs, stackPartials, stackText) {\n    function PartialTemplate() {};\n    PartialTemplate.prototype = instance;\n    function Substitutions() {};\n    Substitutions.prototype = instance.subs;\n    var key;\n    var partial = new PartialTemplate();\n    partial.subs = new Substitutions();\n    partial.subsText = {};  //hehe. substext.\n    partial.buf = '';\n\n    stackSubs = stackSubs || {};\n    partial.stackSubs = stackSubs;\n    partial.subsText = stackText;\n    for (key in subs) {\n      if (!stackSubs[key]) stackSubs[key] = subs[key];\n    }\n    for (key in stackSubs) {\n      partial.subs[key] = stackSubs[key];\n    }\n\n    stackPartials = stackPartials || {};\n    partial.stackPartials = stackPartials;\n    for (key in partials) {\n      if (!stackPartials[key]) stackPartials[key] = partials[key];\n    }\n    for (key in stackPartials) {\n      partial.partials[key] = stackPartials[key];\n    }\n\n    return partial;\n  }\n\n  var rAmp = /&/g,\n      rLt = /</g,\n      rGt = />/g,\n      rApos = /\\'/g,\n      rQuot = /\\\"/g,\n      hChars = /[&<>\\\"\\']/;\n\n  function coerceToString(val) {\n    return String((val === null || val === undefined) ? '' : val);\n  }\n\n  function hoganEscape(str) {\n    str = coerceToString(str);\n    return hChars.test(str) ?\n      str\n        .replace(rAmp, '&amp;')\n        .replace(rLt, '&lt;')\n        .replace(rGt, '&gt;')\n        .replace(rApos, '&#39;')\n        .replace(rQuot, '&quot;') :\n      str;\n  }\n\n  var isArray = Array.isArray || function(a) {\n    return Object.prototype.toString.call(a) === '[object Array]';\n  };\n\n})( true ? exports : 0);\n\n\n//# sourceURL=webpack://llexicom/./node_modules/hogan.js/lib/template.js?");

/***/ }),

/***/ "./scripts/finder.ts":
/*!***************************!*\
  !*** ./scripts/finder.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Finder = void 0;\nclass Finder {\n    constructor() {\n        this.table = (__webpack_require__(/*! ./table */ \"./scripts/table.ts\").table);\n        this.cachedDictionary = {};\n    }\n    nearestIndex(key, table = this.table) {\n        let left = -1;\n        let right = table.length;\n        while (right - left > 1) {\n            const mid = Math.floor(left + (right - left) / 2);\n            if (table[mid] > key) {\n                right = mid;\n            }\n            else {\n                left = mid;\n            }\n        }\n        return left;\n    }\n    // Returns `count` of words which nears specified `key` in dictionary.\n    nearby(key, count) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _ = yield this.find(key); // Call this just for populate the cache.\n            const keys = Object.keys(this.cachedDictionary).sort();\n            const index = this.nearestIndex(key, keys);\n            console.log(`${keys} is ${keys.length}`);\n            console.log(`${Math.max(0, index - (count / 2))} ${index + (count / 2) + 1}`);\n            return keys.slice(Math.max(0, index - (count / 2)), index + (count / 2) + 1);\n        });\n    }\n    // Returns single word data which exactly matches specified `key`.\n    // The `key` is case-insensitive.\n    find(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const canonical_key = key.toLowerCase();\n            if (this.cachedDictionary[canonical_key]) {\n                console.log(`cache hit for ${canonical_key}`);\n                return this.cachedDictionary[canonical_key];\n            }\n            try {\n                const nearest_index = this.nearestIndex(canonical_key);\n                const nearest_key = this.table[nearest_index];\n                console.log(`fetching ${nearest_key} for ${canonical_key}`);\n                const response = yield fetch(`${nearest_key}.json.lz`, {\n                    method: 'GET',\n                    headers: {\n                        'Accept-Encoding': 'br'\n                    }\n                });\n                const ds = new DecompressionStream(\"deflate\");\n                const readableStream = response.body;\n                if (readableStream === null) {\n                    console.error(\"no readable stream\");\n                    return undefined;\n                }\n                const decompressedStream = readableStream.pipeThrough(ds);\n                const blob = yield new Response(decompressedStream).blob();\n                const dict = JSON.parse(yield blob.text());\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                this.cachedDictionary = Object.assign(Object.assign({}, this.cachedDictionary), dict);\n                return this.cachedDictionary[canonical_key];\n            }\n            catch (error) {\n                console.error('Error fetching dictionary data:', error);\n                return undefined;\n            }\n        });\n    }\n}\nexports.Finder = Finder;\n\n\n//# sourceURL=webpack://llexicom/./scripts/finder.ts?");

/***/ }),

/***/ "./scripts/index.ts":
/*!**************************!*\
  !*** ./scripts/index.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst finder_1 = __webpack_require__(/*! ./finder */ \"./scripts/finder.ts\");\nconst render_1 = __webpack_require__(/*! ./render */ \"./scripts/render.ts\");\nconst finder = new finder_1.Finder();\nconst performSearch = () => {\n    const searchInput = document.getElementById('searchInput');\n    if (!(searchInput instanceof HTMLInputElement)) {\n        console.error(\"not valid input\");\n        return;\n    }\n    const searchTerm = searchInput === null || searchInput === void 0 ? void 0 : searchInput.value.trim();\n    if (searchTerm === undefined) {\n        return;\n    }\n    performSearchImpl(searchTerm);\n    const newUrl = `?query=${searchTerm}`;\n    history.pushState({\n        query: searchTerm\n    }, '', newUrl);\n};\nconst performSearchImpl = (searchTerm) => __awaiter(void 0, void 0, void 0, function* () {\n    if (searchTerm === '') {\n        console.log(\"empty query\");\n        return;\n    }\n    const resultsContainer = document.getElementById('results');\n    if (resultsContainer === null) {\n        console.error(\"No result box\");\n        return;\n    }\n    const data = yield finder.find(searchTerm);\n    if (data === undefined) {\n        const candidates = yield finder.nearby(searchTerm, 100);\n        resultsContainer.innerHTML = (0, render_1.renderNotfoundMessage)(searchTerm, candidates);\n        return;\n    }\n    else {\n        resultsContainer.innerHTML = (0, render_1.render)(data);\n        const meanings = document.getElementsByClassName(\"meaning-title\");\n        for (let i = 0; i < meanings.length; i++) {\n            meanings[i].addEventListener('click', (m) => {\n                if (!(m.target instanceof HTMLElement)) {\n                    return;\n                }\n                const content = m.target.parentElement;\n                const body = content === null || content === void 0 ? void 0 : content.querySelector('.meaning-content');\n                if (body) {\n                    body.classList.toggle(\"visible\");\n                }\n                const title = content === null || content === void 0 ? void 0 : content.querySelector('.meaning-title');\n                if (title) {\n                    title.classList.toggle(\"expand\");\n                }\n            });\n        }\n    }\n});\nfunction load() {\n    const searchButton = document.getElementById('searchButton');\n    searchButton === null || searchButton === void 0 ? void 0 : searchButton.addEventListener('click', () => {\n        performSearch();\n    });\n    const searchInput = document.getElementById('searchInput');\n    searchInput === null || searchInput === void 0 ? void 0 : searchInput.addEventListener('keypress', (event) => {\n        if (event.key === 'Enter') {\n            performSearch();\n        }\n    });\n    const params = new URLSearchParams(window.location.search);\n    const query = params.get('query');\n    if (searchInput instanceof HTMLInputElement && query !== null) {\n        searchInput.value = query;\n        performSearchImpl(query);\n    }\n}\n;\nwindow.addEventListener('pageshow', (event) => {\n    load();\n});\nwindow.addEventListener('popstate', (event) => {\n    const searchInput = document.getElementById('searchInput');\n    if (event.state && searchInput instanceof HTMLInputElement) {\n        const query = event.state.query || '';\n        searchInput.value = query;\n        performSearchImpl(query);\n    }\n    else {\n        load();\n    }\n});\n\n\n//# sourceURL=webpack://llexicom/./scripts/index.ts?");

/***/ }),

/***/ "./scripts/render.ts":
/*!***************************!*\
  !*** ./scripts/render.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.render = render;\nexports.renderNotfoundMessage = renderNotfoundMessage;\nconst Hogan = __webpack_require__(/*! hogan.js */ \"./node_modules/hogan.js/lib/hogan.js\");\nconst word_mustache_1 = __importDefault(__webpack_require__(/*! ./word.mustache */ \"./scripts/word.mustache\"));\nconst template = Hogan.compile(word_mustache_1.default);\nfunction parseMarkdownBold(text) {\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n}\nfunction translatePartOfSpeech(pos) {\n    switch (pos) {\n        case \"verb\":\n            return \"動詞\";\n        case \"verb (vt)\":\n            return \"他動詞\";\n        case \"verb (vi)\":\n            return \"自動詞\";\n        case \"noun\":\n            return \"名詞\";\n        case \"pronoun\":\n            return \"代名詞\";\n        case \"adjective\":\n            return \"形容詞\";\n        case \"adverb\":\n            return \"副詞\";\n        case \"preposition\":\n            return \"前置詞\";\n        case \"conjunction\":\n            return \"接続詞\";\n        case \"interjection\":\n            return \"間投詞\";\n    }\n    return \"Unknown\";\n}\nfunction translateTransitivity(en) {\n    switch (en) {\n        case \"vr\":\n        case \"vi\":\n            return \"自\";\n        case \"vt\":\n            return \"他\";\n    }\n    return \"sss\";\n}\nfunction mustachePreprocess(data) {\n    for (let i = 0; i < data.meanings.length; i++) {\n        data.meanings[i].index_plus_1 = i + 1;\n        data.meanings[i].part_of_speech_translated = translatePartOfSpeech(data.meanings[i].part_of_speech);\n        if (data.meanings[i].transitivity) {\n            data.meanings[i].transitivity_translated = translateTransitivity(data.meanings[i].transitivity);\n        }\n    }\n    for (let i = 0; i < data.example_sentences.length; i++) {\n        data.example_sentences[i].type_translated = translatePartOfSpeech(data.example_sentences[i].type);\n        data.example_sentences[i].sentence = parseMarkdownBold(data.example_sentences[i].sentence);\n    }\n    data.readability_explanation.text = parseMarkdownBold(data.readability_explanation.text);\n    data.usage_notes.explanation = parseMarkdownBold(data.usage_notes.explanation);\n    return data;\n}\nfunction render(data) {\n    return template.render(mustachePreprocess(data[0])); // TODO: Handle multiple words data if exists.\n}\nfunction renderNotfoundMessage(target, words) {\n    let result = `${target}は見つかりませんでした<br>`;\n    result += '<div class=\"suggestions-container\">\\n';\n    result += '<div class=\"suggestions-title\">もしかして:</div>\\n';\n    result += '<div class=\"word-tags\">\\n';\n    for (let i = 0; i < words.length; i++) {\n        result += `<a href=\"?query=${words[i]}\" class=\"word-tag\">${words[i]}</a><br>`;\n    }\n    result += '</div></div>';\n    return result;\n}\n\n\n//# sourceURL=webpack://llexicom/./scripts/render.ts?");

/***/ }),

/***/ "./scripts/table.ts":
/*!**************************!*\
  !*** ./scripts/table.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nexports.table = [\"-\", \"abandonada\", \"abbondante\", \"abfahrt\", \"abhorring\", \"ableitend\", \"abordaje\", \"abrigar-se\", \"absolutamente\", \"abstract-focused\", \"abusivo\", \"acatamiento\", \"accepting-looking\", \"accomiatarsi\", \"accrescimento\", \"acerbating\", \"achterblijven\", \"acomodadizamente\", \"acquistato\", \"activities\", \"ad-libbed\", \"additare\", \"aderezo\", \"adiungere\", \"admirablemente\", \"adorar\", \"adult-designed\", \"adventurous\", \"aerear\", \"afetadamente\", \"affievolimento\", \"afforestation\", \"afoso\", \"afterlife\", \"agent-oriented\", \"aggression-linked\", \"agnosco\", \"agreement-focused\", \"ahnen\", \"air-poor\", \"aiutato\", \"akzeptabel\", \"alcazar\", \"alegria\", \"aliansi\", \"alito\", \"allegations\", \"alleviarsi\", \"alloying\", \"already\", \"altruistamente\", \"amargar\", \"ambicionar\", \"amenazante\", \"amigados\", \"amoldar\", \"ampliada\", \"anaesthetize\", \"anarchist\", \"androcentrism\", \"angeklagt\", \"angosciarsi\", \"animalism\", \"anmerken\", \"annullare\", \"anreichern\", \"antarctica\", \"anti-angiogenic\", \"anti-flatulent\", \"anti-obesity\", \"anti-vedic\", \"antigen-targeting\", \"antique\", \"anus\", \"aparentar\", \"aphonic\", \"apolar\", \"appareiller\", \"appetite-stimulating\", \"appointor\", \"approbation\", \"aprendizaje\", \"aqal\", \"arbitrariedade\", \"architecture\", \"argentine\", \"arithmetically\", \"aroma-neutralizing\", \"arrecare\", \"arrogant-looking\", \"arthritis-free\", \"artisanship\", \"asciugare\", \"asia-enthusiastic\", \"asociar\", \"assalariado\", \"assessability\", \"assimilatory\", \"assoupissement\", \"astral\", \"atascado\", \"atinadamente\", \"atrapalhar\", \"attaquer\", \"attinente\", \"attributively\", \"audio-insensitive\", \"aufgenommen\", \"auftreten\", \"aurora\", \"ausgerichtet\", \"ausraster\", \"ausufern\", \"authority-building\", \"autodespreciarse\", \"autonomic\", \"auxiliary\", \"aventurar\", \"avoidingly\", \"awalan\", \"azotemia\", \"backfilling\", \"badanie\", \"bailsman\", \"ballerina\", \"balmier\", \"bangla\", \"barbarity\", \"baronetcy\", \"baseline-aligned\", \"batalla\", \"bazooka\", \"beatify\", \"bedeutsam\", \"beer-expert\", \"befremdlich\", \"begrudgingly\", \"beileid\", \"beleaguered\", \"bellissimo\", \"benchwarmers\", \"benign-seeming\", \"berbahagia\", \"bergairah\", \"berkilat\", \"bersahaja\", \"besaran\", \"besonders\", \"bestuderen\", \"beurteilung\", \"beziehen\", \"biconvex\", \"bigotedly\", \"bills\", \"biology\", \"birthday\", \"bivalvular\", \"blanching\", \"blemish-free\", \"blockaded\", \"blossomed\", \"blunders\", \"bochornoso\", \"boleto\", \"boneblack\", \"boom\", \"boring-looking\", \"botonarse\", \"bourreaux\", \"brackishness\", \"brand-aware\", \"brauchbar\", \"breast-shaped\", \"brick-structured\", \"brisbane\", \"broccoli\", \"brown-nosing\", \"bubbles\", \"buffamente\", \"bullet\", \"buoyancy\", \"burr\", \"business-uninformed\", \"buzzed\", \"caching\", \"calado\", \"calibrator\", \"calming-sounding\", \"camels\", \"cancelar\", \"cannel\", \"capable-looking\", \"capitulado\", \"cara\", \"carcerazione\", \"carere\", \"carpenter\", \"cartoonish\", \"casserole\", \"cataplasm\", \"catholic-sympathetic\", \"cautiously\", \"cela\", \"celsius\", \"centerpiece\", \"cerchio\", \"certify\", \"chalklike\", \"channel-cut\", \"charcoal-gray\", \"chastisers\", \"cheerily\", \"cherokee\", \"chiedersi\", \"chimney\", \"chlorite\", \"chomping\", \"chroming\", \"chutar\", \"circa\", \"circumvention\", \"city-dwelling\", \"clamar\", \"clasificarse\", \"clean-energy-driven\", \"clerical-looking\", \"climate-resilient\", \"clockwork\", \"cloture\", \"co-\", \"coal-constrained\", \"cobaan\", \"codfish\", \"cognitive-impairing\", \"colaborativo\", \"collapse-related\", \"colloquially\", \"colorearse\", \"combed\", \"comicality\", \"commercial-grade\", \"commodus\", \"community-created\", \"company-evaluated\", \"compatir\", \"competenza\", \"completar-se\", \"compliquer\", \"comprehension-related\", \"comptroller\", \"comunitario\", \"concerned-eyed\", \"concluso\", \"condemnatory\", \"conduce\", \"confiadamente\", \"confiscatable\", \"conforto\", \"congestion-free\", \"conjecturer\", \"conoscenza\", \"conseguirse\", \"considerado\", \"consolingly\", \"constraint-free\", \"consumer-oriented\", \"contaminophobic\", \"contented-looking\", \"contingere\", \"contraddire\", \"contraventions\", \"controversablement\", \"conventionalists\", \"convincimento\", \"cooperatively-created\", \"coprolitic\", \"corks\", \"corporate-managed\", \"correto\", \"corruption-inducing\", \"cosmopolis\", \"cottage-style\", \"countercurrent\", \"couples\", \"covid-affected\", \"crabgrass\", \"craton\", \"creativity-promoting\", \"creerse\", \"criminality\", \"criticare\", \"cross-community\", \"crossmember\", \"cruised\", \"cryptanalyst\", \"cuesta\", \"culture-eroding\", \"curar-se\", \"curso\", \"custom-shaped\", \"cw\", \"cynical-eyed\", \"dahulu\", \"dampest\", \"darbieten\", \"data-permissive\", \"data\", \"datenerhebung\", \"daycare\", \"de-eroticizing\", \"dead-end\", \"debatieren\", \"debt-avoidant\", \"decapitate\", \"decepcionar\", \"declarar\", \"decommodify\", \"decoreren\", \"deducir\", \"defeatably\", \"deferentially\", \"definitely\", \"defragmentazione\", \"degraded\", \"dejar\", \"delegittimato\", \"delimitable\", \"demagnetized\", \"demilitarized\", \"demonolatry\", \"denasal\", \"dense-weave\", \"department-specific\", \"depiction\", \"depository\", \"depurato\", \"derramar\", \"desaddle\", \"desanexar\", \"desatualizadamente\", \"desclassificar-se\", \"descorazonador\", \"deselezionare\", \"desensibilizzare\", \"desexualize\", \"desiderare\", \"desinflado\", \"deslembrar\", \"desnudarse\", \"desparramarse\", \"despondent\", \"destabilizers\", \"desuetude\", \"detailed-looking\", \"determinants\", \"detractors\", \"developer-centric\", \"devisee\", \"diabetes-free\", \"diamond\", \"dichiarare\", \"dienen\", \"differentiators\", \"digelar\", \"dignifier\", \"dilancarkan\", \"diluviare\", \"dimusnahkan\", \"dipermaklumkan\", \"direction-sensitive\", \"dirtiest\", \"disallower\", \"disbanded\", \"disclosed\", \"discount-oriented\", \"discussing\", \"disentomb\", \"dishabituation\", \"disinfettarsi\", \"diskriminierend\", \"disorder-related\", \"disperdersi\", \"disprezzo\", \"disrobes\", \"dissipater\", \"distanciar-se\", \"distintivo\", \"districarsi\", \"ditto\", \"divertere\", \"divorcio\", \"dna-poor\", \"documentarse\", \"dolcificante\", \"domiciles\", \"donor-supported\", \"dosimeter\", \"doubloon\", \"downily\", \"drabbest\", \"dreadfully\", \"drinking-permitted\", \"drowned\", \"dual\", \"dues\", \"dunk\", \"durchkreuzen\", \"duvidoso\", \"e-centric\", \"earth-centered\", \"eastern-centric\", \"eboniest\", \"eco-friendly\", \"edelmoedig\", \"education-improving\", \"effekt\", \"effortless-to-clean\", \"egreso\", \"eindeutigkeit\", \"einlaufen\", \"einweisung\", \"elaborate-haired\", \"electricity-saving\", \"elemental-derived\", \"elites\", \"emaciazione\", \"embeber\", \"embroiderer\", \"emitir\", \"empeora\", \"employee-oriented\", \"empowerment-focused\", \"enardecerse\", \"enchufado\", \"encubierto\", \"endolingually\", \"energizing\", \"enflaquecer\", \"engine-driven\", \"engorgement\", \"enlever\", \"enrevesamiento\", \"entbinden\", \"entgegengesetzt\", \"entmenschlicht\", \"entretenidamente\", \"entwerfen\", \"environment-independent\", \"epigram\", \"equal-timed\", \"equipment-focused\", \"erectable\", \"erin\", \"erosion-affected\", \"error-inducing\", \"erwirken\", \"escape-themed\", \"escrutar\", \"esmerado\", \"espertamente\", \"essential\", \"este\", \"estorbarse\", \"estropear\", \"ethics-driven\", \"euonymus\", \"evacuee\", \"even-sounding\", \"evidenza\", \"exacerbators\", \"exaurir-se\", \"exchangeable\", \"excorticated\", \"executor\", \"exhibit-oriented\", \"exitable\", \"expandieren\", \"expensive\", \"expertise-developing\", \"exploited\", \"expresivamente\", \"extant\", \"externally-oriented\", \"extracurricular\", \"extremista\", \"eyeshade\", \"facile-looking\", \"facultatief\", \"faintly-scented\", \"fallas\", \"familiare\", \"fantasear\", \"farmer\", \"fast-food\", \"fataliser\", \"faultfinders\", \"fearless\", \"federally-funded\", \"fehlinterpretieren\", \"female-specific\", \"fernbank\", \"festejar\", \"feverfew\", \"fidelity-improving\", \"figurine\", \"filthiness\", \"fine-grained\", \"finora\", \"firmeza\", \"fitness-focused\", \"flabellate\", \"flammability\", \"flattens\", \"fleeces\", \"flights\", \"floodplain\", \"flow-retarding\", \"fluoride-free\", \"focar\", \"folgeerscheinung\", \"food-dependent\", \"foppery\", \"foreclosure\", \"forest-floor-smelling\", \"form-dependent\", \"formica\", \"fortieth\", \"fossil-fuel-generated\", \"four-valved\", \"fragmentador\", \"framework-integrated\", \"fraudulentamente\", \"freer\", \"frenesia\", \"fricassee\", \"frivolous-looking\", \"frostiest\", \"frustrante\", \"fulcrum\", \"fumbler\", \"funding-reliant\", \"furnished\", \"futurism\", \"gagging\", \"galvanometer\", \"gangsterish\", \"garniture\", \"gastrointestinal\", \"gazing\", \"gefangennehmen\", \"gelegt\", \"gender-independent\", \"generation\", \"gentianella\", \"geodesist\", \"geram\", \"gescheitmeierisch\", \"gestrige\", \"ghastly\", \"giocoso\", \"glaciated\", \"gleich\", \"globally-oriented\", \"glucose-derived\", \"gobbet\", \"goldfish\", \"gook\", \"government-developed\", \"grades-driven\", \"granddaddy\", \"graphic-rich\", \"grau\", \"graziarsi\", \"green-hued\", \"gridare\", \"groan\", \"groundcover\", \"growths\", \"guarded\", \"guideword\", \"guntur\", \"gyrating\", \"hackman\", \"hairdryer\", \"halite\", \"hamstrings\", \"handled\", \"happiness\", \"hardship\", \"harmoniousness\", \"hasrat\", \"haw\", \"headphone\", \"hearable\", \"heat-transparent\", \"hedonista\", \"held\", \"helvetian\", \"herausfallen\", \"heretics\", \"herunter\", \"heteronymous\", \"hidratarse\", \"high-handedly\", \"high-tin\", \"hilangnya\", \"hingekommen\", \"his\", \"hoaxer\", \"holdover\", \"homed\", \"homomorphic\", \"honte\", \"hormonally-unaffected\", \"horsekeeper\", \"hot-worked\", \"housewife\", \"hukum\", \"humanities-oriented\", \"humorous-looking\", \"husked\", \"hydrogen-driven\", \"hyperbole\", \"hypnotic\", \"hypothesizing\", \"icily\", \"identifiability\", \"idolizer\", \"igualdad\", \"ill-regarded\", \"illusorisch\", \"imaginario\", \"imediatamente\", \"immemorabile\", \"immortally\", \"impact-focused\", \"impazzire\", \"imperfect\", \"impicciarsi\", \"implicitness\", \"imposibilidad\", \"impreparato\", \"improprius\", \"impuramente\", \"inactively\", \"inapropiado\", \"incamminarsi\", \"incentivized\", \"inclemency\", \"income-oriented\", \"inconclusiveness\", \"incontrollabilmente\", \"incremental\", \"incurved\", \"indemnifying\", \"indevido\", \"indigentemente\", \"indispettirsi\", \"individually-led\", \"inductance\", \"industry-organized\", \"inelegant-seeming\", \"inestimably\", \"infame\", \"inferno\", \"inflaming\", \"influenciado\", \"informationszentrum\", \"infuriate\", \"ingrandire\", \"inhibited\", \"initiative-taker\", \"inkstand\", \"innervosirsi\", \"inocente\", \"inquietud\", \"insect-related\", \"insicuramente\", \"insolent-looking\", \"instabile\", \"instituted\", \"instrumentalize\", \"insurable\", \"integratively\", \"intemperantemente\", \"inter-racial\", \"interdependent\", \"interglaciality\", \"internalizado\", \"interoperable\", \"interrupts\", \"intimates\", \"intra-pacific\", \"intrepid\", \"introverted-eyed\", \"invalidez\", \"invest\", \"invigorating\", \"invulnerabile\", \"iridescent\", \"irrealisticamente\", \"irreparabile\", \"irrigidire\", \"island\", \"israel-supporting\", \"itlog\", \"jahat\", \"jato\", \"jeopardizes\", \"jingo\", \"joined\", \"joyous\", \"jumbo-sized\", \"justificarse\", \"kalkulasi\", \"kasihan\", \"keberanian\", \"keen-eyed\", \"keine\", \"kelemahan\", \"kencang\", \"keretakan\", \"kesungguhan\", \"ketidaklengkapan\", \"keyboardist\", \"kilt\", \"kitchenette\", \"knapsack\", \"knowingly\", \"kompetenzorientiert\", \"konsep\", \"kontrovers\", \"kostspielig\", \"kuasa\", \"label\", \"labrar\", \"ladeado\", \"lam\", \"lancinate\", \"language-dependent\", \"largamente\", \"lastimado\", \"latvia\", \"law-abiding\", \"layout-independent\", \"leadership-evaluated\", \"learn\", \"lechrous\", \"legal-minded\", \"legless\", \"lengkap\", \"lesione\", \"level-headed\", \"li\", \"libertinism\", \"lids\", \"ligand-independent\", \"light-starved\", \"limb\", \"limp\", \"linkable\", \"lips\", \"listless-legged\", \"litterer\", \"lm\", \"localization-aware\", \"locomover-se\", \"lograrse\", \"longevity\", \"lopping\", \"loudmouthed\", \"low-efficiency\", \"low-rna\", \"lows\", \"ludicrousness\", \"lunar-adjacent\", \"lussuosamente\", \"lyric-focused\", \"machine-interpretable\", \"madhouse\", \"magnetite\", \"mailgram\", \"makmur\", \"male-centeredness\", \"malicioso\", \"maltless\", \"management-biased\", \"mandoline\", \"manifested\", \"mansueto\", \"many-coloured\", \"marear\", \"market-concentrating\", \"markieren\", \"mary\", \"mass-wasted\", \"matchstick\", \"matte-lipped\", \"mayan\", \"means\", \"media\", \"medication-tolerant\", \"megan\", \"meldung\", \"melon\", \"membalut\", \"membohongi\", \"memeriksa\", \"memory-consuming\", \"memperingati\", \"memutihkan\", \"mencat\", \"mendesak\", \"mengacak-acak\", \"mengaudit\", \"menggarap\", \"menghentikan\", \"mengkombinasikan\", \"mengutamakan\", \"menorah\", \"menujukan\", \"menyenangkan\", \"meratifikasi\", \"merentasi\", \"merusak\", \"meta\", \"metamorfosi\", \"methylenedioxymethamphetamine\", \"miasma\", \"microsecond\", \"migliorante\", \"milk-based\", \"mincing\", \"miniaturized\", \"minuciosamente\", \"misapprehended\", \"misericordiosamente\", \"misogynist\", \"mist\", \"mitigabilmente\", \"moaner\", \"modeled\", \"modesti\", \"moisture-induced\", \"mollifiable\", \"moneyed\", \"monoculturalism\", \"monopoly-generating\", \"mood-boosting\", \"moralisch\", \"morsel\", \"mother-slaying\", \"motto\", \"movement-sensitive\", \"mudskipper\", \"multi-chamber\", \"multi-storied\", \"multimorphemic\", \"multiverse\", \"murkiness\", \"muskeg\", \"mutevole\", \"mystifyingly\", \"nadador\", \"nano-fabrication\", \"narrator\", \"nationalist\", \"nature\", \"near-arctic\", \"necking\", \"negatives\", \"nemen\", \"nescaya\", \"neurochemical\", \"neutralizingly\", \"newsworthiness\", \"nicotine-free\", \"nightcap\", \"nisbi\", \"nne\", \"noise-immune\", \"non-adhering\", \"non-arts-based\", \"non-breathable\", \"non-closedness\", \"non-consensual\", \"non-damage-related\", \"non-disputable\", \"non-envious\", \"non-fermenting\", \"non-gendered\", \"non-hotel-specific\", \"non-interpretive\", \"non-lexical\", \"non-medicated\", \"non-naturally\", \"non-oriental\", \"non-phototropic\", \"non-prognostic\", \"non-reflective\", \"non-revenue-generating\", \"non-sensual\", \"non-spore-producing\", \"non-syllabic\", \"non-transmittable\", \"non-viscosifiable\", \"noncancerous\", \"nondisclosure\", \"nonlinear\", \"nonprofitability\", \"nonvascularity\", \"normativa\", \"not-fully-grown-legged\", \"notre\", \"nubbin\", \"numeracy-proficient\", \"nutrimento\", \"obbedire\", \"objectingly\", \"obliterarsi\", \"observarse\", \"obstruktion\", \"occludersi\", \"octoroon\", \"odor-proof\", \"offcut\", \"officiously\", \"oil-laden\", \"oleomargarine\", \"ominousness\", \"onbelangrijk\", \"one-meter\", \"online-optimized\", \"onzedelijk\", \"openhearted\", \"opinion-led\", \"oppeuzelen\", \"opt\", \"opulento\", \"ordenar-se\", \"organelle\", \"orgasmic\", \"originalizzarsi\", \"orrendo\", \"osseous\", \"ostruzione\", \"ousted\", \"outer\", \"outprice\", \"outwear\", \"over-manage\", \"overburdened\", \"overemphasize\", \"overinvolvement\", \"overpromise\", \"overspending\", \"overwhelment\", \"oxygen\", \"pacified\", \"page-turner\", \"pakinabang\", \"palmada\", \"panegyric\", \"paper\", \"paraguay\", \"parare\", \"parent-operation\", \"parochially\", \"partially-initiated\", \"partita\", \"passability\", \"pasteurize\", \"pathless\", \"patsy\", \"payer\", \"peatland-dwelling\", \"pedestrianized\", \"peinar\", \"pemasukan\", \"penalizing\", \"penetranz\", \"penguasa\", \"pensativo\", \"penyesalan\", \"perangkat\", \"perder-se\", \"perfilarse\", \"periarticular\", \"periwigged\", \"permissive\", \"persecuted\", \"personalisieren\", \"perspicuous\", \"perturbed-looking\", \"pessimizer\", \"pettifogging\", \"pharmacy\", \"phobic\", \"photofit\", \"phrenic\", \"pibroch\", \"pieno\", \"pileup\", \"pinheaded\", \"pirating\", \"plaatsen\", \"plainer\", \"plant-based\", \"platonism\", \"pleats\", \"plot-centric\", \"plunger\", \"poesy\", \"polarizingly\", \"pollard\", \"polyfunctional\", \"pompa\", \"poorly-created\", \"popularly-decided\", \"porticoed\", \"positive-minded\", \"post-oestrous\", \"postponements\", \"potholder\", \"power-consolidating\", \"praecellere\", \"praxisfern\", \"pre-rational\", \"preciado\", \"predator\", \"prefabricate\", \"prelibato\", \"preocupar-se\", \"prescient\", \"preservationists\", \"prestige-oriented\", \"prevailed\", \"price-managed\", \"primness\", \"priory\", \"privilege-centered\", \"pro-gambler\", \"pro-transfusion\", \"probus\", \"proconsulate\", \"production-centered\", \"professional-appearing\", \"profit-centeredness\", \"prognosticator\", \"prohibitory\", \"prolongada\", \"promouvoir\", \"propane-fueled\", \"proposed\", \"prospects\", \"protein-associating\", \"protocol-dependent\", \"provavelmente\", \"provocativeness\", \"ps\", \"pteryla\", \"publicly-funded\", \"puke\", \"punah\", \"puntualidad\", \"purok\", \"putrefazione\", \"quad\", \"quality-driven\", \"quassare\", \"questions\", \"quinsy\", \"rabbrividire\", \"radiancy\", \"radiograph\", \"raggruppare\", \"ralenti\", \"randomization\", \"rapping\", \"rassodarsi\", \"ratline\", \"raza\", \"re-creation\", \"re-film\", \"re-shadowing\", \"reactionaries\", \"reaktionslos\", \"reanimar\", \"reassimilation\", \"rebuilder\", \"receivers\", \"rechtfertigung\", \"recloseable\", \"recompenser\", \"reconstruire\", \"rectal\", \"red-stained\", \"redirectable\", \"reduction-oriented\", \"reescrever\", \"reflectere\", \"refrenarse\", \"regality\", \"regionally-focused\", \"regrowth\", \"rehire\", \"reinsman\", \"rejoindre\", \"relaxant\", \"reliable-eyed\", \"reluctant\", \"reminiscent\", \"remote-work-friendly\", \"renew\", \"reoccur\", \"repeated\", \"replenished\", \"repouso\", \"reprocessed\", \"repulsorlift\", \"resarcir\", \"reservedly\", \"resiniferous\", \"resorption\", \"respektiert\", \"responsivitas\", \"restorasi\", \"result-driven\", \"retenido\", \"retransitioners\", \"rettore\", \"revenged\", \"revigorer\", \"revolutionaries\", \"rhinitis\", \"rib-related\", \"richtungsweisend\", \"ridesharing\", \"riformista\", \"rigid\", \"rimpiangere\", \"rinvigorirsi\", \"ripulirsi\", \"risk-loving\", \"ritenersi\", \"riverente\", \"rnase-deactivated\", \"robustest\", \"roiled\", \"roneo\", \"rosy-purple\", \"roughness\", \"royalism\", \"rudimentary-looking\", \"ruling\", \"ruptures\", \"rutinariamente\", \"sacking\", \"safeguardability\", \"sakhalin\", \"salir\", \"salvajada\", \"sanctioner\", \"sanjungan\", \"sat\", \"saudagar\", \"sbalordire\", \"scaled-down\", \"scarcitas\", \"sceneshifter\", \"schema\", \"schizzato\", \"school\", \"schwinden\", \"scoffs\", \"scopertamente\", \"scottish-themed\", \"screwed\", \"scrutiny\", \"sea-view\", \"seating\", \"secreta\", \"security-oriented\", \"seductoramente\", \"segregar-se\", \"sejahtera\", \"selezionato\", \"self-certifying\", \"self-direction\", \"self-harm\", \"self-motivated\", \"self-reliant-looking\", \"self-willed\", \"semi-annual\", \"senate\", \"sensibilizarse\", \"sentiment\", \"sepi\", \"serenar-se\", \"serrer\", \"session-based\", \"severest\", \"sfavillare\", \"sgradito\", \"shah\", \"shapeable\", \"sheared\", \"shiftiness\", \"shiver\", \"short-nosed\", \"showily\", \"shut-ins\", \"side-emitting\", \"sigma\", \"silencioso\", \"simbolizar\", \"simply-dressed\", \"single-barreled\", \"single-season\", \"sinkable\", \"sisterhood\", \"size-selective\", \"skill-depleting\", \"skittle\", \"slangily\", \"sleeved\", \"sliten\", \"slowworm\", \"smallest\", \"sminuzzarsi\", \"smooths\", \"snack-promoting\", \"sniffy\", \"snuffler\", \"sobriedad\", \"soddisfacimento\", \"software-controlled\", \"solar-distant\", \"solid-state\", \"solubilizing\", \"somnoliento\", \"sophisticated-seeming\", \"sorrowful\", \"sottostima\", \"soundly\", \"sovraccaricarsi\", \"spanish-inspired\", \"spate\", \"species-impoverished\", \"speech-related\", \"spensierato\", \"spiderlike\", \"spirazione\", \"splittable\", \"sporangiferous\", \"sprawl-inducing\", \"sprout\", \"squartare\", \"staatsdiener\", \"staff-reviewed\", \"stale\", \"standardization-supporting\", \"starling\", \"statehood\", \"statuta\", \"steerage\", \"stereotype\", \"stiffened\", \"stimulus-averse\", \"stocked\", \"stoops\", \"storylike\", \"strain-harden\", \"strategy-focused\", \"streichen\", \"strict-looking\", \"stroll\", \"struggles\", \"studs\", \"stutteringly\", \"subcommittee\", \"subjectively\", \"subordinado\", \"substance-dependent\", \"subtly-scented\", \"successful-appearing\", \"suet\", \"suit\", \"suministro\", \"sun-reactive\", \"suntrap\", \"superhero\", \"supervised\", \"supply-driven\", \"supremely\", \"surplus-based\", \"suspect\", \"sutler\", \"swallowing\", \"sweetening\", \"swizzle\", \"symphoniously\", \"synthesize\", \"t-junction\", \"tactful\", \"taiwan\", \"tallar\", \"tangible-product-oriented\", \"tardi-\", \"taste-enhancing\", \"tax-deductible\", \"teamorientiert\", \"technically\", \"technology-optimistic\", \"tegument\", \"telephony\", \"temperare\", \"tenant\", \"tensionante\", \"terbitan\", \"terlintas\", \"terracotta\", \"tertentu\", \"testiness\", \"thallophyte\", \"theoretically\", \"thermogenic\", \"thin-nosed\", \"thought\", \"thriftiness\", \"thunderously\", \"tiepidarsi\", \"time-activated\", \"tin-mining\", \"tiptoe\", \"tituber\", \"tofu\", \"tomato-based\", \"toothpaste\", \"torah\", \"torturous\", \"touchy-seeming\", \"toxicant\", \"tradable\", \"traduce\", \"trained-led\", \"tranquillitas\", \"transformar\", \"transitioner\", \"transparente\", \"trascurarsi\", \"travasare\", \"treatment-responsive\", \"trendy-haired\", \"trichomatous\", \"triode\", \"trivialidade\", \"troubleshooter\", \"truss\", \"tucker\", \"tune-up\", \"turn-on\", \"twangy\", \"two-dimensional\", \"typescript-generated\", \"ucap\", \"uk\", \"umbauen\", \"umzingeln\", \"unachieved\", \"unamicably\", \"unascended\", \"unausgeglichenheit\", \"unbehagen\", \"unbleached\", \"unbuttered\", \"uncirculated\", \"uncommentable\", \"uncongested\", \"uncoordinated-legged\", \"undeclared\", \"under-manned\", \"undercurrent\", \"underkill\", \"underreactive\", \"underthinking\", \"undiminished\", \"undying\", \"unendurably\", \"unevaluatability\", \"unfairly-presided\", \"unfitly\", \"unfortunate\", \"ungenerosity\", \"ungroupable\", \"unhip\", \"unifarben\", \"unimetallic\", \"uninstilled\", \"unione\", \"univalved\", \"unkultiviert\", \"unloading\", \"unmelodisch\", \"unmown\", \"unopened\", \"unpausable\", \"unpolluted\", \"unprofessionally-made\", \"unramified\", \"unreferencable\", \"unrepairable\", \"unrevealingly\", \"unsanitized\", \"unsegmentable\", \"unshutterable\", \"unsoundly\", \"unstoppably\", \"unsurprisingly\", \"unten\", \"unthinking-looking\", \"untraversable\", \"unvarnished\", \"unvorstellbar\", \"unwittingly\", \"updo\", \"uprooted\", \"urban-inspired\", \"urticaria\", \"using\", \"utopicamente\", \"vacation-related\", \"vago\", \"valider\", \"valuing\", \"vaporizer\", \"varnish\", \"vedetta\", \"velocity\", \"veniale\", \"veralterung\", \"verbrauch\", \"vereinfachung\", \"vergleich\", \"verkehren\", \"vermenschlicht\", \"verquicken\", \"verschwindend\", \"verstreut\", \"vervelen\", \"verzeihen\", \"vetustescere\", \"viciarse\", \"videoproyector\", \"viking\", \"vino\", \"virtual-work-disabling\", \"visitato\", \"vitiate\", \"vocal-driven\", \"voided\", \"voltage-controlled\", \"vomitus\", \"vorherig\", \"vowel-like\", \"vuotarsi\", \"wahrheit\", \"wallen\", \"warm-hearted\", \"wasserdicht\", \"water-proficient\", \"wave-ride\", \"weakly-glanced\", \"weatherboard\", \"weg\", \"weight-watcher\", \"well-bred\", \"well-oiled\", \"welshman\", \"western-facing\", \"what-do-you-call-it\", \"whimperingly\", \"whiteout\", \"wickedness\", \"wiedergabe\", \"willow\", \"windjammer\", \"winter-flowering\", \"wispy\", \"wl\", \"women-managed\", \"woody\", \"workbench\", \"world-destroying\", \"worthy\", \"wristwatch\", \"xerophytes\", \"yell\", \"yonder\", \"zangadamente\", \"zerhacken\", \"zionist\", \"zufriedenheit\", \"zusammenziehen\"];\n\n\n//# sourceURL=webpack://llexicom/./scripts/table.ts?");

/***/ }),

/***/ "./scripts/word.mustache":
/*!*******************************!*\
  !*** ./scripts/word.mustache ***!
  \*******************************/
/***/ ((module) => {

"use strict";
eval("module.exports = \"<!DOCTYPE html>\\n<div class=\\\"word-container\\\">\\n  <div class=\\\"header-section\\\">\\n    <h1 class=\\\"word-title\\\">{{word}}</h1>\\n  </div>\\n\\n  {{#pronunciation}}\\n  <div class=\\\"pronounce-section\\\">\\n    {{#ipa}}\\n    <div class=\\\"ipa\\\">{{ipa}}</div>\\n    {{/ipa}}\\n\\n    {{#ipa_uk}}\\n    <div class=\\\"ipa\\\">(英){{ipa_uk}}</div>\\n    {{/ipa_uk}}\\n\\n    {{#ipa_us}}\\n    <div class=\\\"ipa\\\">(米){{ipa_us}}</div>\\n    {{/ipa_us}}\\n\\n    {{#syllables}}\\n    <div class=\\\"syllable\\\">\\n      ({{syllables}})\\n    </div>\\n    {{/syllables}}\\n  </div>\\n  {{/pronunciation}}\\n\\n  <div class=\\\"priority-box\\\">\\n    <span class=\\\"priority\\\">{{priority}}</span>\\n  </div>\\n  \\n  {{#meanings}}\\n  <section class=\\\"section\\\">\\n    {{#.}}\\n    <div class=\\\"meaning-card\\\">\\n      <div class=\\\"meaning-title\\\">\\n        <div class=\\\"number\\\">\\n          {{index_plus_1}}.\\n        </div>\\n        <span class=\\\"part-of-speech\\\">\\n          {{part_of_speech_translated}}\\n        </span>\\n        <div class=\\\"definition-box\\\">\\n          <p class=\\\"definition\\\">{{definition}}</p>\\n        </div>\\n        {{#transitivity_translated}}\\n        <span class=\\\"transitivity-badge\\\">\\n          {{transitivity_translated}}\\n        </span>\\n        {{/transitivity_translated}}\\n      </div>\\n      <div class=\\\"meaning-content\\\">\\n\\t<div class=\\\"content\\\">\\n          <p class=\\\"english-definition\\\">{{english_definition}}</p>\\n          {{#examples}}\\n          {{^empty}}\\n          <ul class=\\\"example-list\\\">\\n            {{#.}}\\n            <li class=\\\"example-item\\\">\\n              <p class=\\\"sentence\\\">\\\"{{sentence}}\\\"</p>\\n              <p class=\\\"translation\\\"><em>{{translation}}</em></p>\\n            </li>\\n            {{/.}}\\n          </ul>\\n          {{/empty}}\\n          {{/examples}}\\n\\n          <div class=\\\"related-terms-group\\\">\\n            <div class=\\\"related-column\\\">\\n              <h4>コロケーション:</h4>\\n              <ul class=\\\"simple-list\\\">\\n\\t\\t{{#collocations}}\\n\\t\\t{{^empty}}\\n\\t\\t<li>{{.}}</li>\\n\\t\\t{{/empty}}\\n\\t\\t{{/collocations}}\\n              </ul>\\n            </div>\\n            <div class=\\\"related-column\\\">\\n              <h4>類義語:</h4>\\n              <ul class=\\\"simple-list\\\">\\n\\t\\t{{#synonyms}}\\n\\t\\t{{^empty}}\\n\\t\\t<li>{{.}}</li>\\n\\t\\t{{/empty}}\\n\\t\\t{{/synonyms}}\\n              </ul>\\n            </div>\\n            <div class=\\\"related-column\\\">\\n              <h4>対義語:</h4>\\n              <ul class=\\\"simple-list\\\">\\n\\t\\t{{#antonyms}}\\n\\t\\t{{^empty}}\\n\\t\\t<li>{{.}}</li>\\n\\t\\t{{/empty}}\\n\\t\\t{{/antonyms}}\\n\\t      </ul>\\n            </div>\\n          </div>\\n\\t</div>\\n      </div>\\n    </div>\\n    {{/.}}\\n  </section>\\n  {{/meanings}}\\n\\n  {{#readability_explanation}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">解説</h2>\\n    <div class=\\\"readability-explanation\\\">\\n      <p class=\\\"readability-level\\\"><strong>対象レベル:</strong> {{level}}</p>\\n      <p>{{{readability_explanation.text}}}</p>\\n    </div>\\n  </section>\\n  {{/readability_explanation}}\\n\\n  {{#etymology}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">語源</h2>\\n    <p>{{value}}</p>\\n  </section>\\n  {{/etymology}}\\n\\n  {{#inflection}}\\n  {{#has_inflection_forms}} {{! Helper to check if either noun_forms or verb_forms exists }}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">活用</h2>\\n    {{#noun_forms}}\\n    <h3>名詞の形:</h3>\\n    <dl class=\\\"definition-list\\\">\\n      <dt>単数形</dt>\\n      <dd>{{singular}}</dd>\\n      <dt>複数形</dt>\\n      <dd>{{plural}}</dd>\\n    </dl>\\n    {{/noun_forms}}\\n    {{#verb_forms}}\\n    <h3>動詞の形:</h3>\\n    <dl class=\\\"definition-list\\\">\\n      <dt>現在形</dt>\\n      <dd>{{present_simple_joined}}</dd>\\n      <dt>過去形</dt>\\n      <dd>{{past_simple}}</dd>\\n      <dt>過去分詞</dt>\\n      <dd>{{past_participle}}</dd>\\n      <dt>現在分詞</dt>\\n      <dd>{{present_participle}}</dd>\\n    </dl>\\n    {{/verb_forms}}\\n  </section>\\n  {{/has_inflection_forms}}\\n  {{/inflection}}\\n\\n  {{#usage_notes}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">使用上の注意</h2>\\n    <div class=\\\"note-box\\\">\\n      {{{usage_notes.explanation}}}\\n    </div>\\n  </section>\\n  {{/usage_notes}}\\n\\n  {{#common_mistakes}}\\n  {{#examples}}\\n  {{^empty}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">よくある間違い</h2>\\n    {{#.}}\\n    <div class=\\\"mistake-item\\\">\\n      <h4>間違い {{_index_plus_1}}:</h4>\\n      <p><span class=\\\"incorrect-example\\\">{{incorrect}}</span></p>\\n      <p><span class=\\\"correct-example\\\">{{correct}}</span></p>\\n      <p class=\\\"note-text\\\"><strong>補足:</strong> {{note}}</p>\\n    </div>\\n    {{/.}}\\n  </section>\\n  {{/empty}}\\n  {{/examples}}\\n  {{/common_mistakes}}\\n\\n  {{#related_words}}\\n  {{#has_related_words}} {{! Helper to check if any of the sub-arrays exist }}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">関連語句 <small class=\\\"sub-title\\\">(Related Words)</small></h2>\\n    <div class=\\\"related-terms-group\\\">\\n      {{#derivatives}}\\n      {{^empty}}\\n      <div class=\\\"related-column\\\">\\n        <h3>派生語:</h3>\\n        <ul class=\\\"simple-list\\\">\\n          {{#.}}\\n          <li>{{.}}</li>\\n          {{/.}}\\n        </ul>\\n      </div>\\n      {{/empty}}\\n      {{/derivatives}}\\n      {{#phrasal_verbs}}\\n      {{^empty}}\\n      <div class=\\\"related-column\\\">\\n        <h3>句動詞:</h3>\\n        <ul class=\\\"simple-list\\\">\\n          {{#.}}\\n          <li>{{.}}</li>\\n          {{/.}}\\n        </ul>\\n      </div>\\n      {{/empty}}\\n      {{/phrasal_verbs}}\\n      {{#idioms_phrases}}\\n      {{^empty}}\\n      <div class=\\\"related-column\\\">\\n        <h3>イディオム・慣用句:</h3>\\n        <ul class=\\\"simple-list\\\">\\n          {{#.}}\\n          <li>{{.}}</li>\\n          {{/.}}\\n        </ul>\\n      </div>\\n      {{/empty}}\\n      {{/idioms_phrases}}\\n    </div>\\n  </section>\\n  {{/has_related_words}}\\n  {{/related_words}}\\n\\n  {{#level_frequency}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">レベル・頻度</h2>\\n    <dl class=\\\"definition-list\\\">\\n      <dt>CEFR</dt>\\n      <dd>{{CEFR}}</dd>\\n      <dt>Google Ngram 頻度</dt>\\n      <dd>{{frequency_google_ngram}}</dd>\\n    </dl>\\n  </section>\\n  {{/level_frequency}}\\n\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">追加例文</h2>\\n    <ul class=\\\"additional-example-list\\\">\\n      {{#example_sentences}}\\n      {{^empty}}\\n      {{#.}}\\n      <li class=\\\"additional-example-item\\\">\\n        <p class=\\\"sentence\\\">\\\"{{{sentence}}}\\\"</p>\\n        <p class=\\\"translation\\\"><em>{{translation}}</em></p>\\n        <p class=\\\"meta-info\\\">\\n          タイプ: <span class=\\\"badge\\\">{{type_translated}}</span>,\\n          カテゴリ: <span class=\\\"badge\\\">{{meaning_category}}</span>\\n        </p>\\n      </li>\\n      {{/.}}\\n      {{/empty}}\\n      {{/example_sentences}}\\n    </ul>\\n  </section>\\n</div>\\n\";\n\n//# sourceURL=webpack://llexicom/./scripts/word.mustache?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./scripts/index.ts");
/******/ 	
/******/ })()
;