/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/hogan.js/lib/compiler.js":
/*!***********************************************!*\
  !*** ./node_modules/hogan.js/lib/compiler.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n(function (Hogan) {\n  // Setup regex  assignments\n  // remove whitespace according to Mustache spec\n  var rIsWhitespace = /\\S/,\n      rQuot = /\\\"/g,\n      rNewline =  /\\n/g,\n      rCr = /\\r/g,\n      rSlash = /\\\\/g,\n      rLineSep = /\\u2028/,\n      rParagraphSep = /\\u2029/;\n\n  Hogan.tags = {\n    '#': 1, '^': 2, '<': 3, '$': 4,\n    '/': 5, '!': 6, '>': 7, '=': 8, '_v': 9,\n    '{': 10, '&': 11, '_t': 12\n  };\n\n  Hogan.scan = function scan(text, delimiters) {\n    var len = text.length,\n        IN_TEXT = 0,\n        IN_TAG_TYPE = 1,\n        IN_TAG = 2,\n        state = IN_TEXT,\n        tagType = null,\n        tag = null,\n        buf = '',\n        tokens = [],\n        seenTag = false,\n        i = 0,\n        lineStart = 0,\n        otag = '{{',\n        ctag = '}}';\n\n    function addBuf() {\n      if (buf.length > 0) {\n        tokens.push({tag: '_t', text: new String(buf)});\n        buf = '';\n      }\n    }\n\n    function lineIsWhitespace() {\n      var isAllWhitespace = true;\n      for (var j = lineStart; j < tokens.length; j++) {\n        isAllWhitespace =\n          (Hogan.tags[tokens[j].tag] < Hogan.tags['_v']) ||\n          (tokens[j].tag == '_t' && tokens[j].text.match(rIsWhitespace) === null);\n        if (!isAllWhitespace) {\n          return false;\n        }\n      }\n\n      return isAllWhitespace;\n    }\n\n    function filterLine(haveSeenTag, noNewLine) {\n      addBuf();\n\n      if (haveSeenTag && lineIsWhitespace()) {\n        for (var j = lineStart, next; j < tokens.length; j++) {\n          if (tokens[j].text) {\n            if ((next = tokens[j+1]) && next.tag == '>') {\n              // set indent to token value\n              next.indent = tokens[j].text.toString()\n            }\n            tokens.splice(j, 1);\n          }\n        }\n      } else if (!noNewLine) {\n        tokens.push({tag:'\\n'});\n      }\n\n      seenTag = false;\n      lineStart = tokens.length;\n    }\n\n    function changeDelimiters(text, index) {\n      var close = '=' + ctag,\n          closeIndex = text.indexOf(close, index),\n          delimiters = trim(\n            text.substring(text.indexOf('=', index) + 1, closeIndex)\n          ).split(' ');\n\n      otag = delimiters[0];\n      ctag = delimiters[delimiters.length - 1];\n\n      return closeIndex + close.length - 1;\n    }\n\n    if (delimiters) {\n      delimiters = delimiters.split(' ');\n      otag = delimiters[0];\n      ctag = delimiters[1];\n    }\n\n    for (i = 0; i < len; i++) {\n      if (state == IN_TEXT) {\n        if (tagChange(otag, text, i)) {\n          --i;\n          addBuf();\n          state = IN_TAG_TYPE;\n        } else {\n          if (text.charAt(i) == '\\n') {\n            filterLine(seenTag);\n          } else {\n            buf += text.charAt(i);\n          }\n        }\n      } else if (state == IN_TAG_TYPE) {\n        i += otag.length - 1;\n        tag = Hogan.tags[text.charAt(i + 1)];\n        tagType = tag ? text.charAt(i + 1) : '_v';\n        if (tagType == '=') {\n          i = changeDelimiters(text, i);\n          state = IN_TEXT;\n        } else {\n          if (tag) {\n            i++;\n          }\n          state = IN_TAG;\n        }\n        seenTag = i;\n      } else {\n        if (tagChange(ctag, text, i)) {\n          tokens.push({tag: tagType, n: trim(buf), otag: otag, ctag: ctag,\n                       i: (tagType == '/') ? seenTag - otag.length : i + ctag.length});\n          buf = '';\n          i += ctag.length - 1;\n          state = IN_TEXT;\n          if (tagType == '{') {\n            if (ctag == '}}') {\n              i++;\n            } else {\n              cleanTripleStache(tokens[tokens.length - 1]);\n            }\n          }\n        } else {\n          buf += text.charAt(i);\n        }\n      }\n    }\n\n    filterLine(seenTag, true);\n\n    return tokens;\n  }\n\n  function cleanTripleStache(token) {\n    if (token.n.substr(token.n.length - 1) === '}') {\n      token.n = token.n.substring(0, token.n.length - 1);\n    }\n  }\n\n  function trim(s) {\n    if (s.trim) {\n      return s.trim();\n    }\n\n    return s.replace(/^\\s*|\\s*$/g, '');\n  }\n\n  function tagChange(tag, text, index) {\n    if (text.charAt(index) != tag.charAt(0)) {\n      return false;\n    }\n\n    for (var i = 1, l = tag.length; i < l; i++) {\n      if (text.charAt(index + i) != tag.charAt(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // the tags allowed inside super templates\n  var allowedInSuper = {'_t': true, '\\n': true, '$': true, '/': true};\n\n  function buildTree(tokens, kind, stack, customTags) {\n    var instructions = [],\n        opener = null,\n        tail = null,\n        token = null;\n\n    tail = stack[stack.length - 1];\n\n    while (tokens.length > 0) {\n      token = tokens.shift();\n\n      if (tail && tail.tag == '<' && !(token.tag in allowedInSuper)) {\n        throw new Error('Illegal content in < super tag.');\n      }\n\n      if (Hogan.tags[token.tag] <= Hogan.tags['$'] || isOpener(token, customTags)) {\n        stack.push(token);\n        token.nodes = buildTree(tokens, token.tag, stack, customTags);\n      } else if (token.tag == '/') {\n        if (stack.length === 0) {\n          throw new Error('Closing tag without opener: /' + token.n);\n        }\n        opener = stack.pop();\n        if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {\n          throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);\n        }\n        opener.end = token.i;\n        return instructions;\n      } else if (token.tag == '\\n') {\n        token.last = (tokens.length == 0) || (tokens[0].tag == '\\n');\n      }\n\n      instructions.push(token);\n    }\n\n    if (stack.length > 0) {\n      throw new Error('missing closing tag: ' + stack.pop().n);\n    }\n\n    return instructions;\n  }\n\n  function isOpener(token, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].o == token.n) {\n        token.tag = '#';\n        return true;\n      }\n    }\n  }\n\n  function isCloser(close, open, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].c == close && tags[i].o == open) {\n        return true;\n      }\n    }\n  }\n\n  function stringifySubstitutions(obj) {\n    var items = [];\n    for (var key in obj) {\n      items.push('\"' + esc(key) + '\": function(c,p,t,i) {' + obj[key] + '}');\n    }\n    return \"{ \" + items.join(\",\") + \" }\";\n  }\n\n  function stringifyPartials(codeObj) {\n    var partials = [];\n    for (var key in codeObj.partials) {\n      partials.push('\"' + esc(key) + '\":{name:\"' + esc(codeObj.partials[key].name) + '\", ' + stringifyPartials(codeObj.partials[key]) + \"}\");\n    }\n    return \"partials: {\" + partials.join(\",\") + \"}, subs: \" + stringifySubstitutions(codeObj.subs);\n  }\n\n  Hogan.stringify = function(codeObj, text, options) {\n    return \"{code: function (c,p,i) { \" + Hogan.wrapMain(codeObj.code) + \" },\" + stringifyPartials(codeObj) +  \"}\";\n  }\n\n  var serialNo = 0;\n  Hogan.generate = function(tree, text, options) {\n    serialNo = 0;\n    var context = { code: '', subs: {}, partials: {} };\n    Hogan.walk(tree, context);\n\n    if (options.asString) {\n      return this.stringify(context, text, options);\n    }\n\n    return this.makeTemplate(context, text, options);\n  }\n\n  Hogan.wrapMain = function(code) {\n    return 'var t=this;t.b(i=i||\"\");' + code + 'return t.fl();';\n  }\n\n  Hogan.template = Hogan.Template;\n\n  Hogan.makeTemplate = function(codeObj, text, options) {\n    var template = this.makePartials(codeObj);\n    template.code = new Function('c', 'p', 'i', this.wrapMain(codeObj.code));\n    return new this.template(template, text, this, options);\n  }\n\n  Hogan.makePartials = function(codeObj) {\n    var key, template = {subs: {}, partials: codeObj.partials, name: codeObj.name};\n    for (key in template.partials) {\n      template.partials[key] = this.makePartials(template.partials[key]);\n    }\n    for (key in codeObj.subs) {\n      template.subs[key] = new Function('c', 'p', 't', 'i', codeObj.subs[key]);\n    }\n    return template;\n  }\n\n  function esc(s) {\n    return s.replace(rSlash, '\\\\\\\\')\n            .replace(rQuot, '\\\\\\\"')\n            .replace(rNewline, '\\\\n')\n            .replace(rCr, '\\\\r')\n            .replace(rLineSep, '\\\\u2028')\n            .replace(rParagraphSep, '\\\\u2029');\n  }\n\n  function chooseMethod(s) {\n    return (~s.indexOf('.')) ? 'd' : 'f';\n  }\n\n  function createPartial(node, context) {\n    var prefix = \"<\" + (context.prefix || \"\");\n    var sym = prefix + node.n + serialNo++;\n    context.partials[sym] = {name: node.n, partials: {}};\n    context.code += 't.b(t.rp(\"' +  esc(sym) + '\",c,p,\"' + (node.indent || '') + '\"));';\n    return sym;\n  }\n\n  Hogan.codegen = {\n    '#': function(node, context) {\n      context.code += 'if(t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),' +\n                      'c,p,0,' + node.i + ',' + node.end + ',\"' + node.otag + \" \" + node.ctag + '\")){' +\n                      't.rs(c,p,' + 'function(c,p,t){';\n      Hogan.walk(node.nodes, context);\n      context.code += '});c.pop();}';\n    },\n\n    '^': function(node, context) {\n      context.code += 'if(!t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),c,p,1,0,0,\"\")){';\n      Hogan.walk(node.nodes, context);\n      context.code += '};';\n    },\n\n    '>': createPartial,\n    '<': function(node, context) {\n      var ctx = {partials: {}, code: '', subs: {}, inPartial: true};\n      Hogan.walk(node.nodes, ctx);\n      var template = context.partials[createPartial(node, context)];\n      template.subs = ctx.subs;\n      template.partials = ctx.partials;\n    },\n\n    '$': function(node, context) {\n      var ctx = {subs: {}, code: '', partials: context.partials, prefix: node.n};\n      Hogan.walk(node.nodes, ctx);\n      context.subs[node.n] = ctx.code;\n      if (!context.inPartial) {\n        context.code += 't.sub(\"' + esc(node.n) + '\",c,p,i);';\n      }\n    },\n\n    '\\n': function(node, context) {\n      context.code += write('\"\\\\n\"' + (node.last ? '' : ' + i'));\n    },\n\n    '_v': function(node, context) {\n      context.code += 't.b(t.v(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n    },\n\n    '_t': function(node, context) {\n      context.code += write('\"' + esc(node.text) + '\"');\n    },\n\n    '{': tripleStache,\n\n    '&': tripleStache\n  }\n\n  function tripleStache(node, context) {\n    context.code += 't.b(t.t(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n  }\n\n  function write(s) {\n    return 't.b(' + s + ');';\n  }\n\n  Hogan.walk = function(nodelist, context) {\n    var func;\n    for (var i = 0, l = nodelist.length; i < l; i++) {\n      func = Hogan.codegen[nodelist[i].tag];\n      func && func(nodelist[i], context);\n    }\n    return context;\n  }\n\n  Hogan.parse = function(tokens, text, options) {\n    options = options || {};\n    return buildTree(tokens, '', [], options.sectionTags || []);\n  }\n\n  Hogan.cache = {};\n\n  Hogan.cacheKey = function(text, options) {\n    return [text, !!options.asString, !!options.disableLambda, options.delimiters, !!options.modelGet].join('||');\n  }\n\n  Hogan.compile = function(text, options) {\n    options = options || {};\n    var key = Hogan.cacheKey(text, options);\n    var template = this.cache[key];\n\n    if (template) {\n      var partials = template.partials;\n      for (var name in partials) {\n        delete partials[name].instance;\n      }\n      return template;\n    }\n\n    template = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);\n    return this.cache[key] = template;\n  }\n})( true ? exports : 0);\n\n\n//# sourceURL=webpack://llexicom/./node_modules/hogan.js/lib/compiler.js?");

/***/ }),

/***/ "./node_modules/hogan.js/lib/hogan.js":
/*!********************************************!*\
  !*** ./node_modules/hogan.js/lib/hogan.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n// This file is for use with Node.js. See dist/ for browser files.\n\nvar Hogan = __webpack_require__(/*! ./compiler */ \"./node_modules/hogan.js/lib/compiler.js\");\nHogan.Template = (__webpack_require__(/*! ./template */ \"./node_modules/hogan.js/lib/template.js\").Template);\nHogan.template = Hogan.Template;\nmodule.exports = Hogan;\n\n\n//# sourceURL=webpack://llexicom/./node_modules/hogan.js/lib/hogan.js?");

/***/ }),

/***/ "./node_modules/hogan.js/lib/template.js":
/*!***********************************************!*\
  !*** ./node_modules/hogan.js/lib/template.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nvar Hogan = {};\n\n(function (Hogan) {\n  Hogan.Template = function (codeObj, text, compiler, options) {\n    codeObj = codeObj || {};\n    this.r = codeObj.code || this.r;\n    this.c = compiler;\n    this.options = options || {};\n    this.text = text || '';\n    this.partials = codeObj.partials || {};\n    this.subs = codeObj.subs || {};\n    this.buf = '';\n  }\n\n  Hogan.Template.prototype = {\n    // render: replaced by generated code.\n    r: function (context, partials, indent) { return ''; },\n\n    // variable escaping\n    v: hoganEscape,\n\n    // triple stache\n    t: coerceToString,\n\n    render: function render(context, partials, indent) {\n      return this.ri([context], partials || {}, indent);\n    },\n\n    // render internal -- a hook for overrides that catches partials too\n    ri: function (context, partials, indent) {\n      return this.r(context, partials, indent);\n    },\n\n    // ensurePartial\n    ep: function(symbol, partials) {\n      var partial = this.partials[symbol];\n\n      // check to see that if we've instantiated this partial before\n      var template = partials[partial.name];\n      if (partial.instance && partial.base == template) {\n        return partial.instance;\n      }\n\n      if (typeof template == 'string') {\n        if (!this.c) {\n          throw new Error(\"No compiler available.\");\n        }\n        template = this.c.compile(template, this.options);\n      }\n\n      if (!template) {\n        return null;\n      }\n\n      // We use this to check whether the partials dictionary has changed\n      this.partials[symbol].base = template;\n\n      if (partial.subs) {\n        // Make sure we consider parent template now\n        if (!partials.stackText) partials.stackText = {};\n        for (key in partial.subs) {\n          if (!partials.stackText[key]) {\n            partials.stackText[key] = (this.activeSub !== undefined && partials.stackText[this.activeSub]) ? partials.stackText[this.activeSub] : this.text;\n          }\n        }\n        template = createSpecializedPartial(template, partial.subs, partial.partials,\n          this.stackSubs, this.stackPartials, partials.stackText);\n      }\n      this.partials[symbol].instance = template;\n\n      return template;\n    },\n\n    // tries to find a partial in the current scope and render it\n    rp: function(symbol, context, partials, indent) {\n      var partial = this.ep(symbol, partials);\n      if (!partial) {\n        return '';\n      }\n\n      return partial.ri(context, partials, indent);\n    },\n\n    // render a section\n    rs: function(context, partials, section) {\n      var tail = context[context.length - 1];\n\n      if (!isArray(tail)) {\n        section(context, partials, this);\n        return;\n      }\n\n      for (var i = 0; i < tail.length; i++) {\n        context.push(tail[i]);\n        section(context, partials, this);\n        context.pop();\n      }\n    },\n\n    // maybe start a section\n    s: function(val, ctx, partials, inverted, start, end, tags) {\n      var pass;\n\n      if (isArray(val) && val.length === 0) {\n        return false;\n      }\n\n      if (typeof val == 'function') {\n        val = this.ms(val, ctx, partials, inverted, start, end, tags);\n      }\n\n      pass = !!val;\n\n      if (!inverted && pass && ctx) {\n        ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);\n      }\n\n      return pass;\n    },\n\n    // find values with dotted names\n    d: function(key, ctx, partials, returnFound) {\n      var found,\n          names = key.split('.'),\n          val = this.f(names[0], ctx, partials, returnFound),\n          doModelGet = this.options.modelGet,\n          cx = null;\n\n      if (key === '.' && isArray(ctx[ctx.length - 2])) {\n        val = ctx[ctx.length - 1];\n      } else {\n        for (var i = 1; i < names.length; i++) {\n          found = findInScope(names[i], val, doModelGet);\n          if (found !== undefined) {\n            cx = val;\n            val = found;\n          } else {\n            val = '';\n          }\n        }\n      }\n\n      if (returnFound && !val) {\n        return false;\n      }\n\n      if (!returnFound && typeof val == 'function') {\n        ctx.push(cx);\n        val = this.mv(val, ctx, partials);\n        ctx.pop();\n      }\n\n      return val;\n    },\n\n    // find values with normal names\n    f: function(key, ctx, partials, returnFound) {\n      var val = false,\n          v = null,\n          found = false,\n          doModelGet = this.options.modelGet;\n\n      for (var i = ctx.length - 1; i >= 0; i--) {\n        v = ctx[i];\n        val = findInScope(key, v, doModelGet);\n        if (val !== undefined) {\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        return (returnFound) ? false : \"\";\n      }\n\n      if (!returnFound && typeof val == 'function') {\n        val = this.mv(val, ctx, partials);\n      }\n\n      return val;\n    },\n\n    // higher order templates\n    ls: function(func, cx, partials, text, tags) {\n      var oldTags = this.options.delimiters;\n\n      this.options.delimiters = tags;\n      this.b(this.ct(coerceToString(func.call(cx, text)), cx, partials));\n      this.options.delimiters = oldTags;\n\n      return false;\n    },\n\n    // compile text\n    ct: function(text, cx, partials) {\n      if (this.options.disableLambda) {\n        throw new Error('Lambda features disabled.');\n      }\n      return this.c.compile(text, this.options).render(cx, partials);\n    },\n\n    // template result buffering\n    b: function(s) { this.buf += s; },\n\n    fl: function() { var r = this.buf; this.buf = ''; return r; },\n\n    // method replace section\n    ms: function(func, ctx, partials, inverted, start, end, tags) {\n      var textSource,\n          cx = ctx[ctx.length - 1],\n          result = func.call(cx);\n\n      if (typeof result == 'function') {\n        if (inverted) {\n          return true;\n        } else {\n          textSource = (this.activeSub && this.subsText && this.subsText[this.activeSub]) ? this.subsText[this.activeSub] : this.text;\n          return this.ls(result, cx, partials, textSource.substring(start, end), tags);\n        }\n      }\n\n      return result;\n    },\n\n    // method replace variable\n    mv: function(func, ctx, partials) {\n      var cx = ctx[ctx.length - 1];\n      var result = func.call(cx);\n\n      if (typeof result == 'function') {\n        return this.ct(coerceToString(result.call(cx)), cx, partials);\n      }\n\n      return result;\n    },\n\n    sub: function(name, context, partials, indent) {\n      var f = this.subs[name];\n      if (f) {\n        this.activeSub = name;\n        f(context, partials, this, indent);\n        this.activeSub = false;\n      }\n    }\n\n  };\n\n  //Find a key in an object\n  function findInScope(key, scope, doModelGet) {\n    var val;\n\n    if (scope && typeof scope == 'object') {\n\n      if (scope[key] !== undefined) {\n        val = scope[key];\n\n      // try lookup with get for backbone or similar model data\n      } else if (doModelGet && scope.get && typeof scope.get == 'function') {\n        val = scope.get(key);\n      }\n    }\n\n    return val;\n  }\n\n  function createSpecializedPartial(instance, subs, partials, stackSubs, stackPartials, stackText) {\n    function PartialTemplate() {};\n    PartialTemplate.prototype = instance;\n    function Substitutions() {};\n    Substitutions.prototype = instance.subs;\n    var key;\n    var partial = new PartialTemplate();\n    partial.subs = new Substitutions();\n    partial.subsText = {};  //hehe. substext.\n    partial.buf = '';\n\n    stackSubs = stackSubs || {};\n    partial.stackSubs = stackSubs;\n    partial.subsText = stackText;\n    for (key in subs) {\n      if (!stackSubs[key]) stackSubs[key] = subs[key];\n    }\n    for (key in stackSubs) {\n      partial.subs[key] = stackSubs[key];\n    }\n\n    stackPartials = stackPartials || {};\n    partial.stackPartials = stackPartials;\n    for (key in partials) {\n      if (!stackPartials[key]) stackPartials[key] = partials[key];\n    }\n    for (key in stackPartials) {\n      partial.partials[key] = stackPartials[key];\n    }\n\n    return partial;\n  }\n\n  var rAmp = /&/g,\n      rLt = /</g,\n      rGt = />/g,\n      rApos = /\\'/g,\n      rQuot = /\\\"/g,\n      hChars = /[&<>\\\"\\']/;\n\n  function coerceToString(val) {\n    return String((val === null || val === undefined) ? '' : val);\n  }\n\n  function hoganEscape(str) {\n    str = coerceToString(str);\n    return hChars.test(str) ?\n      str\n        .replace(rAmp, '&amp;')\n        .replace(rLt, '&lt;')\n        .replace(rGt, '&gt;')\n        .replace(rApos, '&#39;')\n        .replace(rQuot, '&quot;') :\n      str;\n  }\n\n  var isArray = Array.isArray || function(a) {\n    return Object.prototype.toString.call(a) === '[object Array]';\n  };\n\n})( true ? exports : 0);\n\n\n//# sourceURL=webpack://llexicom/./node_modules/hogan.js/lib/template.js?");

/***/ }),

/***/ "./scripts/finder.ts":
/*!***************************!*\
  !*** ./scripts/finder.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Finder = void 0;\nclass Finder {\n    constructor() {\n        this.table = (__webpack_require__(/*! ./table */ \"./scripts/table.ts\").table);\n        this.cachedDictionary = {};\n    }\n    nearestIndex(key, table = this.table) {\n        let left = -1;\n        let right = table.length;\n        while (right - left > 1) {\n            const mid = Math.floor(left + (right - left) / 2);\n            if (table[mid] > key) {\n                right = mid;\n            }\n            else {\n                left = mid;\n            }\n        }\n        return left;\n    }\n    // Returns `count` of words which nears specified `key` in dictionary.\n    nearby(key, count) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _ = yield this.find(key); // Call this just for populate the cache.\n            const near_keys = Object.keys(this.cachedDictionary).sort();\n            const index = this.nearestIndex(key, near_keys);\n            const keys = near_keys.slice(Math.max(0, index - (count / 2)), index + (count / 2) + 1);\n            return Object.fromEntries(keys.map((key) => [key, this.cachedDictionary[key][0].meanings[0].definition]));\n        });\n    }\n    randomChoice(count) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shuffled = [...this.table];\n            for (let i = shuffled.length - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n            }\n            const files = count / 10;\n            const src = shuffled.slice(0, files);\n            const promises = src.map((key) => this.find(key));\n            const results = yield Promise.all(promises);\n            const usedIndices = new Set();\n            const words = [];\n            const originalKeys = Object.keys(this.cachedDictionary);\n            while (words.length < count) {\n                const index = Math.floor(Math.random() * originalKeys.length);\n                if (usedIndices.has(index)) {\n                    continue;\n                }\n                if (!this.cachedDictionary[originalKeys[index]] ||\n                    !this.cachedDictionary[originalKeys[index]][0].meanings) {\n                    continue;\n                }\n                usedIndices.add(index);\n                words.push(originalKeys[index]);\n            }\n            return Object.fromEntries(words.map((key) => [key, this.cachedDictionary[key][0].meanings[0].definition]));\n        });\n    }\n    // Returns single word data which exactly matches specified `key`.\n    // The `key` is case-insensitive.\n    find(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const canonical_key = key.toLowerCase();\n            if (this.cachedDictionary[canonical_key]) {\n                console.log(`cache hit for ${canonical_key} out of ${Object.keys(this.cachedDictionary).length}`);\n                return this.cachedDictionary[canonical_key];\n            }\n            try {\n                const nearest_index = this.nearestIndex(canonical_key);\n                const nearest_key = this.table[nearest_index];\n                console.log(`fetching ${nearest_key} for ${canonical_key}`);\n                const response = yield fetch(`${nearest_key}.json.lz`, {\n                    method: 'GET',\n                    headers: {\n                        'Accept-Encoding': 'br'\n                    }\n                });\n                const ds = new DecompressionStream(\"deflate\");\n                const readableStream = response.body;\n                if (readableStream === null) {\n                    console.error(\"no readable stream\");\n                    return undefined;\n                }\n                const decompressedStream = readableStream.pipeThrough(ds);\n                const blob = yield new Response(decompressedStream).blob();\n                const dict = JSON.parse(yield blob.text());\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                this.cachedDictionary = Object.assign(Object.assign({}, this.cachedDictionary), dict);\n                return this.cachedDictionary[canonical_key];\n            }\n            catch (error) {\n                console.error('Error fetching dictionary data:', error);\n                return undefined;\n            }\n        });\n    }\n}\nexports.Finder = Finder;\n\n\n//# sourceURL=webpack://llexicom/./scripts/finder.ts?");

/***/ }),

/***/ "./scripts/index.ts":
/*!**************************!*\
  !*** ./scripts/index.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst finder_1 = __webpack_require__(/*! ./finder */ \"./scripts/finder.ts\");\nconst render_1 = __webpack_require__(/*! ./render */ \"./scripts/render.ts\");\nconst finder = new finder_1.Finder();\nconst performSearch = () => {\n    const searchInput = document.getElementById('searchInput');\n    if (!(searchInput instanceof HTMLInputElement)) {\n        console.error(\"not valid input\");\n        return;\n    }\n    const searchTerm = searchInput === null || searchInput === void 0 ? void 0 : searchInput.value.trim();\n    if (searchTerm === undefined) {\n        return;\n    }\n    performSearchAndPushHistory(searchTerm);\n};\nconst performSearchAndPushHistory = (searchTerm) => {\n    performSearchImpl(searchTerm);\n    const newUrl = `?query=${searchTerm}`;\n    history.pushState({\n        query: searchTerm\n    }, '', newUrl);\n};\nconst performSearchImpl = (searchTerm) => __awaiter(void 0, void 0, void 0, function* () {\n    if (searchTerm === '') {\n        console.log(\"empty query\");\n        return;\n    }\n    const resultsContainer = document.getElementById('results');\n    if (resultsContainer === null) {\n        console.error(\"No result box\");\n        return;\n    }\n    const data = yield finder.find(searchTerm);\n    if (data === undefined) {\n        const candidates = yield finder.nearby(searchTerm, 100);\n        resultsContainer.innerHTML = (0, render_1.renderNotfoundMessage)(searchTerm, candidates);\n        return;\n    }\n    else {\n        resultsContainer.innerHTML = (0, render_1.render)(data);\n        const cards = document.getElementsByClassName(\"meaning-card\");\n        for (const card of cards) {\n            card.addEventListener('click', (m) => {\n                if (!(m.target instanceof HTMLElement)) {\n                    return;\n                }\n                const body = card.querySelector('.meaning-content');\n                if (body) {\n                    body.classList.toggle(\"visible\");\n                }\n                const title = card.querySelector('.meaning-title');\n                if (title) {\n                    title.classList.toggle(\"expand\");\n                }\n            });\n        }\n    }\n});\nconst fillSamples = () => __awaiter(void 0, void 0, void 0, function* () {\n    const samples = yield finder.randomChoice(100);\n    const resultsContainer = document.getElementById('results');\n    if (!resultsContainer) {\n        console.log(\"no container\");\n        return;\n    }\n    resultsContainer.innerHTML = (0, render_1.renderIndexSamples)(samples);\n    const wordEntries = document.getElementsByClassName('word-entry');\n    for (const wordEntry of wordEntries) {\n        wordEntry.addEventListener('click', (event) => {\n            const div = wordEntry.querySelector('div');\n            if (div) {\n                const word = div.innerHTML;\n                performSearchAndPushHistory(word);\n            }\n            event.stopPropagation();\n        }, true);\n    }\n});\nfunction load() {\n    const searchButton = document.getElementById('searchButton');\n    searchButton === null || searchButton === void 0 ? void 0 : searchButton.addEventListener('click', () => {\n        performSearch();\n    });\n    const searchInput = document.getElementById('searchInput');\n    searchInput === null || searchInput === void 0 ? void 0 : searchInput.addEventListener('keypress', (event) => {\n        if (event.key === 'Enter') {\n            performSearch();\n        }\n    });\n    const logo = document.getElementById('logo');\n    logo === null || logo === void 0 ? void 0 : logo.addEventListener('click', () => {\n        history.pushState({\n            query: undefined\n        }, '', location.pathname);\n        fillSamples();\n    });\n    const params = new URLSearchParams(window.location.search);\n    const query = params.get('query');\n    if (searchInput instanceof HTMLInputElement && query !== null) {\n        searchInput.value = query;\n        performSearchImpl(query);\n    }\n    else {\n        fillSamples();\n    }\n}\n;\nwindow.addEventListener('pageshow', (event) => {\n    load();\n});\nwindow.addEventListener('popstate', (event) => {\n    const searchInput = document.getElementById('searchInput');\n    if (event.state && searchInput instanceof HTMLInputElement) {\n        const query = event.state.query || '';\n        if (!query) {\n            fillSamples();\n        }\n        else {\n            searchInput.value = query;\n            performSearchImpl(query);\n        }\n    }\n    else {\n        load();\n    }\n});\n\n\n//# sourceURL=webpack://llexicom/./scripts/index.ts?");

/***/ }),

/***/ "./scripts/render.ts":
/*!***************************!*\
  !*** ./scripts/render.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.render = render;\nexports.renderNotfoundMessage = renderNotfoundMessage;\nexports.renderIndexSamples = renderIndexSamples;\nconst Hogan = __webpack_require__(/*! hogan.js */ \"./node_modules/hogan.js/lib/hogan.js\");\nconst word_mustache_1 = __importDefault(__webpack_require__(/*! ./word.mustache */ \"./scripts/word.mustache\"));\nconst template = Hogan.compile(word_mustache_1.default);\nfunction parseMarkdownBold(text) {\n    if (!text) {\n        return \"\";\n    }\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n}\nfunction translatePartOfSpeech(pos) {\n    switch (pos) {\n        case \"verb\":\n            return \"動詞\";\n        case \"verb (vt)\":\n            return \"他動詞\";\n        case \"verb (vi)\":\n            return \"自動詞\";\n        case \"noun\":\n            return \"名詞\";\n        case \"pronoun\":\n            return \"代名詞\";\n        case \"proper noun\":\n            return \"固有名詞\";\n        case \"adjective\":\n            return \"形容詞\";\n        case \"adverb\":\n            return \"副詞\";\n        case \"preposition\":\n            return \"前置詞\";\n        case \"conjunction\":\n            return \"接続詞\";\n        case \"interjection\":\n            return \"間投詞\";\n    }\n    if (pos.startsWith(\"verb\")) {\n        return \"動詞 (変化)\";\n    }\n    if (pos.startsWith(\"adjective\")) {\n        return \"形容詞\";\n    }\n    console.log(pos);\n    return \"Unknown\";\n}\nfunction translateTransitivity(en) {\n    switch (en) {\n        case \"vr\":\n        case \"vi\":\n            return \"自\";\n        case \"vt\":\n            return \"他\";\n    }\n    return \"sss\";\n}\nfunction mustachePreprocess(data) {\n    if (data.meanings) {\n        for (let i = 0; i < data.meanings.length; i++) {\n            data.meanings[i].index_plus_1 = i + 1;\n            if (data.meanings[i].part_of_speech) {\n                data.meanings[i].part_of_speech_translated = translatePartOfSpeech(data.meanings[i].part_of_speech);\n            }\n            if (data.meanings[i].transitivity) {\n                data.meanings[i].transitivity_translated = translateTransitivity(data.meanings[i].transitivity);\n            }\n        }\n    }\n    if (data.example_sentences) {\n        for (let i = 0; i < data.example_sentences.length; i++) {\n            if (data.example_sentences[i].type) {\n                data.example_sentences[i].type_translated = translatePartOfSpeech(data.example_sentences[i].type);\n            }\n            if (data.example_sentences[i].sentence) {\n                data.example_sentences[i].sentence = parseMarkdownBold(data.example_sentences[i].sentence);\n            }\n        }\n    }\n    if (data.readability_explanation) {\n        data.readability_explanation.text = parseMarkdownBold(data.readability_explanation.text);\n    }\n    if (data.usage_notes) {\n        data.usage_notes.explanation = parseMarkdownBold(data.usage_notes.explanation);\n    }\n    return data;\n}\nfunction render(data) {\n    return template.render(mustachePreprocess(data[0])); // TODO: Handle multiple words data if exists.\n}\nfunction renderNotfoundMessage(target, words) {\n    const sorted_words = Object.keys(words).sort();\n    let result = `${target}は見つかりませんでした<br>`;\n    result += '<div class=\"suggestions-container\">\\n';\n    result += '<div class=\"suggestions-title\">もしかして:</div>\\n';\n    result += '<div class=\"word-tags\">\\n';\n    for (let i = 0; i < sorted_words.length; i++) {\n        result += `<a href=\"?query=${sorted_words[i]}\" class=\"word-tag\" title=\"${words[sorted_words[i]]}\">${sorted_words[i]}</a><br>`;\n    }\n    result += '</div></div>';\n    return result;\n}\nfunction renderIndexSamples(words) {\n    const keys = Object.keys(words);\n    let result = '<div class=\"list-container\">\\n';\n    result += '<ul class=\"word-list\">\\n';\n    for (let i = 0; i < keys.length; i++) {\n        result += `<li class=\"word-entry\" title=\"${keys[i]}\"><div class=\"word-link\">${keys[i]}</div>`;\n        result += `<span class=\"word-translation\">${words[keys[i]]}</span></li>`;\n    }\n    result += '</ul></div>';\n    return result;\n}\n\n\n//# sourceURL=webpack://llexicom/./scripts/render.ts?");

/***/ }),

/***/ "./scripts/table.ts":
/*!**************************!*\
  !*** ./scripts/table.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nexports.table = [\"-\", \"aanvang\", \"abatatar\", \"abbreviation\", \"abettor\", \"abhorrent\", \"ablactated\", \"abolire\", \"above\", \"abrumado\", \"absoluteness\", \"abstinency\", \"aburrir\", \"academically-supervised\", \"acceleratable\", \"accessibility\", \"accommodations\", \"accresce\", \"aced\", \"acetylize\", \"achteloos\", \"aclamar\", \"acoustically\", \"acrisy\", \"actional\", \"acudir\", \"adaptabilitas\", \"addled\", \"adeptly\", \"adighe\", \"adjuster\", \"admission-centered\", \"adormecido\", \"adularias\", \"advantageous\", \"advisories\", \"aerified\", \"aethusa\", \"affectedly\", \"affirmer\", \"affrontato\", \"afreizen\", \"aftercareer\", \"agarrar-se\", \"aggiornare\", \"aggressive-looking\", \"aglutinarse\", \"agrarian-focused\", \"agronomic\", \"ai-dedicated\", \"air-floated\", \"airtightly\", \"akhmatova\", \"alaminos\", \"album\", \"alcohol-regulated\", \"aleknight\", \"algemeen\", \"align\", \"alkaline-forming\", \"all-ordering\", \"allegretto\", \"alleviators\", \"allopathy\", \"almacén\", \"alphabetize\", \"alternatively\", \"always\", \"amarrarse\", \"ambassadors\", \"ambrosin\", \"america-centric\", \"amigablemente\", \"ammorbidire\", \"amorphus\", \"amphithecia\", \"amusement-driven\", \"anagrammatically\", \"analyze\", \"ancestress\", \"androcentricity\", \"anetholes\", \"angina\", \"angor\", \"anilidic\", \"anisodactyla\", \"annebbiare\", \"annuleren\", \"anormal\", \"anstecken\", \"antefurcae\", \"anthramine\", \"anti-celtic\", \"anti-hero\", \"anti-papal\", \"anti-vedic\", \"anticlassicalist\", \"antifeudalization\", \"antimony\", \"antiproductively\", \"antisymmetric\", \"anunciado\", \"apaciblemente\", \"apellous\", \"api-oriented\", \"apod\", \"aposiopestic\", \"apparitions\", \"appetency\", \"appliqueing\", \"appressed\", \"approving-looking\", \"aprosopous\", \"aquavit\", \"arbela-gaugamela\", \"archaicly\", \"architecture-sensitive\", \"ardu\", \"argonautic\", \"aristocratic\", \"armisticio\", \"around-the-clock\", \"arremangar\", \"arrogamment\", \"arsle\", \"articulator\", \"artophagous\", \"ascenso\", \"asfissiante\", \"asian-oriented\", \"aspatial\", \"asramas\", \"assenting\", \"assiduity\", \"assodato\", \"assurdo\", \"astringently\", \"at-ease-seeming\", \"aterrissar\", \"atlanticist\", \"atp-requiring\", \"attachments\", \"attento\", \"attraccare\", \"atwitch\", \"audio-visually\", \"aufgehoben\", \"aufteilen\", \"aumentar\", \"auseinandergebracht\", \"ausilio\", \"aussetzung\", \"autarch\", \"authorship\", \"autocue\", \"automation-ready\", \"autoput\", \"auxograph\", \"avengefully\", \"aviogetto\", \"avversare\", \"awhet\", \"azar\", \"babbling\", \"backbeats\", \"backstairs\", \"badgered\", \"bagnio\", \"baksheesh\", \"balkanization\", \"ballet-uninterested\", \"banalizarse\", \"bangall\", \"banxring\", \"barbiturate\", \"barling\", \"barricade\", \"baseballer\", \"basketlike\", \"bathroom\", \"baulk\", \"beadle\", \"beaters-up\", \"becloaks\", \"bedivere\", \"beer-aware\", \"befeuern\", \"beginn\", \"behavior\", \"beitreiben\", \"beldames\", \"bell-bottomed\", \"below-the-knee\", \"benci\", \"benevolently\", \"benzoxyacetic\", \"bercampur\", \"bergs\", \"berkonsultasi\", \"berpura-pura\", \"berufsleben\", \"beseitigen\", \"bespy\", \"bestselling\", \"better-known\", \"bewearies\", \"bhagavad-gita\", \"bibliographers\", \"bidens\", \"bigger\", \"bilineal\", \"bindles\", \"biologically\", \"bipinnaria\", \"biscuit\", \"bitingly\", \"black-red\", \"blanched\", \"blazy\", \"bletilla\", \"block-structured\", \"bloodthirstiness\", \"blue-collar\", \"blunt-nosed\", \"boatman\", \"body-building\", \"bolanger\", \"bombesins\", \"bonesteel\", \"bookish\", \"bootleg\", \"boriosamente\", \"boswall\", \"bottom-up\", \"bournemouth\", \"boxful\", \"braconid\", \"brainstem\", \"brand-endorsed\", \"brasilein\", \"brazilian\", \"breath\", \"brevemente\", \"bridport\", \"bringdown\", \"broad-nosed\", \"brokenly\", \"broommaking\", \"bruised\", \"bsrfs\", \"bucure\", \"bugaboo\", \"bull\", \"bummack\", \"burdens\", \"burnfire\", \"bushiness\", \"buster\", \"buyer-dominated\", \"byways\", \"cacciatore\", \"cadmus\", \"cajolery\", \"calculability\", \"caligation\", \"calmadamente\", \"calyces\", \"camleted\", \"can-lining\", \"candidate-oriented\", \"canniness\", \"canulating\", \"capital\", \"caprichosamente\", \"car-promoting\", \"carbon-absorbing\", \"cardielcosis\", \"careless-seeming\", \"carlotta\", \"carpere\", \"carsickness\", \"case-dependent\", \"cassiopean\", \"casus\", \"catch-cord\", \"catheterization\", \"caudalward\", \"cauzione\", \"cebalrai\", \"celebro\", \"celtic-style\", \"center-based\", \"centrocampista\", \"cerebellar\", \"certainties\", \"ceterach\", \"chairman\", \"chameleon\", \"changeup\", \"charabancer\", \"charity-oriented\", \"chasmy\", \"cheap-looking\", \"cheery\", \"chemocatalytic\", \"chest\", \"chick-pea\", \"childhood-related\", \"chinchier\", \"chistosamente\", \"chockfull\", \"choledography\", \"chorale\", \"christliness\", \"chronologization\", \"chunky\", \"cicadas\", \"cincinnus\", \"circiter\", \"circumlocution\", \"cisternal\", \"city-life-oriented\", \"claes\", \"clapperboard\", \"classically\", \"clay-bound\", \"clearville\", \"cli-centric\", \"climate-unfriendly\", \"clivia\", \"close-tempered\", \"cloud-friendly\", \"clumsy-legged\", \"co-operate\", \"coal-based\", \"coarse-haired\", \"coca-cola\", \"coco\", \"coel-\", \"coffer-work\", \"coherentemente\", \"cojones\", \"colibert\", \"collectively-created\", \"colluding\", \"color-restricted\", \"columbian\", \"comburent\", \"comicotragic\", \"commentating\", \"commisurato\", \"communalizer\", \"commute-unfriendly\", \"company-provided\", \"compelir\", \"competidores\", \"completamento\", \"complimentarsi\", \"compounded\", \"comprizable\", \"computer-inspired\", \"concedes\", \"concertion\", \"conclusively\", \"concursus\", \"condizionamento\", \"confectionery\", \"confident-looking\", \"conflicted\", \"confrontare\", \"congestion-increasing\", \"conidiophorous\", \"connection-building\", \"consanguineous\", \"consentito\", \"considero\", \"consonant\", \"constitutionally\", \"consults\", \"containerization\", \"contendiente\", \"context-dependent\", \"contorniate\", \"contrahacer\", \"contribuer\", \"controverso\", \"conventional-sounding\", \"conveyancing\", \"cooking\", \"copepodous\", \"coprisoner\", \"coranto\", \"cormophyte\", \"coronavirus-era\", \"correctability\", \"corroboration\", \"corsica\", \"cosmetician\", \"coster\", \"cottony\", \"counter-hegemonic\", \"counterhaft\", \"countfish\", \"courtcraft\", \"covid-clear\", \"coy\", \"craftiness\", \"crapulency\", \"creancer\", \"credible-seeming\", \"creo\", \"cribbage\", \"crisp-smelling\", \"croat\", \"crore\", \"cross-post\", \"crotalidae\", \"crudely\", \"crusts\", \"cryptolith\", \"cubes\", \"cuisine\", \"culturally-influenced\", \"cunning-looking\", \"curdling\", \"curstfully\", \"custard\", \"cut-price\", \"cyatheaceae\", \"cyclophorus\", \"cyprian\", \"czech\", \"daftberry\", \"dally\", \"dana\", \"dannye\", \"dark-spawned\", \"data-averse\", \"data-proficient\", \"datenhaltung\", \"dawks\", \"dazurechnen\", \"de-islamize\", \"deadness\", \"deaths\", \"debind\", \"debt-shrinking\", \"decapsidation\", \"decentered\", \"decision-aiding\", \"declining-appearing\", \"decompression-related\", \"decoupled\", \"dedizieren\", \"deerhound\", \"defectus\", \"deficiency\", \"deflagrating\", \"defrauding\", \"degradation-related\", \"deindex\", \"delay-inducing\", \"deliberating\", \"deliquesce\", \"deluso\", \"demenza\", \"demobilise\", \"demonstratedly\", \"denarcotization\", \"denominate\", \"dentro\", \"departure-focused\", \"depicted\", \"deports\", \"deprezzarsi\", \"deregulating\", \"derramar-se\", \"desacuerdo\", \"desamparada\", \"desatinar\", \"descent-based\", \"descontinuarse\", \"desecratingly\", \"desenfreno\", \"desesperadamente\", \"deshonesto\", \"designing\", \"desistencia\", \"desmenuzar\", \"desonra\", \"desperezarse\", \"despreocupadamente\", \"desterilized\", \"desunir-se\", \"detainable\", \"determinatamente\", \"detractive\", \"devaluasi\", \"deviants\", \"devoted\", \"dfa\", \"diagonalmente\", \"diandria\", \"dibber\", \"dickenses\", \"dido\", \"difensivo\", \"diffidenza\", \"digital-nomad-unfriendly\", \"dihamburkan\", \"dilapidated-looking\", \"dilupakan\", \"diminuirsi\", \"dinikahkan\", \"dipercepat\", \"diproduksi\", \"director\", \"dirupato\", \"disallineamento\", \"disattend\", \"discharged\", \"disconformidad\", \"discourtesy\", \"discuter\", \"disengagement-focused\", \"disgracement\", \"dishouse\", \"disintegrate\", \"dislodged\", \"disonorarsi\", \"dispensabilidad\", \"disponing\", \"disqualifications\", \"dissecato\", \"dissipated-looking\", \"distance-empowering\", \"distinctness\", \"distribuido\", \"disunion\", \"divagate\", \"divertirse\", \"divorce\", \"dna-contaminated\", \"docilidad\", \"dodgeful\", \"dogtrot\", \"domain\", \"dominating\", \"donor-supported\", \"dorinda\", \"dotard\", \"double-positive\", \"dove-gray\", \"downpouring\", \"doziness\", \"dramatiser\", \"dreamlikeness\", \"drijven\", \"drome\", \"droyl\", \"dryer-dried\", \"dubs\", \"duivels\", \"dumpster\", \"duplicate\", \"durchschleusen\", \"dutchwoman\", \"dynamic-looking\", \"déjeuners\", \"earnestness\", \"earthy-scented\", \"eastwardly\", \"eccedente\", \"eclampsia\", \"ecophobe\", \"edenville\", \"educable\", \"efeito\", \"efficiency-decreasing\", \"eficacia\", \"egregiously\", \"eighthly\", \"eingetragen\", \"einsickern\", \"ejemplificar\", \"elastic-looking\", \"electricidad\", \"electronically-activated\", \"elemol\", \"eliminativism\", \"elohistic\", \"emailing\", \"embarrasses\", \"emborracharse\", \"emeership\", \"emittieren\", \"empathie\", \"employee-assisted\", \"employment-limiting\", \"emulsification\", \"encantado\", \"encheat\", \"encouragements\", \"endecott\", \"endorsements\", \"energiatye\", \"enfasten\", \"engaging\", \"english-derived\", \"enhancers\", \"enlivens\", \"enraged\", \"ensile\", \"entermete\", \"entgegnung\", \"entmenschlicht\", \"entregar\", \"entstammen\", \"envelhecer\", \"envoltorio\", \"epibranchial\", \"epileptic\", \"epitaphize\", \"equalize\", \"equiparare\", \"eragrostis\", \"ergebung\", \"erlangung\", \"erosion-prevented\", \"error-introducing\", \"erweiterung\", \"escalante\", \"escoar\", \"esfarelar-se\", \"esoterik\", \"espionage\", \"essencia\", \"estasi\", \"estimular-se\", \"estrictez\", \"eteocretan\", \"ethnocentrist\", \"eucephalous\", \"euphoric\", \"eurythmics\", \"evangelism\", \"eventual\", \"evildoers\", \"exacerbable\", \"examining-looking\", \"exceptionally\", \"exclaim\", \"excursionists\", \"exemplifying\", \"exhibitionary\", \"existir\", \"exordial\", \"expectorant\", \"experimentalism\", \"expiatorio\", \"explore\", \"expressed\", \"exsistere\", \"externally-caused\", \"extra-chocolate\", \"extraordinary-themed\", \"extrospective\", \"eyelessness\", \"fabulate\", \"facsimilist\", \"fade-resistant\", \"faintheart\", \"fakt\", \"false-fingered\", \"familist\", \"fannullone\", \"farblos\", \"farriery\", \"fast-footed\", \"fat-sourced\", \"fattibile\", \"favores\", \"feather-footed\", \"federally-funded\", \"feh\", \"fellowless\", \"fenced\", \"fernaceous\", \"fertility-wise\", \"feststellung\", \"fiaccare\", \"fickle\", \"fieldwork\", \"fijamente\", \"film-specific\", \"finance-based\", \"fineza\", \"finstre\", \"fireworker\", \"fisgonear\", \"fits\", \"fixing-related\", \"flakes\", \"flaring\", \"flatterer\", \"fleam\", \"flexibility\", \"flipper\", \"floodtime\", \"flottant\", \"fluencies\", \"fluoride-added\", \"flyers\", \"fofarraw\", \"folgerichtig\", \"fondersi\", \"footage-scarce\", \"forbearing\", \"forebody\", \"foreknowing\", \"forest-dominated\", \"forgettable-looking\", \"formalizar\", \"formula-based\", \"forthright-looking\", \"forza\", \"foundation-mounted\", \"foveae\", \"fragged\", \"frail-appearing\", \"franked\", \"frazionamento\", \"freedom-oriented\", \"freilich\", \"fresh-cropped\", \"friday\", \"friths\", \"frontal\", \"fructarian\", \"frustrating\", \"fueling\", \"full-fledged\", \"fumishness\", \"funding\", \"furbo\", \"fuse\", \"fuzzily\", \"gadling\", \"galactopoietic\", \"gallingly\", \"gamenesses\", \"ganglioplexus\", \"garden-seated\", \"gas-fired\", \"gastos\", \"gaudily-dressed\", \"gbaris\", \"gedung\", \"geissospermine\", \"gelungen\", \"gender-responsive\", \"generation-induced\", \"genomes\", \"genuine-appearing\", \"geologise\", \"geradeaus\", \"germer\", \"gesellschaftskritisch\", \"get\", \"ghazi\", \"gigabit\", \"gingelly\", \"girt\", \"gladdon\", \"glaubensstark\", \"glib-tongued\", \"globefish\", \"glossing\", \"glycerolize\", \"goalkeeper\", \"goed\", \"goldish\", \"gonochoric\", \"gooseberry\", \"gossypose\", \"government-subsidized\", \"grade\", \"grammar-aware\", \"grandpappy\", \"graphics-intensive\", \"gratificarsi\", \"gravity\", \"greasepaint\", \"green-powered\", \"grey-blue\", \"grimacing\", \"groceries\", \"grouchiness\", \"groveling\", \"grummets\", \"guardado\", \"guesswork\", \"guinea\", \"gunmetal\", \"guttar\", \"gynecological\", \"habilitado\", \"hadal\", \"haha\", \"hairweavers\", \"half-demented\", \"half-witted\", \"halophilic\", \"hamperingly\", \"handel\", \"handwaving\", \"happily\", \"hard-wearing-seeming\", \"hare-like\", \"harmonizing\", \"hartungen\", \"hatefullnesses\", \"having\", \"hcf\", \"headstrong\", \"hearn\", \"heat-permeable\", \"heavy-weave\", \"heeding\", \"heiter\", \"hell-deep\", \"helvellales\", \"hemipteran\", \"hendrickson\", \"heraldry\", \"heredado\", \"hermione\", \"herunterkommen\", \"heterodoxly\", \"heterotransplantation\", \"hiatus\", \"hieroglyphize\", \"high-gravity\", \"high-starch\", \"highway-oriented\", \"hinchar\", \"hintersinnig\", \"hirsutogenic\", \"hitchiti\", \"hochachten\", \"hoke\", \"hollowheartedness\", \"home-office-equipped\", \"homing\", \"homoplasis\", \"honorabilidad\", \"hoopless\", \"hormonally-enhanced\", \"horriblenesses\", \"horticulturally\", \"hot-weather\", \"housecleaning\", \"hr-influenced\", \"hugo\", \"human-written\", \"humidity-measuring\", \"hunger-reducing\", \"huskily\", \"hydragog\", \"hydrogen-added\", \"hydrostatician\", \"hyper\", \"hyperidrosis\", \"hypersensitivity\", \"hypochil\", \"hypopigmentation\", \"hysterectomy\", \"ice-form\", \"iconophile\", \"identically\", \"idiotish\", \"ignitable\", \"ikke-konserverbar\", \"ill-humouredly\", \"illness-focused\", \"ilusionado\", \"imantar\", \"imediato\", \"immedesimarsi\", \"immolator\", \"immunopotentiate\", \"imparare\", \"impedidor\", \"imperforation\", \"impiegabile\", \"implicitly\", \"importuned\", \"imprecision\", \"imprisoned\", \"imprudente\", \"in-dimension\", \"inadempimento\", \"inaptitude\", \"inbrunst\", \"incendiarsi\", \"incipiency\", \"inclusivity-minded\", \"incompatibilities\", \"incongruently\", \"incontrollability\", \"incredibile\", \"incumbent-centric\", \"indecomposable\", \"independensi\", \"indicado\", \"indignamente\", \"indispensability\", \"individuality-promoting\", \"indoor-only\", \"industrial-influenced\", \"ineffaceability\", \"inequality-supporting\", \"inexato\", \"infame\", \"inferior-appearing\", \"infinite\", \"inflectable\", \"informalizing\", \"infracts\", \"infusorian\", \"ingot\", \"inhere\", \"iniquity\", \"injustices\", \"inmiscuirse\", \"innocents\", \"inoculativity\", \"inquietamente\", \"inscrutability\", \"insentient\", \"insinuating\", \"insourced\", \"instance-independent\", \"institutionally\", \"insubordinarse\", \"insurgents\", \"integrationist\", \"intelligible\", \"intenzionale\", \"interception\", \"interesado\", \"interglandular\", \"intermatted\", \"internals\", \"interpersonally\", \"interrogation\", \"intertouch\", \"intimados\", \"intra-agency\", \"intransigir\", \"intrincaciones\", \"intrust\", \"invalidierung\", \"invertebrateness\", \"investors\", \"involuir\", \"ionicity\", \"iridal\", \"ironlike\", \"irreflexivamente\", \"irreproducible\", \"irriguousness\", \"ischiadicus\", \"isodactylism\", \"isoprenylated\", \"istoke\", \"iubere\", \"jacketless\", \"jahdai\", \"janiuszck\", \"jaundiced\", \"jehial\", \"jerrycan\", \"jibe\", \"joacimah\", \"johannisberger\", \"jostlement\", \"juana\", \"juggling\", \"juniority\", \"justificatorily\", \"kafre\", \"kamalian\", \"karakter\", \"kastner\", \"keahlian\", \"kecekan\", \"kefanaan\", \"keithville\", \"kelembapan\", \"kemujuran\", \"kepenuhan\", \"kernelling\", \"kesusahan\", \"ketidaklengkapan\", \"keyboard-controlled\", \"khusus\", \"kilodyne\", \"king-maker\", \"kismet\", \"klauen\", \"knebelite\", \"knocking-shop\", \"kohistan\", \"kompliziertheit\", \"konservierbar\", \"konvertieren\", \"kos\", \"kremlin\", \"kulant\", \"kvass\", \"labiopalatalize\", \"labridae\", \"lacquey\", \"lael\", \"lakatoi\", \"lamentevole\", \"lancet\", \"landsthing\", \"lanner\", \"larderer\", \"laryngologist\", \"late-year\", \"latter\", \"laurel-locked\", \"lawbreaker\", \"laymanlike\", \"leader\", \"leafiness\", \"leasers\", \"lecker\", \"left-wingers\", \"leggy\", \"leistungsorientiert\", \"lenhard\", \"leporine\", \"lesson-oriented\", \"leucorrheal\", \"levitation\", \"liability-matching\", \"libertas\", \"lichenification\", \"life-changing\", \"ligature\", \"light-transmitting\", \"likeminded\", \"limitando\", \"limpidamente\", \"linewalker\", \"lionesque\", \"lipothymy\", \"lisp\", \"literatist\", \"littler\", \"llamada\", \"loathsomely\", \"locally-organized\", \"locum\", \"logique\", \"london-esque\", \"longee\", \"loose-hung\", \"lorgnette\", \"loudness-decreasing\", \"low-angled\", \"low-paneled\", \"lower-class\", \"lua\", \"lucy\", \"lumbering\", \"lunate\", \"lushly\", \"luxury-oriented\", \"lyrebird\", \"macedonians\", \"machtlos\", \"macularse\", \"maestros\", \"magneticalness\", \"mahesh\", \"maintain\", \"makmur\", \"malayo-polynesian\", \"malevolencia\", \"malinterpretar\", \"malt-supplemented\", \"mammography\", \"managemental\", \"mandriarch\", \"manichord\", \"mann\", \"mantenimiento\", \"many-coloured\", \"marbling\", \"marginella\", \"marker\", \"marketing-proficient\", \"marseilles\", \"masacrar\", \"mass-independent\", \"mastice\", \"materialistically\", \"mattaro\", \"mavericks\", \"mazdur\", \"mean-looking\", \"mechanicalist\", \"media-poor\", \"medievals\", \"mega\", \"meinung\", \"melasma\", \"melitaemia\", \"meluluskan\", \"membebankan\", \"membrane-dependent\", \"memikirkan\", \"memory-eroding\", \"memperlancar\", \"men-operated\", \"mencelah\", \"mendiant\", \"mengacakkan\", \"mengawal\", \"menggaris\", \"menghibahkan\", \"mengkompensasi\", \"mengutarakan\", \"mennonite\", \"menthol-infused\", \"menyebabkan\", \"menzione\", \"merchantman\", \"merger\", \"merry-hearted\", \"mesocephalism\", \"messy-seeming\", \"metal-forged\", \"metaphyseal\", \"method-oriented\", \"metronome\", \"miami\", \"microcomputer\", \"microphagous\", \"mid-totality\", \"miffed\", \"milford\", \"millenniarism\", \"mimeograph\", \"mindsets\", \"minimally\", \"minter\", \"miry\", \"misborn\", \"misdemeanors\", \"mishagen\", \"misnumber\", \"missbilligenswert\", \"mistakes\", \"mitendente\", \"mixed-heritage\", \"mobilitare\", \"moderadamente\", \"modestly-dressed\", \"moireing\", \"molecule-based\", \"molybdosis\", \"money-grubber\", \"mono-iodohydrin\", \"monogamously\", \"monopolar\", \"monounsaturated\", \"mood-oriented\", \"moosup\", \"more\", \"morphoplasmic\", \"mosquito\", \"motivate\", \"mound\", \"movedizo\", \"much-advertised\", \"muerte\", \"mullahs\", \"multi-pronged\", \"multidisciplinare\", \"multiple-barreled\", \"multitudinal\", \"munificent\", \"muscadet\", \"musicophobia\", \"mutability\", \"mutualism\", \"myogenic\", \"mystique\", \"nachgiebig\", \"naif\", \"nanny\", \"narcotic-based\", \"narrowness\", \"nationality-themed\", \"naturally-sourced\", \"navigated\", \"neatnik\", \"necrobiotic\", \"nefarious\", \"negotiation\", \"neo-pagan\", \"nephropathy\", \"nesogaea\", \"neuauflage\", \"neuronal\", \"neuwertig\", \"newsflashes\", \"nicht-erwerbswirtschaftlich\", \"nidorf\", \"night-colored\", \"nile\", \"nisten\", \"nitros\", \"nobreza\", \"noisier\", \"non-addicted\", \"non-art\", \"non-branded\", \"non-clinical\", \"non-congenital\", \"non-customer-centric\", \"non-discountable\", \"non-english-speaker\", \"non-fatty\", \"non-gang-related\", \"non-homeric\", \"non-integrated\", \"non-lawmaking\", \"non-masonic\", \"non-mutated\", \"non-opioid-based\", \"non-petroliferous\", \"non-proficiency-based\", \"non-recursive\", \"non-resource-related\", \"non-selective\", \"non-specialization\", \"non-succulent\", \"non-tradable\", \"non-verbal\", \"nonabsentation\", \"nonarbitrable\", \"noncharacteristic\", \"nonconformally\", \"noncuspidate\", \"nondilatable\", \"nonequably\", \"nonfictive\", \"nonhumorousness\", \"nonirrigated\", \"nonmilitary\", \"nonparasitical\", \"nonpreferential\", \"nonrecoil\", \"nonsatiric\", \"nonstainer\", \"nontitularly\", \"nonviscid\", \"normality\", \"northlander\", \"notarially\", \"notoriedade\", \"novicehood\", \"nuclear-fission-created\", \"number\", \"nursling\", \"nutty\", \"oat\", \"obfuscatingly\", \"obliarsi\", \"obrigar-se\", \"obsessive\", \"obtrudes\", \"occipitoiliac\", \"ocelot\", \"ocultismo\", \"odor-blocking\", \"off-colour\", \"offeror\", \"oficializar\", \"oil-fry\", \"okkult\", \"oliare\", \"olympic\", \"omo-hyoid\", \"oncogene\", \"one-nighter\", \"onintelligent\", \"ontological\", \"opacizzare\", \"openhearted\", \"ophiologic\", \"opioid-specific\", \"opposition-backed\", \"optimist\", \"oracles\", \"orchestrer\", \"ordino\", \"organization-certified\", \"orian\", \"originally-begun\", \"ornithobiography\", \"orthographic\", \"oser\", \"osteal\", \"ostracizing\", \"otoritas\", \"out-of-the-box\", \"outcurve\", \"outfox\", \"outmeasured\", \"outrightly\", \"outstridden\", \"ovariectomy\", \"over-read\", \"overattended\", \"overcloud\", \"overdevotion\", \"overeye\", \"overhire\", \"overlier\", \"overpass\", \"overrated\", \"overselling\", \"overstoring\", \"overtrekken\", \"oviedo\", \"oxhide\", \"oxyhalide\", \"pachycarpous\", \"paczka\", \"pagine\", \"paintless\", \"palatalize\", \"palingenesia\", \"palpitar\", \"panary\", \"panhellenic\", \"pantheon\", \"papillose\", \"paradigm-neutral\", \"paralog\", \"parapodium\", \"parchemin\", \"parepididymis\", \"parliamentarily\", \"parrots\", \"participable\", \"partisan\", \"pasay\", \"passion-guided\", \"pastorally\", \"pathogenicity\", \"patriotical\", \"pauperitic\", \"payment-integrated\", \"peakishness\", \"pecks\", \"pedestrian-accessible\", \"peeping\", \"pelan\", \"pelvigraphy\", \"pemurah\", \"pending\", \"pengembangan\", \"penitentially\", \"penstemon\", \"penyamarataan\", \"peptidase\", \"perceivingness\", \"perdo\", \"perfetto\", \"perfundere\", \"perigenital\", \"periploca\", \"perlahan\", \"permutabilidade\", \"perplimere\", \"person-directed\", \"personnelled\", \"pertigaan\", \"pervicaciousness\", \"pestis\", \"petrology\", \"phaenanthery\", \"pharmacopsychosis\", \"philamot\", \"philosophically\", \"phonic\", \"photo-laden\", \"photoinduced\", \"phototopographical\", \"phyllophagan\", \"phytoestrogen\", \"picchiare\", \"picuda\", \"pig\", \"pilau\", \"pimping\", \"pink-flowered\", \"pipal\", \"piss\", \"piupiu\", \"plagado\", \"plaits\", \"planosols\", \"plastrons\", \"platystencephaly\", \"pleaseman\", \"pleonastically\", \"plooibaar\", \"plumbing\", \"plutocracy\", \"pocketbook\", \"poets\", \"pokelogan\", \"policy-sensitive\", \"pollutants\", \"polychromasia\", \"polymerized\", \"polyspondylous\", \"ponderare\", \"poor-yielding\", \"poppadum\", \"pornographomania\", \"portioned\", \"positiv\", \"post-dawn\", \"postdawn\", \"postparietal\", \"potamologist\", \"potsie\", \"poverty-stricken\", \"pr-oriented\", \"praisableness\", \"prayerwise\", \"pre-funded\", \"preadjust\", \"precari\", \"precipitosamente\", \"preconquestal\", \"predestinedly\", \"preeditorially\", \"preferenza\", \"prehuman\", \"prelibato\", \"premodern\", \"preoverthrowing\", \"preprocessing\", \"prescinding\", \"preservation\", \"pressure-influenced\", \"presupporre\", \"pretty-legged\", \"previsto\", \"pridy\", \"primsie\", \"priorities\", \"privately-insured\", \"pro-capitalism\", \"pro-man\", \"pro-westernism\", \"problemas\", \"procession\", \"procura\", \"production-heavy\", \"profess\", \"proficiently\", \"profuse-haired\", \"progress-wise\", \"prolactin\", \"promenadeable\", \"promptbook\", \"propagare\", \"propitiously\", \"propylene\", \"prospection\", \"protecteur\", \"proteroglyphous\", \"protocoleoptera\", \"protruder\", \"provider\", \"prowest\", \"prytanis\", \"pseudocartilaginous\", \"pseudotubercular\", \"psychopathic\", \"pubblicare\", \"publicly-organized\", \"pug-nosed\", \"pulp-based\", \"puncher\", \"puntare\", \"purging\", \"purslanes\", \"putrefarsi\", \"pylorus\", \"pyrotheology\", \"quadrilatero\", \"qualifiedness\", \"quarrelsome\", \"quasi-defiantly\", \"quasi-private\", \"queer-affirming\", \"questions\", \"quietism\", \"quintile\", \"quoth\", \"racemizing\", \"radiate-veined\", \"radioativo\", \"raffinamento\", \"raided\", \"rakes\", \"ramose\", \"rangoon\", \"rapine\", \"rasgos\", \"ratheripe\", \"rattlepod\", \"rawbone\", \"re-association\", \"re-engage\", \"re-investigate\", \"re-ship\", \"reacquisition\", \"readjuster\", \"realistisch\", \"reappear\", \"reassembly\", \"rebelled\", \"recado\", \"receivable\", \"rechazar\", \"reckless-appearing\", \"recolectar\", \"reconciliador\", \"reconstruirse\", \"recreationally\", \"recuperation-related\", \"red-wat\", \"redemolish\", \"redman\", \"reduction-minded\", \"reelection\", \"refectorian\", \"reflecterend\", \"reformulation\", \"refundable\", \"regenerators\", \"registration-related\", \"regu\", \"reharvesting\", \"reimpact\", \"reinstate\", \"rejectingly\", \"relatedly\", \"releases\", \"relighting\", \"remains\", \"remettre\", \"remote-discouraging\", \"remverse\", \"rennin\", \"reoccupy\", \"repasser\", \"repetition-increasing\", \"replicatory\", \"repremised\", \"reprobatory\", \"repuesto\", \"requirements\", \"reseal\", \"resgatar\", \"resinated\", \"resolver\", \"respectably\", \"respondentia\", \"restaurant\", \"restraint\", \"resultar\", \"retardar\", \"retire\", \"retrial\", \"rettbar\", \"revealing\", \"reverse-charge\", \"revitalizar\", \"revulsionary\", \"rheic\", \"rhombus-patterned\", \"riassumere\", \"ricetta\", \"riconciliazione\", \"ridiculing-looking\", \"rifornirsi\", \"rights-insensitive\", \"rimarcato\", \"ring-ridden\", \"riparian-adapted\", \"risanarsi\", \"risk-oblivious\", \"ritchey\", \"rivelato\", \"rna-interacting\", \"robbers\", \"rock-related\", \"roentgenography\", \"romanhood\", \"rood\", \"roris\", \"rosy-tipped\", \"rouches\", \"rounded-jaw\", \"rowlesburg\", \"rubeola\", \"rudra\", \"rule\", \"rumus\", \"ruralizing\", \"rusty\", \"sabellianism\", \"saciablemente\", \"saddle-galled\", \"sages\", \"salaam\", \"salicines\", \"salt-and-pepper\", \"salvajismo\", \"san\", \"sandhill\", \"sanitizer\", \"saprophagous\", \"saronville\", \"satisfatoriamente\", \"sauroid\", \"sawtooth\", \"sbuffare\", \"scalt\", \"scapula\", \"scathingly\", \"scent-tolerant\", \"schema-independent\", \"schistoscope\", \"schmaltzier\", \"schoolchildren\", \"schweinerei\", \"sciocco\", \"scolder\", \"scoopful\", \"scostamento\", \"scrap-book\", \"screw-type\", \"scrubby\", \"scummy\", \"sea-calf\", \"seamlessness\", \"sebaliknya\", \"secondment\", \"secundiparity\", \"sediment-dwelling\", \"seenaknya\", \"seguidores\", \"sekali-sekala\", \"selenodont\", \"self-assuredly\", \"self-consuming\", \"self-discrepantly\", \"self-focused\", \"self-instructor\", \"self-perceptive\", \"self-replication\", \"self-titled\", \"semantically-driven\", \"semiacquaintance\", \"semifictionally\", \"semiotics\", \"semitropical\", \"seniors\", \"sensitometer\", \"sentry-fashion\", \"septemfoliate\", \"serac\", \"sericated\", \"serpihan\", \"servis\", \"settimo\", \"severidad\", \"sexualisation\", \"sfrontato\", \"shade-dependent\", \"shakiness\", \"shannah\", \"sharp-freezer\", \"sheathing\", \"shellman\", \"shiftiest\", \"shipper\", \"shoebird\", \"short-footed\", \"shotproof\", \"shrewdom\", \"shunt\", \"sicherstellen\", \"sideburn\", \"sifakas\", \"signaturist\", \"silentiary\", \"silsilah\", \"similor\", \"simposio\", \"sinfulness\", \"single-location\", \"single-winged\", \"sinologist\", \"sissies\", \"situation-focused\", \"size-unrestricted\", \"skew-commutativity\", \"skillfully-presented\", \"sklavigi\", \"slag\", \"slav\", \"sleigher\", \"slimming\", \"slops\", \"slubber\", \"small-diameter\", \"smattering\", \"smittleish\", \"smooth-talking\", \"snack-deficient\", \"snap-happy\", \"sniffle\", \"snow-free\", \"so-so\", \"sobrevalorado\", \"sociodramatic\", \"sofocado\", \"softy\", \"solar-derived\", \"solennemente\", \"solitariness\", \"solvently\", \"somnolence\", \"soochongs\", \"sopportarsi\", \"sorrow-furrowed\", \"sothena\", \"sound-dampening\", \"sourpussed\", \"sovrapporsi\", \"spaetzle\", \"sparker\", \"spavaldo\", \"species-depleted\", \"spectroscopic\", \"speir\", \"spermatocystitis\", \"spherical-headed\", \"spielraum\", \"spinningly\", \"spiritually-led\", \"splendors\", \"sponge-leaved\", \"spore\", \"spotsmen\", \"sprightly\", \"spryness\", \"squalor\", \"squeaky-clean\", \"sregolarsi\", \"stacked\", \"stagista\", \"stalkless\", \"standardisasi\", \"staphyloplasty\", \"start-stop\", \"statehouse\", \"status-degrading\", \"steamerful\", \"stegocephalia\", \"step-on\", \"sterilizability\", \"stick-at-nothing\", \"stillborn\", \"stinging\", \"stochasticization\", \"stomachache\", \"stop-start\", \"story-dependent\", \"strahlen\", \"stranded\", \"stratification\", \"street-sprinkling\", \"stressfulness\", \"string-puller\", \"strong-eyed-looking\", \"structurer\", \"student-motivated\", \"stunning\", \"style-specific\", \"subalkaline\", \"subcontractor-related\", \"subfigures\", \"subjoin\", \"submission-inducing\", \"subpopulation\", \"subsidize\", \"substitutes\", \"subtribal\", \"success-related\", \"suction\", \"suficientes\", \"sujeito\", \"sulphichthyolate\", \"summer-blooming\", \"sun-induced\", \"sunlight-influenced\", \"superare\", \"supererogatorily\", \"superincumbent\", \"superposition\", \"superuniversally\", \"supplied\", \"suppressants\", \"surefire\", \"surpassed\", \"survived\", \"sustainable-energy-driven\", \"svegliarsi\", \"swampiness\", \"sweated\", \"swervers\", \"switchblade\", \"syllabification\", \"symphonizing\", \"synecdochic\", \"synthetic-flavored\", \"systematics\", \"tabletted\", \"tactfully\", \"tail-ender\", \"talaemenes\", \"tallowweed\", \"tamperer\", \"tannin\", \"tappertitian\", \"tarnation\", \"tasm\", \"tauen\", \"taxierung\", \"teakettle\", \"tech-based\", \"techno-skeptic\", \"tectiform\", \"tegument\", \"telegonic\", \"televisor\", \"temperate\", \"tempting-looking\", \"tenderloin\", \"tensione\", \"teraih\", \"terhalang\", \"terminazione\", \"terrestrial-dependent\", \"tersesat\", \"testacea\", \"tetractinelline\", \"teutonic\", \"thamora\", \"theirs\", \"theoriebildung\", \"thermel\", \"thessalonica\", \"thimbleberry\", \"thiourethan\", \"thoriate\", \"thraw\", \"three-tiered\", \"thromboprophylaxis\", \"thunderously\", \"tibia\", \"tienda\", \"tilewright\", \"time-sensitive\", \"tin-bound\", \"tinniest\", \"tipsy\", \"tithe\", \"toadfish\", \"toey\", \"tolerating\", \"tomtit\", \"tool-agnostic\", \"tophaceous\", \"torchy\", \"torsione\", \"totalitas\", \"toughened\", \"towing\", \"tpi\", \"traction\", \"traditionalist\", \"tragacanthin\", \"traits\", \"tranquillizzarsi\", \"transferable\", \"transhipping\", \"transmissible\", \"transportable\", \"trascender\", \"trauma-induced\", \"treachery\", \"trefler\", \"trennung\", \"tribalism\", \"tricklier\", \"trilateral\", \"triopidae\", \"trist\", \"trivializado\", \"tropaeolaceae\", \"trouserless\", \"trullization\", \"truth-finder\", \"tubercular\", \"tuliac\", \"tuned\", \"turboprops\", \"turnkey\", \"tutoyed\", \"twelvehyndeman\", \"twice-subjected\", \"two-centered\", \"twofer\", \"typhaceous\", \"u-shaped\", \"uh-uh\", \"ulnar\", \"ultraroyalism\", \"umfassend\", \"un-culturable\", \"unacclimate\", \"unadvised\", \"unanalogized\", \"unapproachable-appearing\", \"unassuming-eyed\", \"unavoidability\", \"unbefestigt\", \"unbestowed\", \"unbolt\", \"unburdened\", \"uncelebrated\", \"unci\", \"uncloven\", \"uncompendious\", \"unconformism\", \"uncontroversial-looking\", \"uncovering\", \"undamageable\", \"undeludable\", \"under-regulated\", \"undercolor\", \"underfreight\", \"undermineralized\", \"underregulate\", \"understem\", \"underwork\", \"undipped\", \"undocumented\", \"uneatable\", \"unemployment-triggered\", \"unequally\", \"unexaggerative\", \"unfabulous\", \"unfehlbarkeit\", \"unflinching-gazed\", \"unfortify\", \"ungamified\", \"ungird\", \"ungroundedness\", \"unhatted\", \"unhostileness\", \"unidentifiedly\", \"unikal\", \"unincubated\", \"uninsured\", \"union-endorsed\", \"unisonous\", \"unjoinable\", \"unlaid\", \"unlionized\", \"unmanageable-haired\", \"unmercenarily\", \"unmodestly\", \"unname\", \"unobstructed\", \"unorthographically\", \"unpatristic\", \"unpigmented\", \"unpopulousness\", \"unpreventability\", \"unprosperous\", \"unquestioningly\", \"unrecitable\", \"unregretted\", \"unrepealably\", \"unrestrainable\", \"unrivaledness\", \"unsandaled\", \"unscrew\", \"unsentimentalised\", \"unshodly\", \"unslopped\", \"unspanked\", \"unstanchable\", \"unstrong-looking\", \"unsupportedly\", \"untaggable\", \"unterhaltsam\", \"unthreatened\", \"untrained-performed\", \"untubbed\", \"unvariably\", \"unviable\", \"unweal\", \"unwistfully\", \"up-to-date\", \"upkeepers\", \"upscale\", \"ural\", \"urchiness\", \"urodaeum\", \"useful-looking\", \"usul\", \"utopian\", \"v-girl\", \"vacuously\", \"vaidoso\", \"validation-hindering\", \"value-for-money\", \"vanilla-scented\", \"varcare\", \"varios\", \"vastest\", \"vedro\", \"velarse\", \"vendors\", \"ventet\", \"veraltet\", \"verbomotor\", \"verdun\", \"vergar-se\", \"verification\", \"verletzlichkeit\", \"vermutung\", \"versagt\", \"versi\", \"vertebro-\", \"verveling\", \"verzehrt\", \"vestment\", \"vibraharp\", \"vicinanza\", \"video-rich\", \"vigilar\", \"villiferous\", \"vinta\", \"viral-induced\", \"virulent\", \"visitor-generating\", \"vitare\", \"vividity\", \"vocative\", \"volatilidad\", \"volt-ammeter\", \"volutamente\", \"vorbestraft\", \"vorurteilsvoll\", \"vrijmaken\", \"w-engine\", \"wagen\", \"waited\", \"wallboard\", \"want\", \"warmer\", \"washbrew\", \"watchword\", \"water-stable\", \"watkinsville\", \"waylan\", \"weaned\", \"weatherly\", \"weekday-based\", \"weighs\", \"weise\", \"well-bottomed\", \"well-faced\", \"well-modeled\", \"well-studied\", \"weltoffen\", \"western\", \"wettbewerblich\", \"wheaty\", \"whichways\", \"whirlybird\", \"whitefish\", \"wholesome\", \"wide-headed\", \"wiederaufleben\", \"wildflower\", \"wily-eyed\", \"winden\", \"wineglass\", \"wintersome\", \"wise-looking\", \"within\", \"woe\", \"womanize\", \"woodard\", \"woolen-frocked\", \"work-from-home\", \"workingmen\", \"world-themed\", \"worships\", \"wrapt\", \"writer-centered\", \"wyncote\", \"xerosis\", \"yakfest\", \"yea\", \"yellowstone\", \"ymha\", \"youth-oriented\", \"zahlreiche\", \"zebrula\", \"zergliedern\", \"zigzaguar\", \"zola\", \"zoroastrian\", \"zuordnung\", \"zwacken\"];\n\n\n//# sourceURL=webpack://llexicom/./scripts/table.ts?");

/***/ }),

/***/ "./scripts/word.mustache":
/*!*******************************!*\
  !*** ./scripts/word.mustache ***!
  \*******************************/
/***/ ((module) => {

"use strict";
eval("module.exports = \"<!DOCTYPE html>\\n<div class=\\\"word-container\\\">\\n  <div class=\\\"header-section\\\">\\n    <h1 class=\\\"word-title\\\">{{word}}</h1>\\n  </div>\\n\\n  {{#pronunciation}}\\n  <div class=\\\"pronounce-section\\\">\\n    {{#ipa}}\\n    <div class=\\\"ipa\\\">{{ipa}}</div>\\n    {{/ipa}}\\n\\n    {{#ipa_uk}}\\n    <div class=\\\"ipa\\\">(英){{ipa_uk}}</div>\\n    {{/ipa_uk}}\\n\\n    {{#ipa_us}}\\n    <div class=\\\"ipa\\\">(米){{ipa_us}}</div>\\n    {{/ipa_us}}\\n\\n    {{#syllables}}\\n    <div class=\\\"syllable\\\">\\n      ({{syllables}})\\n    </div>\\n    {{/syllables}}\\n  </div>\\n  {{/pronunciation}}\\n\\n  <div class=\\\"priority-box\\\">\\n    <span class=\\\"priority\\\">{{priority}}</span>\\n  </div>\\n  \\n  {{#meanings}}\\n  <section class=\\\"section\\\">\\n    {{#.}}\\n    <div class=\\\"meaning-card\\\">\\n      <div class=\\\"meaning-title\\\">\\n        <div class=\\\"number\\\">\\n          {{index_plus_1}}.\\n        </div>\\n        <span class=\\\"part-of-speech\\\">\\n          {{part_of_speech_translated}}\\n        </span>\\n        <div class=\\\"definition-box\\\">\\n          <p class=\\\"definition\\\">{{definition}}</p>\\n        </div>\\n        {{#transitivity_translated}}\\n        <span class=\\\"transitivity-badge\\\">\\n          {{transitivity_translated}}\\n        </span>\\n        {{/transitivity_translated}}\\n      </div>\\n      <div class=\\\"meaning-content\\\">\\n\\t<div class=\\\"content\\\">\\n          <p class=\\\"english-definition\\\">{{english_definition}}</p>\\n          {{#examples}}\\n          {{^empty}}\\n          <ul class=\\\"example-list\\\">\\n            {{#.}}\\n            <li class=\\\"example-item\\\">\\n              <p class=\\\"sentence\\\">\\\"{{sentence}}\\\"</p>\\n              <p class=\\\"translation\\\"><em>{{translation}}</em></p>\\n            </li>\\n            {{/.}}\\n          </ul>\\n          {{/empty}}\\n          {{/examples}}\\n\\n          <div class=\\\"related-terms-group\\\">\\n\\t    {{#has_collocations}}\\n            <div class=\\\"related-column\\\">\\n              <h4>コロケーション:</h4>\\n              <ul class=\\\"simple-list\\\">\\n\\t\\t{{#collocations}}\\n\\t\\t{{^empty}}\\n\\t\\t<li>{{.}}</li>\\n\\t\\t{{/empty}}\\n\\t\\t{{/collocations}}\\n              </ul>\\n            </div>\\n\\t    {{/has_collocations}}\\n\\t    \\n\\t    {{#has_synonyms}}\\n            <div class=\\\"related-column\\\">\\n              <h4>類義語:</h4>\\n              <ul class=\\\"simple-list\\\">\\n\\t\\t{{#synonyms}}\\n\\t\\t{{^empty}}\\n\\t\\t<li>{{.}}</li>\\n\\t\\t{{/empty}}\\n\\t\\t{{/synonyms}}\\n              </ul>\\n            </div>\\n\\t    {{/has_synonyms}}\\n\\t    \\n\\t    {{#has_antonyms}}\\n            <div class=\\\"related-column\\\">\\n              <h4>対義語:</h4>\\n              <ul class=\\\"simple-list\\\">\\n\\t\\t{{#antonyms}}\\n\\t\\t{{^empty}}\\n\\t\\t<li>{{.}}</li>\\n\\t\\t{{/empty}}\\n\\t\\t{{/antonyms}}\\n\\t      </ul>\\n            </div>\\n\\t    {{/has_antonyms}}\\n          </div>\\n\\t</div>\\n      </div>\\n    </div>\\n    {{/.}}\\n  </section>\\n  {{/meanings}}\\n\\n  {{#readability_explanation}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">解説</h2>\\n    <div class=\\\"readability-explanation\\\">\\n      <p class=\\\"readability-level\\\"><strong>対象レベル:</strong> {{level}}</p>\\n      <p>{{{readability_explanation.text}}}</p>\\n    </div>\\n  </section>\\n  {{/readability_explanation}}\\n\\n  {{#etymology}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">語源</h2>\\n    <p>{{value}}</p>\\n  </section>\\n  {{/etymology}}\\n\\n  {{#inflection}}\\n  {{#has_inflection_forms}} {{! Helper to check if either noun_forms or verb_forms exists }}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">活用</h2>\\n    {{#noun_forms}}\\n    <h3>名詞の形:</h3>\\n    <dl class=\\\"definition-list\\\">\\n      <dt>単数形</dt>\\n      <dd>{{singular}}</dd>\\n      <dt>複数形</dt>\\n      <dd>{{plural}}</dd>\\n    </dl>\\n    {{/noun_forms}}\\n    {{#verb_forms}}\\n    <h3>動詞の形:</h3>\\n    <dl class=\\\"definition-list\\\">\\n      <dt>現在形</dt>\\n      <dd>{{present_simple_joined}}</dd>\\n      <dt>過去形</dt>\\n      <dd>{{past_simple}}</dd>\\n      <dt>過去分詞</dt>\\n      <dd>{{past_participle}}</dd>\\n      <dt>現在分詞</dt>\\n      <dd>{{present_participle}}</dd>\\n    </dl>\\n    {{/verb_forms}}\\n  </section>\\n  {{/has_inflection_forms}}\\n  {{/inflection}}\\n\\n  {{#usage_notes}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">使用上の注意</h2>\\n    <div class=\\\"note-box\\\">\\n      {{{usage_notes.explanation}}}\\n    </div>\\n  </section>\\n  {{/usage_notes}}\\n\\n  {{#has_common_mistakes}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">よくある間違い</h2>\\n    {{#common_mistakes}}\\n    {{#examples}}\\n    {{^empty}}\\n    {{#.}}\\n    <div class=\\\"mistake-item\\\">\\n      <h4>間違い {{_index_plus_1}}:</h4>\\n      <p><span class=\\\"incorrect-example\\\">{{incorrect}}</span></p>\\n      <p><span class=\\\"correct-example\\\">{{correct}}</span></p>\\n      <p class=\\\"note-text\\\"><strong>補足:</strong> {{note}}</p>\\n    </div>\\n    {{/.}}\\n    {{/empty}}\\n    {{/examples}}\\n    {{/common_mistakes}}\\n  </section>\\n  {{/has_common_mistakes}}\\n\\n  {{#related_words}}\\n  {{#has_related_words}} {{! Helper to check if any of the sub-arrays exist }}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">関連語句 <small class=\\\"sub-title\\\">(Related Words)</small></h2>\\n    <div class=\\\"related-terms-group\\\">\\n      {{#derivatives}}\\n      {{^empty}}\\n      <div class=\\\"related-column\\\">\\n        <h3>派生語:</h3>\\n        <ul class=\\\"simple-list\\\">\\n          {{#.}}\\n          <li>{{.}}</li>\\n          {{/.}}\\n        </ul>\\n      </div>\\n      {{/empty}}\\n      {{/derivatives}}\\n      {{#phrasal_verbs}}\\n      {{^empty}}\\n      <div class=\\\"related-column\\\">\\n        <h3>句動詞:</h3>\\n        <ul class=\\\"simple-list\\\">\\n          {{#.}}\\n          <li>{{.}}</li>\\n          {{/.}}\\n        </ul>\\n      </div>\\n      {{/empty}}\\n      {{/phrasal_verbs}}\\n      {{#idioms_phrases}}\\n      {{^empty}}\\n      <div class=\\\"related-column\\\">\\n        <h3>イディオム・慣用句:</h3>\\n        <ul class=\\\"simple-list\\\">\\n          {{#.}}\\n          <li>{{.}}</li>\\n          {{/.}}\\n        </ul>\\n      </div>\\n      {{/empty}}\\n      {{/idioms_phrases}}\\n    </div>\\n  </section>\\n  {{/has_related_words}}\\n  {{/related_words}}\\n\\n  {{#has_level_frequency}}\\n  {{#level_frequency}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">レベル・頻度</h2>\\n    <dl class=\\\"definition-list\\\">\\n      <dt>CEFR</dt>\\n      <dd>{{CEFR}}</dd>\\n      <dt>Google Ngram 頻度</dt>\\n      <dd>{{frequency_google_ngram}}</dd>\\n    </dl>\\n  </section>\\n  {{/level_frequency}}\\n  {{/has_level_frequency}}\\n\\n  {{#has_example_sentences}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">追加例文</h2>\\n    <ul class=\\\"additional-example-list\\\">\\n      {{#example_sentences}}\\n      {{^empty}}\\n      {{#.}}\\n      <li class=\\\"additional-example-item\\\">\\n        <p class=\\\"sentence\\\">\\\"{{{sentence}}}\\\"</p>\\n        <p class=\\\"translation\\\"><em>{{translation}}</em></p>\\n        <p class=\\\"meta-info\\\">\\n          タイプ: <span class=\\\"badge\\\">{{type_translated}}</span>,\\n          カテゴリ: <span class=\\\"badge\\\">{{meaning_category}}</span>\\n        </p>\\n      </li>\\n      {{/.}}\\n      {{/empty}}\\n      {{/example_sentences}}\\n    </ul>\\n  </section>\\n  {{/has_example_sentences}}\\n</div>\\n\";\n\n//# sourceURL=webpack://llexicom/./scripts/word.mustache?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./scripts/index.ts");
/******/ 	
/******/ })()
;