/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/hogan.js/lib/compiler.js":
/*!***********************************************!*\
  !*** ./node_modules/hogan.js/lib/compiler.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n(function (Hogan) {\n  // Setup regex  assignments\n  // remove whitespace according to Mustache spec\n  var rIsWhitespace = /\\S/,\n      rQuot = /\\\"/g,\n      rNewline =  /\\n/g,\n      rCr = /\\r/g,\n      rSlash = /\\\\/g,\n      rLineSep = /\\u2028/,\n      rParagraphSep = /\\u2029/;\n\n  Hogan.tags = {\n    '#': 1, '^': 2, '<': 3, '$': 4,\n    '/': 5, '!': 6, '>': 7, '=': 8, '_v': 9,\n    '{': 10, '&': 11, '_t': 12\n  };\n\n  Hogan.scan = function scan(text, delimiters) {\n    var len = text.length,\n        IN_TEXT = 0,\n        IN_TAG_TYPE = 1,\n        IN_TAG = 2,\n        state = IN_TEXT,\n        tagType = null,\n        tag = null,\n        buf = '',\n        tokens = [],\n        seenTag = false,\n        i = 0,\n        lineStart = 0,\n        otag = '{{',\n        ctag = '}}';\n\n    function addBuf() {\n      if (buf.length > 0) {\n        tokens.push({tag: '_t', text: new String(buf)});\n        buf = '';\n      }\n    }\n\n    function lineIsWhitespace() {\n      var isAllWhitespace = true;\n      for (var j = lineStart; j < tokens.length; j++) {\n        isAllWhitespace =\n          (Hogan.tags[tokens[j].tag] < Hogan.tags['_v']) ||\n          (tokens[j].tag == '_t' && tokens[j].text.match(rIsWhitespace) === null);\n        if (!isAllWhitespace) {\n          return false;\n        }\n      }\n\n      return isAllWhitespace;\n    }\n\n    function filterLine(haveSeenTag, noNewLine) {\n      addBuf();\n\n      if (haveSeenTag && lineIsWhitespace()) {\n        for (var j = lineStart, next; j < tokens.length; j++) {\n          if (tokens[j].text) {\n            if ((next = tokens[j+1]) && next.tag == '>') {\n              // set indent to token value\n              next.indent = tokens[j].text.toString()\n            }\n            tokens.splice(j, 1);\n          }\n        }\n      } else if (!noNewLine) {\n        tokens.push({tag:'\\n'});\n      }\n\n      seenTag = false;\n      lineStart = tokens.length;\n    }\n\n    function changeDelimiters(text, index) {\n      var close = '=' + ctag,\n          closeIndex = text.indexOf(close, index),\n          delimiters = trim(\n            text.substring(text.indexOf('=', index) + 1, closeIndex)\n          ).split(' ');\n\n      otag = delimiters[0];\n      ctag = delimiters[delimiters.length - 1];\n\n      return closeIndex + close.length - 1;\n    }\n\n    if (delimiters) {\n      delimiters = delimiters.split(' ');\n      otag = delimiters[0];\n      ctag = delimiters[1];\n    }\n\n    for (i = 0; i < len; i++) {\n      if (state == IN_TEXT) {\n        if (tagChange(otag, text, i)) {\n          --i;\n          addBuf();\n          state = IN_TAG_TYPE;\n        } else {\n          if (text.charAt(i) == '\\n') {\n            filterLine(seenTag);\n          } else {\n            buf += text.charAt(i);\n          }\n        }\n      } else if (state == IN_TAG_TYPE) {\n        i += otag.length - 1;\n        tag = Hogan.tags[text.charAt(i + 1)];\n        tagType = tag ? text.charAt(i + 1) : '_v';\n        if (tagType == '=') {\n          i = changeDelimiters(text, i);\n          state = IN_TEXT;\n        } else {\n          if (tag) {\n            i++;\n          }\n          state = IN_TAG;\n        }\n        seenTag = i;\n      } else {\n        if (tagChange(ctag, text, i)) {\n          tokens.push({tag: tagType, n: trim(buf), otag: otag, ctag: ctag,\n                       i: (tagType == '/') ? seenTag - otag.length : i + ctag.length});\n          buf = '';\n          i += ctag.length - 1;\n          state = IN_TEXT;\n          if (tagType == '{') {\n            if (ctag == '}}') {\n              i++;\n            } else {\n              cleanTripleStache(tokens[tokens.length - 1]);\n            }\n          }\n        } else {\n          buf += text.charAt(i);\n        }\n      }\n    }\n\n    filterLine(seenTag, true);\n\n    return tokens;\n  }\n\n  function cleanTripleStache(token) {\n    if (token.n.substr(token.n.length - 1) === '}') {\n      token.n = token.n.substring(0, token.n.length - 1);\n    }\n  }\n\n  function trim(s) {\n    if (s.trim) {\n      return s.trim();\n    }\n\n    return s.replace(/^\\s*|\\s*$/g, '');\n  }\n\n  function tagChange(tag, text, index) {\n    if (text.charAt(index) != tag.charAt(0)) {\n      return false;\n    }\n\n    for (var i = 1, l = tag.length; i < l; i++) {\n      if (text.charAt(index + i) != tag.charAt(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // the tags allowed inside super templates\n  var allowedInSuper = {'_t': true, '\\n': true, '$': true, '/': true};\n\n  function buildTree(tokens, kind, stack, customTags) {\n    var instructions = [],\n        opener = null,\n        tail = null,\n        token = null;\n\n    tail = stack[stack.length - 1];\n\n    while (tokens.length > 0) {\n      token = tokens.shift();\n\n      if (tail && tail.tag == '<' && !(token.tag in allowedInSuper)) {\n        throw new Error('Illegal content in < super tag.');\n      }\n\n      if (Hogan.tags[token.tag] <= Hogan.tags['$'] || isOpener(token, customTags)) {\n        stack.push(token);\n        token.nodes = buildTree(tokens, token.tag, stack, customTags);\n      } else if (token.tag == '/') {\n        if (stack.length === 0) {\n          throw new Error('Closing tag without opener: /' + token.n);\n        }\n        opener = stack.pop();\n        if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {\n          throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);\n        }\n        opener.end = token.i;\n        return instructions;\n      } else if (token.tag == '\\n') {\n        token.last = (tokens.length == 0) || (tokens[0].tag == '\\n');\n      }\n\n      instructions.push(token);\n    }\n\n    if (stack.length > 0) {\n      throw new Error('missing closing tag: ' + stack.pop().n);\n    }\n\n    return instructions;\n  }\n\n  function isOpener(token, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].o == token.n) {\n        token.tag = '#';\n        return true;\n      }\n    }\n  }\n\n  function isCloser(close, open, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].c == close && tags[i].o == open) {\n        return true;\n      }\n    }\n  }\n\n  function stringifySubstitutions(obj) {\n    var items = [];\n    for (var key in obj) {\n      items.push('\"' + esc(key) + '\": function(c,p,t,i) {' + obj[key] + '}');\n    }\n    return \"{ \" + items.join(\",\") + \" }\";\n  }\n\n  function stringifyPartials(codeObj) {\n    var partials = [];\n    for (var key in codeObj.partials) {\n      partials.push('\"' + esc(key) + '\":{name:\"' + esc(codeObj.partials[key].name) + '\", ' + stringifyPartials(codeObj.partials[key]) + \"}\");\n    }\n    return \"partials: {\" + partials.join(\",\") + \"}, subs: \" + stringifySubstitutions(codeObj.subs);\n  }\n\n  Hogan.stringify = function(codeObj, text, options) {\n    return \"{code: function (c,p,i) { \" + Hogan.wrapMain(codeObj.code) + \" },\" + stringifyPartials(codeObj) +  \"}\";\n  }\n\n  var serialNo = 0;\n  Hogan.generate = function(tree, text, options) {\n    serialNo = 0;\n    var context = { code: '', subs: {}, partials: {} };\n    Hogan.walk(tree, context);\n\n    if (options.asString) {\n      return this.stringify(context, text, options);\n    }\n\n    return this.makeTemplate(context, text, options);\n  }\n\n  Hogan.wrapMain = function(code) {\n    return 'var t=this;t.b(i=i||\"\");' + code + 'return t.fl();';\n  }\n\n  Hogan.template = Hogan.Template;\n\n  Hogan.makeTemplate = function(codeObj, text, options) {\n    var template = this.makePartials(codeObj);\n    template.code = new Function('c', 'p', 'i', this.wrapMain(codeObj.code));\n    return new this.template(template, text, this, options);\n  }\n\n  Hogan.makePartials = function(codeObj) {\n    var key, template = {subs: {}, partials: codeObj.partials, name: codeObj.name};\n    for (key in template.partials) {\n      template.partials[key] = this.makePartials(template.partials[key]);\n    }\n    for (key in codeObj.subs) {\n      template.subs[key] = new Function('c', 'p', 't', 'i', codeObj.subs[key]);\n    }\n    return template;\n  }\n\n  function esc(s) {\n    return s.replace(rSlash, '\\\\\\\\')\n            .replace(rQuot, '\\\\\\\"')\n            .replace(rNewline, '\\\\n')\n            .replace(rCr, '\\\\r')\n            .replace(rLineSep, '\\\\u2028')\n            .replace(rParagraphSep, '\\\\u2029');\n  }\n\n  function chooseMethod(s) {\n    return (~s.indexOf('.')) ? 'd' : 'f';\n  }\n\n  function createPartial(node, context) {\n    var prefix = \"<\" + (context.prefix || \"\");\n    var sym = prefix + node.n + serialNo++;\n    context.partials[sym] = {name: node.n, partials: {}};\n    context.code += 't.b(t.rp(\"' +  esc(sym) + '\",c,p,\"' + (node.indent || '') + '\"));';\n    return sym;\n  }\n\n  Hogan.codegen = {\n    '#': function(node, context) {\n      context.code += 'if(t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),' +\n                      'c,p,0,' + node.i + ',' + node.end + ',\"' + node.otag + \" \" + node.ctag + '\")){' +\n                      't.rs(c,p,' + 'function(c,p,t){';\n      Hogan.walk(node.nodes, context);\n      context.code += '});c.pop();}';\n    },\n\n    '^': function(node, context) {\n      context.code += 'if(!t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),c,p,1,0,0,\"\")){';\n      Hogan.walk(node.nodes, context);\n      context.code += '};';\n    },\n\n    '>': createPartial,\n    '<': function(node, context) {\n      var ctx = {partials: {}, code: '', subs: {}, inPartial: true};\n      Hogan.walk(node.nodes, ctx);\n      var template = context.partials[createPartial(node, context)];\n      template.subs = ctx.subs;\n      template.partials = ctx.partials;\n    },\n\n    '$': function(node, context) {\n      var ctx = {subs: {}, code: '', partials: context.partials, prefix: node.n};\n      Hogan.walk(node.nodes, ctx);\n      context.subs[node.n] = ctx.code;\n      if (!context.inPartial) {\n        context.code += 't.sub(\"' + esc(node.n) + '\",c,p,i);';\n      }\n    },\n\n    '\\n': function(node, context) {\n      context.code += write('\"\\\\n\"' + (node.last ? '' : ' + i'));\n    },\n\n    '_v': function(node, context) {\n      context.code += 't.b(t.v(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n    },\n\n    '_t': function(node, context) {\n      context.code += write('\"' + esc(node.text) + '\"');\n    },\n\n    '{': tripleStache,\n\n    '&': tripleStache\n  }\n\n  function tripleStache(node, context) {\n    context.code += 't.b(t.t(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n  }\n\n  function write(s) {\n    return 't.b(' + s + ');';\n  }\n\n  Hogan.walk = function(nodelist, context) {\n    var func;\n    for (var i = 0, l = nodelist.length; i < l; i++) {\n      func = Hogan.codegen[nodelist[i].tag];\n      func && func(nodelist[i], context);\n    }\n    return context;\n  }\n\n  Hogan.parse = function(tokens, text, options) {\n    options = options || {};\n    return buildTree(tokens, '', [], options.sectionTags || []);\n  }\n\n  Hogan.cache = {};\n\n  Hogan.cacheKey = function(text, options) {\n    return [text, !!options.asString, !!options.disableLambda, options.delimiters, !!options.modelGet].join('||');\n  }\n\n  Hogan.compile = function(text, options) {\n    options = options || {};\n    var key = Hogan.cacheKey(text, options);\n    var template = this.cache[key];\n\n    if (template) {\n      var partials = template.partials;\n      for (var name in partials) {\n        delete partials[name].instance;\n      }\n      return template;\n    }\n\n    template = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);\n    return this.cache[key] = template;\n  }\n})( true ? exports : 0);\n\n\n//# sourceURL=webpack://llexicom/./node_modules/hogan.js/lib/compiler.js?");

/***/ }),

/***/ "./node_modules/hogan.js/lib/hogan.js":
/*!********************************************!*\
  !*** ./node_modules/hogan.js/lib/hogan.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n// This file is for use with Node.js. See dist/ for browser files.\n\nvar Hogan = __webpack_require__(/*! ./compiler */ \"./node_modules/hogan.js/lib/compiler.js\");\nHogan.Template = (__webpack_require__(/*! ./template */ \"./node_modules/hogan.js/lib/template.js\").Template);\nHogan.template = Hogan.Template;\nmodule.exports = Hogan;\n\n\n//# sourceURL=webpack://llexicom/./node_modules/hogan.js/lib/hogan.js?");

/***/ }),

/***/ "./node_modules/hogan.js/lib/template.js":
/*!***********************************************!*\
  !*** ./node_modules/hogan.js/lib/template.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nvar Hogan = {};\n\n(function (Hogan) {\n  Hogan.Template = function (codeObj, text, compiler, options) {\n    codeObj = codeObj || {};\n    this.r = codeObj.code || this.r;\n    this.c = compiler;\n    this.options = options || {};\n    this.text = text || '';\n    this.partials = codeObj.partials || {};\n    this.subs = codeObj.subs || {};\n    this.buf = '';\n  }\n\n  Hogan.Template.prototype = {\n    // render: replaced by generated code.\n    r: function (context, partials, indent) { return ''; },\n\n    // variable escaping\n    v: hoganEscape,\n\n    // triple stache\n    t: coerceToString,\n\n    render: function render(context, partials, indent) {\n      return this.ri([context], partials || {}, indent);\n    },\n\n    // render internal -- a hook for overrides that catches partials too\n    ri: function (context, partials, indent) {\n      return this.r(context, partials, indent);\n    },\n\n    // ensurePartial\n    ep: function(symbol, partials) {\n      var partial = this.partials[symbol];\n\n      // check to see that if we've instantiated this partial before\n      var template = partials[partial.name];\n      if (partial.instance && partial.base == template) {\n        return partial.instance;\n      }\n\n      if (typeof template == 'string') {\n        if (!this.c) {\n          throw new Error(\"No compiler available.\");\n        }\n        template = this.c.compile(template, this.options);\n      }\n\n      if (!template) {\n        return null;\n      }\n\n      // We use this to check whether the partials dictionary has changed\n      this.partials[symbol].base = template;\n\n      if (partial.subs) {\n        // Make sure we consider parent template now\n        if (!partials.stackText) partials.stackText = {};\n        for (key in partial.subs) {\n          if (!partials.stackText[key]) {\n            partials.stackText[key] = (this.activeSub !== undefined && partials.stackText[this.activeSub]) ? partials.stackText[this.activeSub] : this.text;\n          }\n        }\n        template = createSpecializedPartial(template, partial.subs, partial.partials,\n          this.stackSubs, this.stackPartials, partials.stackText);\n      }\n      this.partials[symbol].instance = template;\n\n      return template;\n    },\n\n    // tries to find a partial in the current scope and render it\n    rp: function(symbol, context, partials, indent) {\n      var partial = this.ep(symbol, partials);\n      if (!partial) {\n        return '';\n      }\n\n      return partial.ri(context, partials, indent);\n    },\n\n    // render a section\n    rs: function(context, partials, section) {\n      var tail = context[context.length - 1];\n\n      if (!isArray(tail)) {\n        section(context, partials, this);\n        return;\n      }\n\n      for (var i = 0; i < tail.length; i++) {\n        context.push(tail[i]);\n        section(context, partials, this);\n        context.pop();\n      }\n    },\n\n    // maybe start a section\n    s: function(val, ctx, partials, inverted, start, end, tags) {\n      var pass;\n\n      if (isArray(val) && val.length === 0) {\n        return false;\n      }\n\n      if (typeof val == 'function') {\n        val = this.ms(val, ctx, partials, inverted, start, end, tags);\n      }\n\n      pass = !!val;\n\n      if (!inverted && pass && ctx) {\n        ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);\n      }\n\n      return pass;\n    },\n\n    // find values with dotted names\n    d: function(key, ctx, partials, returnFound) {\n      var found,\n          names = key.split('.'),\n          val = this.f(names[0], ctx, partials, returnFound),\n          doModelGet = this.options.modelGet,\n          cx = null;\n\n      if (key === '.' && isArray(ctx[ctx.length - 2])) {\n        val = ctx[ctx.length - 1];\n      } else {\n        for (var i = 1; i < names.length; i++) {\n          found = findInScope(names[i], val, doModelGet);\n          if (found !== undefined) {\n            cx = val;\n            val = found;\n          } else {\n            val = '';\n          }\n        }\n      }\n\n      if (returnFound && !val) {\n        return false;\n      }\n\n      if (!returnFound && typeof val == 'function') {\n        ctx.push(cx);\n        val = this.mv(val, ctx, partials);\n        ctx.pop();\n      }\n\n      return val;\n    },\n\n    // find values with normal names\n    f: function(key, ctx, partials, returnFound) {\n      var val = false,\n          v = null,\n          found = false,\n          doModelGet = this.options.modelGet;\n\n      for (var i = ctx.length - 1; i >= 0; i--) {\n        v = ctx[i];\n        val = findInScope(key, v, doModelGet);\n        if (val !== undefined) {\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        return (returnFound) ? false : \"\";\n      }\n\n      if (!returnFound && typeof val == 'function') {\n        val = this.mv(val, ctx, partials);\n      }\n\n      return val;\n    },\n\n    // higher order templates\n    ls: function(func, cx, partials, text, tags) {\n      var oldTags = this.options.delimiters;\n\n      this.options.delimiters = tags;\n      this.b(this.ct(coerceToString(func.call(cx, text)), cx, partials));\n      this.options.delimiters = oldTags;\n\n      return false;\n    },\n\n    // compile text\n    ct: function(text, cx, partials) {\n      if (this.options.disableLambda) {\n        throw new Error('Lambda features disabled.');\n      }\n      return this.c.compile(text, this.options).render(cx, partials);\n    },\n\n    // template result buffering\n    b: function(s) { this.buf += s; },\n\n    fl: function() { var r = this.buf; this.buf = ''; return r; },\n\n    // method replace section\n    ms: function(func, ctx, partials, inverted, start, end, tags) {\n      var textSource,\n          cx = ctx[ctx.length - 1],\n          result = func.call(cx);\n\n      if (typeof result == 'function') {\n        if (inverted) {\n          return true;\n        } else {\n          textSource = (this.activeSub && this.subsText && this.subsText[this.activeSub]) ? this.subsText[this.activeSub] : this.text;\n          return this.ls(result, cx, partials, textSource.substring(start, end), tags);\n        }\n      }\n\n      return result;\n    },\n\n    // method replace variable\n    mv: function(func, ctx, partials) {\n      var cx = ctx[ctx.length - 1];\n      var result = func.call(cx);\n\n      if (typeof result == 'function') {\n        return this.ct(coerceToString(result.call(cx)), cx, partials);\n      }\n\n      return result;\n    },\n\n    sub: function(name, context, partials, indent) {\n      var f = this.subs[name];\n      if (f) {\n        this.activeSub = name;\n        f(context, partials, this, indent);\n        this.activeSub = false;\n      }\n    }\n\n  };\n\n  //Find a key in an object\n  function findInScope(key, scope, doModelGet) {\n    var val;\n\n    if (scope && typeof scope == 'object') {\n\n      if (scope[key] !== undefined) {\n        val = scope[key];\n\n      // try lookup with get for backbone or similar model data\n      } else if (doModelGet && scope.get && typeof scope.get == 'function') {\n        val = scope.get(key);\n      }\n    }\n\n    return val;\n  }\n\n  function createSpecializedPartial(instance, subs, partials, stackSubs, stackPartials, stackText) {\n    function PartialTemplate() {};\n    PartialTemplate.prototype = instance;\n    function Substitutions() {};\n    Substitutions.prototype = instance.subs;\n    var key;\n    var partial = new PartialTemplate();\n    partial.subs = new Substitutions();\n    partial.subsText = {};  //hehe. substext.\n    partial.buf = '';\n\n    stackSubs = stackSubs || {};\n    partial.stackSubs = stackSubs;\n    partial.subsText = stackText;\n    for (key in subs) {\n      if (!stackSubs[key]) stackSubs[key] = subs[key];\n    }\n    for (key in stackSubs) {\n      partial.subs[key] = stackSubs[key];\n    }\n\n    stackPartials = stackPartials || {};\n    partial.stackPartials = stackPartials;\n    for (key in partials) {\n      if (!stackPartials[key]) stackPartials[key] = partials[key];\n    }\n    for (key in stackPartials) {\n      partial.partials[key] = stackPartials[key];\n    }\n\n    return partial;\n  }\n\n  var rAmp = /&/g,\n      rLt = /</g,\n      rGt = />/g,\n      rApos = /\\'/g,\n      rQuot = /\\\"/g,\n      hChars = /[&<>\\\"\\']/;\n\n  function coerceToString(val) {\n    return String((val === null || val === undefined) ? '' : val);\n  }\n\n  function hoganEscape(str) {\n    str = coerceToString(str);\n    return hChars.test(str) ?\n      str\n        .replace(rAmp, '&amp;')\n        .replace(rLt, '&lt;')\n        .replace(rGt, '&gt;')\n        .replace(rApos, '&#39;')\n        .replace(rQuot, '&quot;') :\n      str;\n  }\n\n  var isArray = Array.isArray || function(a) {\n    return Object.prototype.toString.call(a) === '[object Array]';\n  };\n\n})( true ? exports : 0);\n\n\n//# sourceURL=webpack://llexicom/./node_modules/hogan.js/lib/template.js?");

/***/ }),

/***/ "./scripts/finder.ts":
/*!***************************!*\
  !*** ./scripts/finder.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Finder = void 0;\nclass Finder {\n    constructor() {\n        this.table = (__webpack_require__(/*! ./table */ \"./scripts/table.ts\").table);\n        this.cachedDictionary = {};\n    }\n    nearestIndex(key, table = this.table) {\n        let left = -1;\n        let right = table.length;\n        while (right - left > 1) {\n            const mid = Math.floor(left + (right - left) / 2);\n            if (table[mid] > key) {\n                right = mid;\n            }\n            else {\n                left = mid;\n            }\n        }\n        return left;\n    }\n    // Returns `count` of words which nears specified `key` in dictionary.\n    nearby(key, count) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _ = yield this.find(key); // Call this just for populate the cache.\n            const near_keys = Object.keys(this.cachedDictionary).sort();\n            const index = this.nearestIndex(key, near_keys);\n            const keys = near_keys.slice(Math.max(0, index - (count / 2)), index + (count / 2) + 1);\n            return Object.fromEntries(keys.map((key) => [key, this.cachedDictionary[key][0].meanings[0].definition]));\n        });\n    }\n    randomChoice(count) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shuffled = [...this.table];\n            for (let i = shuffled.length - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n            }\n            const files = count / 10;\n            const src = shuffled.slice(0, files);\n            const promises = src.map((key) => this.find(key));\n            const results = yield Promise.all(promises);\n            const usedIndices = new Set();\n            const words = [];\n            const originalKeys = Object.keys(this.cachedDictionary);\n            while (words.length < count) {\n                const index = Math.floor(Math.random() * originalKeys.length);\n                if (usedIndices.has(index)) {\n                    continue;\n                }\n                if (!this.cachedDictionary[originalKeys[index]] ||\n                    !this.cachedDictionary[originalKeys[index]][0].meanings) {\n                    continue;\n                }\n                usedIndices.add(index);\n                words.push(originalKeys[index]);\n            }\n            return Object.fromEntries(words.map((key) => [key, this.cachedDictionary[key][0].meanings[0].definition]));\n        });\n    }\n    // Returns single word data which exactly matches specified `key`.\n    // The `key` is case-insensitive.\n    find(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const canonical_key = key.toLowerCase();\n            if (this.cachedDictionary[canonical_key]) {\n                console.log(`cache hit for ${canonical_key} out of ${Object.keys(this.cachedDictionary).length}`);\n                return this.cachedDictionary[canonical_key];\n            }\n            try {\n                const nearest_index = this.nearestIndex(canonical_key);\n                const nearest_key = this.table[nearest_index];\n                console.log(`fetching ${nearest_key} for ${canonical_key}`);\n                const response = yield fetch(`${nearest_key}.json.lz`, {\n                    method: 'GET',\n                    headers: {\n                        'Accept-Encoding': 'br'\n                    }\n                });\n                const ds = new DecompressionStream(\"deflate\");\n                const readableStream = response.body;\n                if (readableStream === null) {\n                    console.error(\"no readable stream\");\n                    return undefined;\n                }\n                const decompressedStream = readableStream.pipeThrough(ds);\n                const blob = yield new Response(decompressedStream).blob();\n                const dict = JSON.parse(yield blob.text());\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                this.cachedDictionary = Object.assign(Object.assign({}, this.cachedDictionary), dict);\n                return this.cachedDictionary[canonical_key];\n            }\n            catch (error) {\n                console.error('Error fetching dictionary data:', error);\n                return undefined;\n            }\n        });\n    }\n}\nexports.Finder = Finder;\n\n\n//# sourceURL=webpack://llexicom/./scripts/finder.ts?");

/***/ }),

/***/ "./scripts/index.ts":
/*!**************************!*\
  !*** ./scripts/index.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst finder_1 = __webpack_require__(/*! ./finder */ \"./scripts/finder.ts\");\nconst render_1 = __webpack_require__(/*! ./render */ \"./scripts/render.ts\");\nconst finder = new finder_1.Finder();\nconst performSearch = () => {\n    const searchInput = document.getElementById('searchInput');\n    if (!(searchInput instanceof HTMLInputElement)) {\n        console.error(\"not valid input\");\n        return;\n    }\n    const searchTerm = searchInput === null || searchInput === void 0 ? void 0 : searchInput.value.trim();\n    if (searchTerm === undefined) {\n        return;\n    }\n    performSearchAndPushHistory(searchTerm);\n};\nconst performSearchAndPushHistory = (searchTerm) => {\n    performSearchImpl(searchTerm);\n    const newUrl = `?query=${searchTerm}`;\n    history.pushState({\n        query: searchTerm\n    }, '', newUrl);\n};\nconst performSearchImpl = (searchTerm) => __awaiter(void 0, void 0, void 0, function* () {\n    if (searchTerm === '') {\n        console.log(\"empty query\");\n        return;\n    }\n    const resultsContainer = document.getElementById('results');\n    if (resultsContainer === null) {\n        console.error(\"No result box\");\n        return;\n    }\n    const data = yield finder.find(searchTerm);\n    if (data === undefined) {\n        const candidates = yield finder.nearby(searchTerm, 100);\n        resultsContainer.innerHTML = (0, render_1.renderNotfoundMessage)(searchTerm, candidates);\n    }\n    else {\n        resultsContainer.innerHTML = (0, render_1.render)(data);\n        const cards = document.getElementsByClassName(\"meaning-card\");\n        for (const card of cards) {\n            card.addEventListener('click', (m) => {\n                if (!(m.target instanceof HTMLElement)) {\n                    return;\n                }\n                const body = card.querySelector('.meaning-content');\n                if (body) {\n                    body.classList.toggle(\"visible\");\n                }\n                const title = card.querySelector('.meaning-title');\n                if (title) {\n                    title.classList.toggle(\"expand\");\n                }\n            });\n        }\n    }\n});\nconst fillSamples = () => __awaiter(void 0, void 0, void 0, function* () {\n    const samples = yield finder.randomChoice(100);\n    const resultsContainer = document.getElementById('results');\n    if (!resultsContainer) {\n        return;\n    }\n    resultsContainer.innerHTML = (0, render_1.renderIndexSamples)(samples);\n    const wordEntries = document.getElementsByClassName('word-entry');\n    for (const wordEntry of wordEntries) {\n        wordEntry.addEventListener('click', (event) => {\n            const div = wordEntry.querySelector('div');\n            if (div) {\n                const word = div.innerHTML;\n                performSearchAndPushHistory(word);\n            }\n            event.stopPropagation();\n            console.log(\"clidked word\");\n            window.scrollTo({\n                top: 0,\n                left: 0,\n                behavior: 'smooth'\n            });\n        }, true);\n    }\n});\nfunction load() {\n    const searchButton = document.getElementById('searchButton');\n    searchButton === null || searchButton === void 0 ? void 0 : searchButton.addEventListener('click', () => {\n        performSearch();\n    });\n    const searchInput = document.getElementById('searchInput');\n    searchInput === null || searchInput === void 0 ? void 0 : searchInput.addEventListener('keypress', (event) => {\n        if (event.key === 'Enter') {\n            performSearch();\n        }\n    });\n    const logo = document.getElementById('logo');\n    logo === null || logo === void 0 ? void 0 : logo.addEventListener('click', () => {\n        history.pushState({\n            query: undefined\n        }, '', location.pathname);\n        fillSamples();\n    });\n    const params = new URLSearchParams(window.location.search);\n    const query = params.get('query');\n    if (searchInput instanceof HTMLInputElement && query !== null) {\n        searchInput.value = query;\n        performSearchImpl(query);\n    }\n    else {\n        fillSamples();\n    }\n}\n;\nwindow.addEventListener('pageshow', (event) => {\n    load();\n});\nwindow.addEventListener('popstate', (event) => {\n    const searchInput = document.getElementById('searchInput');\n    if (event.state && searchInput instanceof HTMLInputElement) {\n        const query = event.state.query || '';\n        if (!query) {\n            fillSamples();\n        }\n        else {\n            searchInput.value = query;\n            performSearchImpl(query);\n        }\n    }\n    else {\n        load();\n    }\n});\n\n\n//# sourceURL=webpack://llexicom/./scripts/index.ts?");

/***/ }),

/***/ "./scripts/render.ts":
/*!***************************!*\
  !*** ./scripts/render.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.render = render;\nexports.renderNotfoundMessage = renderNotfoundMessage;\nexports.renderIndexSamples = renderIndexSamples;\nconst Hogan = __webpack_require__(/*! hogan.js */ \"./node_modules/hogan.js/lib/hogan.js\");\nconst word_mustache_1 = __importDefault(__webpack_require__(/*! ./word.mustache */ \"./scripts/word.mustache\"));\nconst template = Hogan.compile(word_mustache_1.default);\nfunction parseMarkdownBold(text) {\n    if (!text) {\n        return \"\";\n    }\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n}\nfunction translatePartOfSpeech(pos) {\n    switch (pos) {\n        case \"verb\":\n            return \"動詞\";\n        case \"verb (vt)\":\n            return \"他動詞\";\n        case \"verb (vi)\":\n            return \"自動詞\";\n        case \"noun\":\n            return \"名詞\";\n        case \"pronoun\":\n            return \"代名詞\";\n        case \"proper noun\":\n            return \"固有名詞\";\n        case \"adjective\":\n            return \"形容詞\";\n        case \"adverb\":\n            return \"副詞\";\n        case \"preposition\":\n            return \"前置詞\";\n        case \"conjunction\":\n            return \"接続詞\";\n        case \"interjection\":\n            return \"間投詞\";\n    }\n    if (pos.startsWith(\"verb\")) {\n        return \"動詞 (変化)\";\n    }\n    if (pos.startsWith(\"adjective\")) {\n        return \"形容詞\";\n    }\n    console.log(pos);\n    return \"Unknown\";\n}\nfunction translateTransitivity(en) {\n    switch (en) {\n        case \"vr\":\n        case \"vi\":\n            return \"自\";\n        case \"vt\":\n            return \"他\";\n    }\n    return \"sss\";\n}\nfunction mustachePreprocess(data) {\n    if (data.meanings) {\n        for (let i = 0; i < data.meanings.length; i++) {\n            data.meanings[i].index_plus_1 = i + 1;\n            if (data.meanings[i].part_of_speech) {\n                data.meanings[i].part_of_speech_translated = translatePartOfSpeech(data.meanings[i].part_of_speech);\n            }\n            if (data.meanings[i].transitivity) {\n                data.meanings[i].transitivity_translated = translateTransitivity(data.meanings[i].transitivity);\n            }\n            data.meanings[i].has_collocations = (data.meanings[i].collocations && data.meanings[i].collocations.length > 0);\n            data.meanings[i].has_synonyms = (data.meanings[i].synonyms && data.meanings[i].synonyms.length > 0);\n            data.meanings[i].has_antonyms = (data.meanings[i].antonyms && data.meanings[i].antonyms.length > 0);\n        }\n    }\n    if (data.example_sentences) {\n        for (let i = 0; i < data.example_sentences.length; i++) {\n            if (data.example_sentences[i].type) {\n                data.example_sentences[i].type_translated = translatePartOfSpeech(data.example_sentences[i].type);\n            }\n            if (data.example_sentences[i].sentence) {\n                data.example_sentences[i].sentence = parseMarkdownBold(data.example_sentences[i].sentence);\n            }\n        }\n    }\n    if (data.readability_explanation) {\n        data.readability_explanation.text = parseMarkdownBold(data.readability_explanation.text);\n    }\n    if (data.usage_notes) {\n        data.usage_notes.explanation = parseMarkdownBold(data.usage_notes.explanation);\n    }\n    if (data.related_words) {\n        data.related_words.has_derivatives = !!data.related_words.derivatives;\n        data.related_words.has_idioms_phrases = !!data.related_words.idioms_phrases;\n        data.related_words.has_phrasal_verbs = !!data.related_words.has_phrasal_verbs;\n    }\n    data.has_inflection_forms = !!data.inflection && (!!data.inflection.noun_plural ||\n        !!data.inflection.verb_forms);\n    data.has_related_words = !!data.related_words;\n    data.has_example_sentences = !!data.example_sentences;\n    return data;\n}\nfunction render(data) {\n    return template.render(mustachePreprocess(data[0])); // TODO: Handle multiple words data if exists.\n}\nfunction renderNotfoundMessage(target, words) {\n    const sorted_words = Object.keys(words).sort();\n    let result = `${target}は見つかりませんでした<br>`;\n    result += '<div class=\"suggestions-container\">\\n';\n    result += '<div class=\"suggestions-title\">もしかして:</div>\\n';\n    result += '<div class=\"word-tags\">\\n';\n    for (let i = 0; i < sorted_words.length; i++) {\n        result += `<a href=\"?query=${sorted_words[i]}\" class=\"word-tag\" title=\"${words[sorted_words[i]]}\">${sorted_words[i]}</a><br>`;\n    }\n    result += '</div></div>';\n    return result;\n}\nfunction renderIndexSamples(words) {\n    const keys = Object.keys(words);\n    let result = '<div class=\"list-container\">\\n';\n    result += '<ul class=\"word-list\">\\n';\n    for (let i = 0; i < keys.length; i++) {\n        result += `<li class=\"word-entry\" title=\"${keys[i]}\"><div class=\"word-link\">${keys[i]}</div>`;\n        result += `<span class=\"word-translation\">${words[keys[i]]}</span></li>`;\n    }\n    result += '</ul></div>';\n    return result;\n}\n\n\n//# sourceURL=webpack://llexicom/./scripts/render.ts?");

/***/ }),

/***/ "./scripts/table.ts":
/*!**************************!*\
  !*** ./scripts/table.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nexports.table = [\"-\", \"aanscherpen\", \"abasgi\", \"abbotship\", \"aberdevine\", \"abgestuft\", \"abitato\", \"abnormal-sounding\", \"aboriginal-inspired\", \"abrechnung\", \"abschweifen\", \"absorbido\", \"abstruse\", \"abwandeln\", \"acanhadar\", \"accelerometers\", \"accessoriamente\", \"accompagnatore\", \"accretive\", \"aceitar\", \"acetylcholine-resistant\", \"achromasia\", \"acinus\", \"acortada\", \"acquittingly\", \"acted\", \"activity-induced\", \"acutezza\", \"adapto\", \"adds\", \"aderezar\", \"adipocere\", \"adjustmental\", \"admitido\", \"adormecer\", \"aduan\", \"advancers\", \"advisability\", \"aequus\", \"aerotropic\", \"affabulation\", \"affiliate\", \"affollato\", \"aflicker\", \"afronta\", \"afterwrath\", \"agedly\", \"aggradare\", \"agilidad\", \"agnosticism\", \"agredir\", \"aguantable\", \"ai-generated\", \"air-driven\", \"airs\", \"akan\", \"alabama\", \"albeit\", \"alcimede\", \"alders\", \"aletargar\", \"algological\", \"alignment-agnostic\", \"alkaline-promoting\", \"all-inclusiveness\", \"alleger\", \"allergy-unfriendly\", \"alloclasite\", \"alluded\", \"aloft\", \"altaian\", \"altivo\", \"alzarsi\", \"amass\", \"amber\", \"ambrosiate\", \"amentiferous\", \"amid\", \"ammirevolmente\", \"amontonar\", \"amphibiological\", \"amplificazione\", \"an-\", \"analgesis\", \"anaphrodisiac\", \"anchorage\", \"androcratic\", \"anesthetized\", \"angestammt\", \"anglo-irishism\", \"anhalten\", \"animato\", \"anlehnen\", \"annotate\", \"anodyne\", \"anregungen\", \"antagonised\", \"antepasados\", \"anthranone\", \"anti-capitalism\", \"anti-growth\", \"anti-neoplastic\", \"anti-transfusionist\", \"antichronism\", \"antidinic\", \"antikythera\", \"antiodorant\", \"antiquating\", \"antithrombotic\", \"anunciar\", \"apacible\", \"apegar-se\", \"aphonic\", \"apneumatic\", \"apomecometry\", \"apoyo\", \"appeased\", \"applauding\", \"appose\", \"approaches\", \"apreciablemente\", \"aptare\", \"aquiline-nosed\", \"arbinose\", \"archaeological\", \"archilute\", \"arctician\", \"areta\", \"argyle\", \"arivaipa\", \"armor-plating\", \"arqueamento\", \"arrepentirse\", \"arrogare\", \"art-based\", \"articulatedly\", \"artistical\", \"ascc\", \"asentado\", \"asia-centric\", \"askari\", \"asphyxiated\", \"assayer\", \"assessive\", \"assimilationist\", \"assorbitore\", \"asterism\", \"astrologistic\", \"atadura\", \"atestado\", \"atlantite\", \"atout\", \"attachers\", \"attention-seeker\", \"attonari\", \"attuazione\", \"audio-based\", \"auferwecken\", \"aufsaugen\", \"auguries\", \"auriscope\", \"ausgelassen\", \"auspiciar\", \"austinburg\", \"authentication-based\", \"auto-suggestion\", \"autogamy\", \"automobile-promoting\", \"autoritario\", \"avail\", \"avenges\", \"avilatar-se\", \"avventare\", \"aweary\", \"ayntab\", \"azymite\", \"bachelorhood\", \"backhoes\", \"backwinding\", \"badnesses\", \"bahutu\", \"balaghat\", \"balkanised\", \"ballet-supportive\", \"bamboozling\", \"bandstand\", \"bankruptly\", \"barbarian\", \"bareheaded\", \"barocco\", \"barrier-reducing\", \"basear-se\", \"basiskosten\", \"batell\", \"battleground\", \"bcbs\", \"beanstanden\", \"beautify\", \"bedaard\", \"bedlingtonshire\", \"beer-advertising\", \"befangenheit\", \"begehrt\", \"beguine\", \"beieinander\", \"belakang\", \"believability-increasing\", \"belly\", \"bemoedigen\", \"beneficence\", \"bennir\", \"beradaptasi\", \"berdesakan\", \"berhari-hari\", \"berlaku\", \"berrichon\", \"berulang-ulang\", \"beseechingly\", \"besplatter\", \"bestowing\", \"betreiben\", \"bevitore\", \"bezahlbar\", \"biarpun\", \"bichloride\", \"bienestar\", \"bigmouthed\", \"bilious\", \"bind\", \"biogeneticist\", \"biotherapy\", \"bireysel\", \"bisinuate\", \"bittier\", \"blackening\", \"bland-looking\", \"blazingly\", \"blepharoptosis\", \"blitzkrieg\", \"blood-saving\", \"blotchy\", \"bluebush\", \"blusa\", \"bob-wig\", \"body-neutral\", \"boisterous-looking\", \"bom\", \"bone-hardening\", \"boogying\", \"boomslang\", \"borborus\", \"borrosidad\", \"botchiness\", \"boucherism\", \"bourran\", \"boxcar\", \"brachygraphy\", \"braillewriter\", \"branchlet\", \"brandishing\", \"brave-gazed\", \"breakaway\", \"breda\", \"brezin\", \"brier\", \"brinie\", \"broad-faced\", \"broiled\", \"bronzing\", \"brownish-gold\", \"brutalement\", \"bucerotidae\", \"budget-cutting\", \"buglers\", \"bullace\", \"bummack\", \"burbled\", \"burlare\", \"buruh\", \"business-minded\", \"butterfish\", \"by-sitter\", \"caballed\", \"cachespell\", \"cadmiumize\", \"cair\", \"calciclase\", \"calfskin\", \"calligraphy\", \"calorific\", \"cambiante\", \"campanulate\", \"canajong\", \"candidly\", \"cannet\", \"cantillate\", \"capellane\", \"caplins\", \"captivate\", \"caravette\", \"carboxypeptidase\", \"cardiomyoliposis\", \"caret\", \"carmanians\", \"carpenterworm\", \"carrus\", \"caryll\", \"cashmere\", \"castilla\", \"catalogar\", \"catechiser\", \"cathodic\", \"caudally\", \"cautivar\", \"ccis\", \"celative\", \"cellepora\", \"censored\", \"centraliser\", \"cephalochordata\", \"cerebropedal\", \"certification\", \"cfc\", \"chair-warmer\", \"chamaerrhine\", \"change-independent\", \"chapellany\", \"charer\", \"charred\", \"chattels\", \"checkerboard\", \"cheimaphobia\", \"chemosynthesis\", \"chesterfields\", \"chicayote\", \"child-rearing\", \"chimin\", \"chiromancer\", \"chlorambucil\", \"chocolate-loving\", \"cholesterol\", \"chorda\", \"christening\", \"chromosome-linked\", \"chuckled\", \"churrigueresque\", \"cifose\", \"cinematographies\", \"circoscrizione\", \"circumpolar\", \"cisterns\", \"city-inspired\", \"cladistic\", \"clannish\", \"clasps\", \"clausurar\", \"cleansing\", \"clerestoried\", \"cliftonia\", \"clingseed\", \"clod-poll\", \"closed-off\", \"cloud-specific\", \"clumsy-looking\", \"co-occupant\", \"coagular\", \"coalmouse\", \"cobalti-\", \"cock-and-pinch\", \"codebase\", \"coenobiod\", \"cogener\", \"coherente\", \"coinvolve\", \"coleopterous\", \"collaudare\", \"collisione\", \"colonizers\", \"colossally\", \"comatic\", \"comedones\", \"commandable\", \"commercialistically\", \"committingly\", \"communication-negligent\", \"compact\", \"company-wide\", \"compendiado\", \"competition-level\", \"completarse\", \"complimentary\", \"compound-sourced\", \"comprimir\", \"computer-animated\", \"concealed-looking\", \"concernientes\", \"concluant\", \"concubinarian\", \"condire\", \"conduzir\", \"confessor\", \"confirmarse\", \"conforming\", \"conge\", \"congredient\", \"conjugating\", \"connoisseurship\", \"consciousness-preserving\", \"conservarse\", \"consistence\", \"conspargere\", \"constraint-free\", \"consume\", \"containment\", \"contenedor\", \"context-free\", \"contornearse\", \"contraffazione\", \"contrectare\", \"controversia\", \"convention\", \"convex\", \"coo-coo\", \"coordinated\", \"copper-poor\", \"copyreaders\", \"core\", \"cornerer\", \"corporate\", \"correctivo\", \"corroded\", \"cortante\", \"cosmetas\", \"costain\", \"cottagers\", \"countdown\", \"counterclassifications\", \"counterpole\", \"countryfication\", \"courtly\", \"covid-resembling\", \"coydogs\", \"craft-focused\", \"cranny\", \"creakier\", \"credences\", \"cremasterial\", \"cretan\", \"crimple\", \"criterion\", \"crojack\", \"cross-bun\", \"cross-referential\", \"crotaphytus\", \"crucilly\", \"crusher\", \"crypto-jewish\", \"cte\", \"cucurb\", \"culminar\", \"culturizar\", \"cupidamente\", \"curiality\", \"curtailedly\", \"cusso\", \"custumals\", \"cyanmethemoglobin\", \"cyclist-unfriendly\", \"cynanche\", \"cytherea\", \"dacoity\", \"dahomey\", \"damage-increasing\", \"dance-drama\", \"dano-norwegian\", \"dark-minded\", \"dastard\", \"data-losing\", \"datch\", \"daur\", \"daypack\", \"de-encapsulation\", \"deactivatable\", \"deamidate\", \"debater\", \"debonnaire\", \"debutar\", \"decaudate\", \"decepar\", \"decisions\", \"declino\", \"decompression-driven\", \"decoupage\", \"dedicatedly\", \"deep-toned\", \"defect\", \"deferire\", \"definidamente\", \"deformalize\", \"degenerieren\", \"dehumidification\", \"dekagrams\", \"delegasi\", \"deliciae\", \"delivery-oriented\", \"demand-driven\", \"demi-islander\", \"democratic-leaning\", \"demonstrativo\", \"denasalization\", \"denominarse\", \"dentistry\", \"department\", \"depersonalize\", \"deport\", \"depressa\", \"derange\", \"dermatology\", \"desacelerador\", \"desajustar-se\", \"desarrollar\", \"descant\", \"desconfigurarse\", \"descubierto\", \"desenamorarse\", \"deseoso\", \"desgana\", \"design-forward\", \"desinstalar\", \"deslligar-se\", \"desnudar\", \"despair-driven\", \"desplegar\", \"desquamating\", \"destocking\", \"desvestirse\", \"detector\", \"deterred\", \"detrimental-appearing\", \"devaney\", \"deviation\", \"devotary\", \"dextrorotatory-spiraling\", \"diademed\", \"dialogue\", \"diasuh\", \"dicebox\", \"dictatability\", \"dieksploitasi\", \"diffamare\", \"diffuseness\", \"digital-work-ready\", \"dihargai\", \"dilaniare\", \"diluendo\", \"dimicare\", \"ding-a-ling\", \"diorite\", \"diplodocus\", \"direbutkan\", \"dirigenti\", \"disaccustom\", \"disappointments\", \"disbeliefs\", \"disciplinarian\", \"disconnector\", \"discoveries\", \"discutir\", \"disengagement-related\", \"disgrace\", \"dishonor\", \"disinherited\", \"diskriminiert\", \"disoblige\", \"disparidad\", \"display-focused\", \"disprove\", \"disrespectful-seeming\", \"dissestare\", \"dissolversi\", \"distend\", \"distorsionado\", \"district\", \"ditchdown\", \"diverge\", \"dividersi\", \"divulgers\", \"dna-influenced\", \"docimology\", \"dodgeful\", \"dogmatismo\", \"dolophine\", \"domiculture\", \"donc\", \"doortastend\", \"dorsibranch\", \"double-acting\", \"doubled\", \"dowager\", \"downriver\", \"dozing\", \"drakonite\", \"drc\", \"dreyer\", \"drivership\", \"drosophilidae\", \"drumhead\", \"dual-crew\", \"ducommun\", \"dulcid\", \"duncansville\", \"duplicate-pinnate\", \"durchschauen\", \"dustproof\", \"dygert\", \"dyspnoi\", \"earleville\", \"earthdrake\", \"eastern-focused\", \"ebbene\", \"ecclesiologic\", \"eco-friendly-energy-sourced\", \"ectocarpous\", \"edgeless\", \"educarse\", \"efectuarse\", \"efficiencies\", \"effusing\", \"egor\", \"eigenverantwortung\", \"eingegraben\", \"einsammeln\", \"either\", \"elaboratenesses\", \"elean-eretrian\", \"electroengrave\", \"electrovection\", \"elevasi\", \"elite-oriented\", \"eloquentemente\", \"emanciparse\", \"embaucar\", \"emborronarse\", \"embryulcia\", \"emission-increasing\", \"empaneled\", \"empiriegeleitet\", \"employer-initiated\", \"empty-handedness\", \"enamorado\", \"enceladus\", \"encodeable\", \"encumbered\", \"endleaf\", \"endosporous\", \"energie\", \"enfatizar\", \"engagieren\", \"english\", \"engrossment\", \"enlecer\", \"enol\", \"ensamblar\", \"entangling\", \"enterprise-managed\", \"enthusiast-oriented\", \"entomophobic\", \"entretenedor\", \"entusiasme\", \"envergonhar\", \"enwrapment\", \"epicene\", \"epilepsy-safe\", \"epistemonic\", \"eq\", \"equilibration\", \"equivalence\", \"eremital\", \"erholungsort\", \"ermorden\", \"erotico\", \"erschwerung\", \"erythraemia\", \"escampar-se\", \"esconderse\", \"esfriar-se\", \"esoterik\", \"espiar\", \"esseda\", \"estancado\", \"estimada\", \"estrechura\", \"eswatini\", \"ethicism\", \"etwas\", \"eulogies\", \"euromart\", \"evacuated\", \"evaporate\", \"ever-blessed\", \"evil-weaponed\", \"ex-offender\", \"examination-oriented\", \"excepcionais\", \"excitedly\", \"excruciated\", \"executors\", \"exhaust\", \"eximere\", \"exolinguistic\", \"expandido\", \"expendable\", \"expert-judged\", \"explicable\", \"export-focused\", \"exprimir\", \"extemporizing\", \"externally-marked\", \"extra-textual\", \"extras\", \"extrovertedly\", \"eyelessness\", \"fabrikneu\", \"facility-based\", \"facundia\", \"fainaiguing\", \"faithlessly\", \"fallibly\", \"fame-hungry\", \"fancier\", \"fantoccini\", \"farland\", \"fascinante\", \"fastens\", \"fate\", \"faulen\", \"favouritism\", \"featherbrained\", \"federally-led\", \"fees\", \"fellmongery\", \"femme\", \"fermentation\", \"ferruginated\", \"festigen\", \"feudatory\", \"fibreboard\", \"fiddle-lipped\", \"fierceness\", \"fila\", \"filmable\", \"finamente\", \"finement\", \"finleyville\", \"firedog\", \"first-famed\", \"fisico\", \"fivesome\", \"flachste\", \"flambé\", \"flashcard\", \"flattering-appearing\", \"fld\", \"fletching\", \"flint-glass\", \"flojera\", \"floridean\", \"flowerless\", \"flujo\", \"flushed\", \"fm\", \"fog-reducing\", \"foliar\", \"fondere\", \"foot-ton\", \"forare\", \"fore-possess\", \"foreign-developed\", \"foreseeable\", \"foreweep\", \"forlana\", \"formatted\", \"fornix\", \"fortschritt\", \"fossil-fuel-supplied\", \"founder-restricted\", \"fox\", \"fragile\", \"frail\", \"frangipani\", \"fraudulently\", \"free-response\", \"freezing-promoting\", \"frenzied\", \"freundlichkeit\", \"frightening\", \"frode\", \"frontward-projecting\", \"fructus\", \"frustriert\", \"fuente\", \"full-fat\", \"fumble-fist\", \"fundamentalism\", \"funnel\", \"furriery\", \"fustigated\", \"gabarit\", \"gaffen\", \"galantine\", \"gallivant\", \"game-specific\", \"gangbuster\", \"garbanzos\", \"garookuh\", \"gasket\", \"gastroplication\", \"gaunerei\", \"ge\", \"geehrt\", \"geistestiefe\", \"gem-bedizened\", \"gender-neutral\", \"generalmente\", \"genitalia\", \"gentleman-usher\", \"geodetic\", \"georgesman\", \"gerianna\", \"gersang\", \"gestalte\", \"gewaltlos\", \"ghostlily\", \"gigantine\", \"gimmor\", \"girlfriend\", \"glabriety\", \"glaser\", \"gleich\", \"glissando\", \"glockenspiel\", \"glottalite\", \"glycerinize\", \"go\", \"godey\", \"goldbird\", \"gonadal-stimulating\", \"good-originated\", \"gore-soaked\", \"gotos\", \"governorships\", \"grades\", \"graminivore\", \"grandma\", \"grapey\", \"grassweed\", \"graveward\", \"grayscale-based\", \"greece-hating\", \"greenlets\", \"grezzo\", \"grimp\", \"grocer\", \"grottesamente\", \"groupoids\", \"gruel\", \"guango\", \"gudebrother\", \"guidonia\", \"gulpin\", \"guric\", \"guvacine\", \"gyniatrics\", \"habilidades\", \"hackneyer\", \"haggling\", \"hairier\", \"half-acre\", \"half-irish\", \"halfwit\", \"halosere\", \"hammock\", \"handcart\", \"handprint\", \"hanya\", \"harcourt\", \"hardiness\", \"harlotry\", \"harpoons\", \"has\", \"hatlessness\", \"havocs\", \"hazy\", \"headrope\", \"heaps\", \"heartweed\", \"heavenly-minded\", \"hectocotyli\", \"hegemony-supporting\", \"helical\", \"hellenised\", \"hemachrome\", \"hemimetabolic\", \"hemphill\", \"hepplewhite\", \"herausziehen\", \"hereje\", \"herniated\", \"hervorgehen\", \"heterodoxly\", \"heterostructure\", \"hexastichy\", \"hideous\", \"high-churchman\", \"high-potential\", \"highbrowism\", \"hildebrandian\", \"hindlimb\", \"hip-hugger\", \"hispanic-style\", \"hitherto\", \"hobucken\", \"hohenlinden\", \"holists\", \"holotrichida\", \"homeowner\", \"homogenetic\", \"hone\", \"honrar-se\", \"hooves\", \"hormonally-unaffected\", \"horribly\", \"hortatory\", \"hot-bloodedness\", \"hour\", \"how-do-ye-do\", \"hue-altered\", \"human-centered\", \"humanoid\", \"hummingbird\", \"huntsman\", \"hustonville\", \"hydrargyrism\", \"hydroferricyanic\", \"hydrorachis\", \"hymeneals\", \"hyperchromia\", \"hypermetropic\", \"hyperthermesthesia\", \"hypochnose\", \"hypophalangism\", \"hypotrophy\", \"iata\", \"ichthyism\", \"ictus\", \"identifikation\", \"idol\", \"ignitable\", \"ikhtiar\", \"ill-faringly\", \"illegittimo\", \"illustration-filled\", \"imaginal\", \"imbibizione\", \"immacolato\", \"immigrants\", \"immovability\", \"impacchettare\", \"impassable\", \"impelagarsi\", \"imperiousness\", \"impigliarsi\", \"implicito\", \"importunately\", \"imprecisarse\", \"imprimatura\", \"improvvisamente\", \"imputrid\", \"inactividad\", \"inappeasable\", \"inaugurer\", \"incarico\", \"incestuous-like\", \"inclinations\", \"income-enhancing\", \"incomprehension\", \"inconsistencia\", \"incorporated\", \"incriminated\", \"incursion\", \"indefinibile\", \"independently-managed\", \"indicia\", \"indignus\", \"indisposing\", \"individually-dressed\", \"indorsable\", \"industrial-inspired\", \"ineffaceable\", \"inequalness\", \"inexactitude\", \"infallibility\", \"inferability\", \"infilare\", \"inflation-hedging\", \"infolded\", \"informedness\", \"infructuosity\", \"ingestion\", \"inhabilitado\", \"inhumano\", \"iniziare\", \"inkongruent\", \"inne\", \"innovation-enhancing\", \"inopinately\", \"inquirable\", \"insect-free\", \"insert\", \"insipiens\", \"inspecionar\", \"instances\", \"institutionally-created\", \"insubordinarse\", \"insurer\", \"integratable\", \"intelligent-looking\", \"intenso\", \"interbred\", \"intercut\", \"interface-specific\", \"interlacement\", \"intermittent\", \"internet-addicted\", \"interpolators\", \"interrumpido\", \"intertwined\", \"intimate\", \"intoxicative\", \"intraneural\", \"intrigieren\", \"introvertirse\", \"invaginate\", \"inventor\", \"investment-light\", \"invitrifiable\", \"inwrought\", \"ipotizzare\", \"irishwomen\", \"irragionevole\", \"irregularizing\", \"irresonance\", \"irritado\", \"isento\", \"isocyanid\", \"isomerized\", \"israelophobic\", \"itemise\", \"ixodic\", \"jackstraws\", \"jailer\", \"janjang\", \"jatha\", \"jecoral\", \"jequié\", \"jetty\", \"jilting\", \"job-reducing\", \"joins\", \"jotting\", \"ju-jitsu\", \"juger\", \"june\", \"justice-generalship\", \"kabassou\", \"kalashnikov\", \"kangarooer\", \"karl-marx-stadt\", \"katchung\", \"keakuratan\", \"kecenderungan\", \"keese\", \"keines\", \"keldah\", \"kemerosotan\", \"keonaran\", \"kerendahan\", \"keserupaan\", \"ketidakaksesibilitasan\", \"kettledrums\", \"khakis\", \"kidnapping\", \"kimitri\", \"kingfish\", \"kishen\", \"klansman\", \"knacked\", \"knitter\", \"knowledgeable-seeming\", \"kolmogorov\", \"kondolenz\", \"konstruieren\", \"kooperativ\", \"kostennachweis\", \"kremser\", \"kulack\", \"kusimansel\", \"labefactation\", \"laboratory-medicine-related\", \"laciniose\", \"lactucerin\", \"laggen-gird\", \"laloneurosis\", \"laminal\", \"lancio\", \"landstreicher\", \"lanjutan\", \"lapse\", \"lariat\", \"last-minute\", \"latham\", \"laudator\", \"lava-capped\", \"lawnside\", \"layperson\", \"leaderless\", \"leafleteer\", \"leashed\", \"lecia\", \"left-footedness\", \"legen\", \"lehrend\", \"lemmitis\", \"lentezza\", \"leptonema\", \"lethargic\", \"leugnen\", \"levitating\", \"lhs\", \"liberazione\", \"licensure\", \"lieges\", \"ligados\", \"light-inactivated\", \"lightweights\", \"limans\", \"limited-technology\", \"lincolnville\", \"linguini\", \"lionizer\", \"lipothymy\", \"liscomb\", \"literalizer\", \"litigio\", \"liverworts\", \"loadage\", \"lobsterlike\", \"locations\", \"lodoso\", \"logoramento\", \"long-aged\", \"longgar\", \"loophole\", \"lordura\", \"lotto\", \"lovelily\", \"low-halogen\", \"low-temperature\", \"lows\", \"luciana\", \"lugger\", \"luminodynamist\", \"lung-protective\", \"lustfulness\", \"lwo\", \"lyophilized\", \"macchia\", \"machinelike\", \"macron\", \"madoera\", \"maghirap\", \"magnification\", \"mai\", \"maintopmen\", \"mal-\", \"malayan\", \"males\", \"malingering\", \"malt-enhanced\", \"mammalian\", \"management-centric\", \"mandate-driven\", \"mangkat\", \"maniples\", \"manpower-dependent\", \"manuduce\", \"map\", \"marcescere\", \"margravial\", \"markazes\", \"marketing-led\", \"marriage\", \"martyrs\", \"masigasig\", \"massy\", \"matang\", \"mathematician\", \"mattly\", \"maxilla\", \"mazdaism\", \"meagernesses\", \"meatcutter\", \"media\", \"medication-based\", \"medo\", \"megapterinae\", \"melalaikan\", \"melebih-lebihkan\", \"mellitz\", \"meluncurkan\", \"membekas\", \"membrane-independent\", \"memiliki\", \"memory-fading\", \"memperlebar\", \"men-only\", \"mencegah\", \"mendesak\", \"mengabortus\", \"mengasyikkan\", \"mengganti\", \"menghebohkan\", \"mengkhayalkan\", \"mengusahakan\", \"menjernihkan\", \"mentation\", \"menyamaratakan\", \"menyukai\", \"mercenary\", \"mereproduksi\", \"merna\", \"meseems\", \"mesoscutal\", \"metabolism\", \"metal-tinged\", \"metastannate\", \"method-insensitive\", \"metrics-driven\", \"mezzo-mezzo\", \"microbial\", \"microhepatia\", \"microservices\", \"middle-sized\", \"mignon\", \"militant\", \"milliampere\", \"mimeoing\", \"mindsets\", \"minimal\", \"minoritas\", \"mirey\", \"misanthropy\", \"misciting\", \"miserable\", \"misinformant\", \"misogynous\", \"missbrauch\", \"mistaken\", \"miszone\", \"mittle\", \"mobil\", \"model\", \"modernly-haired\", \"moeck\", \"mokane\", \"molle\", \"monandrous\", \"mongeese\", \"monoacids\", \"monogenies\", \"monoplanist\", \"monotono\", \"monumentalise\", \"moonraking\", \"moralizer\", \"mormorare\", \"mortarless\", \"most-liked\", \"motivator\", \"moundsville\", \"movability\", \"msn\", \"muddleheaded\", \"muktar\", \"multi-finned\", \"multi-valved\", \"multilingual\", \"multiplisitas\", \"mumblingly\", \"muntins\", \"muscle-derived\", \"musicophobic\", \"musty-smelling\", \"mutsuddy\", \"myelofibrosis\", \"myrmecological\", \"myxocyte\", \"nachwirkung\", \"naive-looking\", \"nanoelectronics\", \"narcotic-based\", \"narrowhearted\", \"nation-specific\", \"naturalistisch\", \"nauwkeurig\", \"near-sightedness\", \"necessario\", \"nederland\", \"negatory\", \"neighborliness\", \"neodesha\", \"nephrophthisis\", \"nescience\", \"network-oriented\", \"neurol\", \"neutraliseren\", \"newline\", \"nga\", \"nickerson\", \"niedrigste\", \"night-related\", \"nimbi\", \"nippur\", \"nitrogen-fertilized\", \"no-video\", \"nodulizing\", \"nominated\", \"non-airliftable\", \"non-automated\", \"non-carbonaceous\", \"non-commercial\", \"non-contractible\", \"non-degeneration\", \"non-dogmatism\", \"non-european-ness\", \"non-flattenable\", \"non-glacial\", \"non-ideological\", \"non-invertibility\", \"non-lipid-dependent\", \"non-membrane-permeable\", \"non-neurogenic\", \"non-paralyzed\", \"non-plasmabile\", \"non-proprietary\", \"non-regulation\", \"non-rna-associated\", \"non-setting\", \"non-sporulating\", \"non-tacky\", \"non-traveler\", \"non-volatile\", \"nonactualities\", \"nonapproved\", \"noncausally\", \"noncompliance\", \"noncontrollably\", \"nondemocratic\", \"nondissident\", \"nonerotic\", \"nonfebrile\", \"nongratification\", \"noninfinite\", \"nonliterality\", \"nonmyopically\", \"nonparticipatory\", \"nonpracticableness\", \"nonquota\", \"nonresponsible\", \"nonsibilant\", \"nonsubstituted\", \"nontransparentness\", \"nonvocalic\", \"normaliser\", \"northerlies\", \"not-for-profit-operated\", \"notificar\", \"noveletist\", \"nu\", \"nugmw\", \"numinism\", \"nutrient-dependent\", \"nyctipithecine\", \"obbediente\", \"obituary\", \"obligation-driven\", \"obscenities\", \"obsolescence\", \"obtrusively\", \"occipitobasilar\", \"oceanology\", \"octogenarian\", \"odin\", \"oedipal\", \"off-the-shoulder\", \"officialistic\", \"oggetto\", \"oil-reliant\", \"okupasi\", \"oligarchy\", \"olympiads\", \"omnium-gatherum\", \"onbevoegd\", \"one-foot\", \"onestamente\", \"onside\", \"oomph\", \"open-end\", \"operation-based\", \"opinar\", \"oplichten\", \"oppressing\", \"optimizable\", \"oral\", \"orchestrate\", \"ordinary-themed\", \"organisiert\", \"organs\", \"originable\", \"ornament\", \"orpines\", \"orthoxazin\", \"osmium\", \"ostendere\", \"ostracization\", \"otolaryngologist\", \"ousting\", \"outbred\", \"outdwelt\", \"outhowled\", \"outpocketing\", \"outsail\", \"outstinging\", \"ouvertement\", \"over-indebted\", \"overall\", \"overburdened\", \"overcontrolled\", \"overdramatic\", \"overfeed\", \"overheats\", \"overlayer\", \"overmost\", \"overpowerment\", \"override\", \"oversight\", \"overstring\", \"overtumble\", \"ovibovine\", \"oxalan\", \"oxygen-acetylene\", \"ozokerite\", \"pacifism\", \"padri\", \"pagus\", \"pakatan\", \"palatelike\", \"paliar\", \"palmistry\", \"pamphleteer\", \"pandilla\", \"panne\", \"pantomime\", \"papism\", \"paradichlorobenzene\", \"parallel\", \"paranoias\", \"paratuberculin\", \"parenchyma\", \"parir\", \"parodying\", \"parsonhood\", \"participation-promoting\", \"partitional\", \"pases\", \"passion-stung\", \"pastorali\", \"pathetic-looking\", \"patrician-influenced\", \"paucitas\", \"pawnbrokeress\", \"peace-induced\", \"peartly\", \"peculiaridad\", \"pediatric-onset\", \"peer-supported\", \"pelargomorphae\", \"pelts\", \"pemotongan\", \"pendentive\", \"pengawal\", \"peninsular\", \"pensabilmente\", \"pentite\", \"people-focused\", \"perak\", \"perchlorate\", \"peremption\", \"perform\", \"perianthial\", \"perilling\", \"peripters\", \"perkembangan\", \"permits\", \"perpetuar-se\", \"persist\", \"personification\", \"persuasione\", \"perv\", \"pessimize\", \"petitor\", \"petulantia\", \"phalanx\", \"pharyngolith\", \"phil-african\", \"philophile\", \"phoebads\", \"phosphokinase\", \"photodetector\", \"photonuclear\", \"phr\", \"phyllopoda\", \"phytochemical\", \"pibgorn\", \"pictorial\", \"pierceable\", \"pigmentize\", \"pillagingly\", \"pinch\", \"pinnacled\", \"pipeful\", \"pishogue\", \"piton\", \"placement-dependent\", \"plainer\", \"planiform\", \"plasmid\", \"platinating\", \"playa\", \"pleasuremonger\", \"pleospora\", \"ploat\", \"plugin\", \"pluralitas\", \"pneumomycosis\", \"podiatries\", \"poinard\", \"polarily\", \"poliorcetic\", \"polluters\", \"polycephaly\", \"polylexemic\", \"polypragmatism\", \"pomeroyton\", \"pontificate\", \"poorly-paid\", \"popularly\", \"porphyries\", \"portmanteau\", \"positiv\", \"post-colonial\", \"postbursal\", \"postlaryngal\", \"postulate\", \"potentiometer\", \"poults\", \"power-loomed\", \"practically-oriented\", \"praktiker\", \"pre-assumption\", \"pre-graduation\", \"preactiveness\", \"prebiological\", \"precio\", \"precommuning\", \"predarkness\", \"predicated\", \"preeing\", \"preference-driven\", \"prehandle\", \"prejudge\", \"premeditatedly\", \"prenoon\", \"prepartaking\", \"prequoted\", \"prescription\", \"preservational\", \"pressure-driven\", \"presumptuous\", \"prethrill\", \"preventively\", \"price-related\", \"primario\", \"principato\", \"prismatic\", \"privato\", \"pro-corporate\", \"pro-natalist\", \"proactively\", \"problemist\", \"processing-prioritized\", \"proctodeal\", \"product-based\", \"profanamente\", \"professors\", \"profligare\", \"programming-centric\", \"project-financed\", \"proliquor\", \"promising-seeming\", \"pronominal\", \"propends\", \"proportion-independent\", \"prorogation\", \"prospects\", \"protected-seed\", \"proteomics-based\", \"protocol-neutral\", \"prototypically\", \"proveitosamente\", \"provocatie\", \"prudish\", \"pseudo-adverbial\", \"pseudoepileptic\", \"pseudosuicidal\", \"psychologist\", \"pterygobranchiate\", \"publicist\", \"pudgily\", \"pulchritudes\", \"pulse-based\", \"punctuation\", \"puntsman\", \"purger\", \"purse-snatching\", \"putanism\", \"pycnogonoid\", \"pyrites\", \"qindar\", \"quadroon\", \"quality-dependent\", \"quarter-sheet\", \"quasi-desolate\", \"quasi-miserably\", \"quatorzain\", \"querelleur\", \"quick-return\", \"quincentenary\", \"quintus\", \"québécois\", \"raceme\", \"radiance-inspired\", \"radikal\", \"radiotransparent\", \"raging\", \"rainier\", \"rambler\", \"rancell\", \"rannel\", \"rapping\", \"rasio\", \"rathole\", \"rattled\", \"raw-bone\", \"re-administer\", \"re-embracement\", \"re-filming\", \"re-reproach\", \"reabsorption\", \"readdress\", \"reaktion\", \"realness\", \"rearer\", \"reattachably\", \"reblown\", \"recalibrated\", \"recelebrate\", \"recherché\", \"recklessness\", \"recoilless\", \"reconcilably\", \"reconstructable\", \"recovery-independent\", \"rectoplasty\", \"red-flanked\", \"reddito\", \"rediffuser\", \"redress\", \"redundancy-induced\", \"reemployment\", \"refederation\", \"reflecteren\", \"reformistly\", \"refugiar-se\", \"regelkonform\", \"regioselective\", \"regressionist\", \"reh\", \"reifen\", \"reinforcement\", \"reinventarsi\", \"rejudge\", \"relativenesses\", \"relevant\", \"reline\", \"remargin\", \"remineralizing\", \"remote-incompatible\", \"renaissances\", \"rennen\", \"renyah\", \"reparation\", \"reperio\", \"replicability\", \"repository\", \"reprimand\", \"reprotection\", \"reputably\", \"reroute\", \"reselection\", \"reshunt\", \"resistant\", \"resonant\", \"respectful-looking\", \"responding\", \"restaurant-independent\", \"restrains\", \"resultancy\", \"retaliated\", \"retin\", \"retransmissions\", \"retrognathism\", \"reunition\", \"revenue-decreasing\", \"reviewed\", \"revocare\", \"rewire\", \"rhesus\", \"rhombohedron\", \"riappacificarsi\", \"ricchezza\", \"ricksha\", \"rider\", \"rifinito\", \"right-of-center-led\", \"rigoureusement\", \"rimple\", \"rinks\", \"ripon\", \"risentirsi\", \"risollevarsi\", \"ritroso\", \"riversarsi\", \"rna-utilizing\", \"robes\", \"rock-tinged\", \"roentgenologic\", \"romana\", \"rondar\", \"ropable\", \"rosette\", \"rotifers\", \"roughdry\", \"roupit\", \"royalist\", \"rubiaceae\", \"rudo\", \"ruinousness\", \"rumour\", \"rural-dependent\", \"rustic-style\", \"s\", \"saccharate\", \"sacrifice\", \"safari\", \"sahte\", \"saladin\", \"salientar\", \"salsifies\", \"salvaguardar\", \"sampan\", \"sandalwood-scented\", \"sanguinaria\", \"sao\", \"sarcasticalness\", \"sashless\", \"satisfied\", \"sausage\", \"sawmill\", \"sbocciato\", \"scalfire\", \"scantily\", \"scarlet-gowned\", \"scenarioization\", \"schaubild\", \"schiamazzare\", \"schlafend\", \"schnecke\", \"schoonheid\", \"schüler\", \"sciophilous\", \"scolare\", \"sconveniente\", \"scorrettamente\", \"scowdering\", \"screech\", \"scriptoria\", \"scrutinizing\", \"scutages\", \"sea-scented\", \"searchable\", \"sebutan\", \"secrecy\", \"secundiparous\", \"sedikit\", \"seemed\", \"segue\", \"sejant\", \"selectivo\", \"self-antigenic\", \"self-conceitedly\", \"self-descriptive\", \"self-evidently\", \"self-hating\", \"self-leveler\", \"self-praise\", \"self-review\", \"self-upbraiding\", \"semaphore\", \"semiacid\", \"semidetached\", \"semimythic\", \"semireflexively\", \"sempiternous\", \"sennett\", \"senso\", \"sentries\", \"septangled\", \"sequestered\", \"sergeant-majorship\", \"seroreaction\", \"service\", \"sesquisulphide\", \"setts\", \"sex\", \"sezionare\", \"sgarbatamente\", \"shade-providing\", \"shakhty\", \"shandy\", \"sharklike\", \"she-captain\", \"sheetrock\", \"shepherds\", \"shilly-shallied\", \"shirline\", \"shoelace\", \"short-distance\", \"shortwave\", \"showy-leaved\", \"shrunkenly\", \"siap\", \"sicko\", \"sidestep\", \"sighted\", \"significand\", \"silenzioso\", \"siloxane-containing\", \"similaire\", \"simplifiability\", \"sincere\", \"single-faith\", \"single-spot\", \"sinister-looking\", \"sinzer\", \"sister\", \"sitzkrieg\", \"sizeist\", \"sketch-book\", \"skill-retarding\", \"skirmish\", \"skylarker\", \"slantways\", \"sleathy\", \"sleuthed\", \"slipformed\", \"slothfully\", \"slubberingly\", \"small\", \"smartboard\", \"smilax\", \"smoketight\", \"smp\", \"snack-rich\", \"snaste\", \"snipped\", \"snow-winged\", \"snugnesses\", \"sobregiro\", \"societies\", \"sofern\", \"softens\", \"soiree\", \"solear\", \"solidated\", \"soltar\", \"somebodies\", \"song-inspired\", \"soothsayership\", \"soquel\", \"sortability\", \"sottolineato\", \"sound-emitting\", \"soused\", \"sovranties\", \"spade-trenched\", \"sparen\", \"spastic\", \"special-purpose\", \"speckle-skinned\", \"speech-triggered\", \"spelling\", \"sperren\", \"spherulate\", \"spigliato\", \"spinning-house\", \"spiritosamente\", \"splaymouthed\", \"spoglio\", \"spookological\", \"sportbezogen\", \"sprawiedliwy\", \"springled\", \"spunkiness\", \"squamoparietal\", \"squawker\", \"squish\", \"stable-wristed\", \"stage-blanks\", \"stakeholder-centricity\", \"stanchel\", \"standoffish\", \"starburst\", \"starving\", \"statewide\", \"statuto\", \"stearins\", \"stegocephalia\", \"stenting\", \"stereotaxic\", \"steunen\", \"stiff-haired\", \"stima\", \"stipato\", \"stocken\", \"stomal\", \"stooping\", \"storrs\", \"stradivarius\", \"strait-knotted\", \"strategic\", \"streaks\", \"strepent\", \"strictly\", \"strittig\", \"strongheadedness\", \"strumectomy\", \"studied\", \"stunts\", \"styled\", \"subadditively\", \"subcollateral\", \"subduably\", \"subincident\", \"sublevado\", \"submit\", \"subpopulation\", \"subside\", \"substantify\", \"subtlety-sensitive\", \"subversive\", \"succulence\", \"suedine\", \"sugarland\", \"sulcular\", \"sulphoncyanine\", \"summer-fallow\", \"sun-filled\", \"sungguhpun\", \"superaccumulate\", \"supercongested\", \"superfluidez\", \"superioridad\", \"superpro\", \"supertoleration\", \"suppletories\", \"supposes\", \"suprimirse\", \"surgically-managed\", \"surriscaldarsi\", \"suspendre\", \"susurro\", \"svilupparsi\", \"swappable\", \"sweeper\", \"swift-handed\", \"switchback\", \"sydney\", \"sympatheticity\", \"synchronisieren\", \"synopsis\", \"syphon\", \"szene\", \"tabulate\", \"tactilely\", \"tail-piece\", \"takt\", \"tallaged\", \"tamed\", \"tangle-prone\", \"taped\", \"tarboosh\", \"tarring\", \"tastably\", \"taunter\", \"taxidermy\", \"teaching-focused\", \"teashop\", \"technician-monitored\", \"technology-pessimist\", \"teeny-weeny\", \"tele-\", \"telepath\", \"telltale\", \"tempest-tossed\", \"ten-mile\", \"tenderse\", \"tensionar\", \"tequila\", \"tergantung\", \"terminal-based\", \"terraba\", \"terror-breeding\", \"tesler\", \"testingly\", \"tetraphenol\", \"texting\", \"thanklessly\", \"theligonaceae\", \"theoretically\", \"theriomorphic\", \"thermotaxis\", \"thickening\", \"thinkableness\", \"thirty-nine\", \"thoroughfooting\", \"threat-avoidant\", \"three-way\", \"thrombopenia\", \"thunder-shod\", \"thyrotoxic\", \"tidest\", \"tight-sleeved\", \"timandra\", \"timeline\", \"tin-plate\", \"tinsel\", \"tiptoe\", \"titanous\", \"tmrs\", \"toe-dancing\", \"tokenize\", \"tomahawk\", \"tonguedoughty\", \"tooth-winged\", \"topknot\", \"toreador\", \"torsel\", \"totalement\", \"touchscreen-based\", \"tow-spinning\", \"toxify\", \"tracheloclavicular\", \"trader\", \"traduzione\", \"traiking\", \"trampage\", \"trans-subjective\", \"transfiguration\", \"transiently\", \"transmission\", \"transponible\", \"trapnested\", \"tratamiento\", \"travestying\", \"treddle\", \"tremor-related\", \"tri-\", \"tributarily\", \"tricuspal\", \"trijunction\", \"trinocular\", \"trippily\", \"triturado\", \"troezenian\", \"tropologically\", \"trovarsi\", \"trumpet\", \"truth-finder\", \"tub-grown\", \"tucuna\", \"tumor-inhibiting\", \"tupuna\", \"turista\", \"turpitudo\", \"tux\", \"twelvescore\", \"twice-restored\", \"twistingly\", \"two-piled\", \"typal\", \"typobar\", \"ubicarsi\", \"ui-specific\", \"ulothrix\", \"ultranationalist\", \"umbrellaing\", \"umwickeln\", \"unabrasive\", \"unaddressable\", \"unalienableness\", \"unannoyed\", \"unaromatically\", \"unattainable\", \"unbaffling\", \"unbegilt\", \"unbeveled\", \"unbohemianize\", \"unbuffable\", \"uncaroled\", \"uncharming\", \"unclean\", \"uncombinableness\", \"uncompromising\", \"unconscionable\", \"unconventionalist\", \"uncradled\", \"undaintiness\", \"undekoriert\", \"under-fueled\", \"underburden\", \"undereducated\", \"underinsurance\", \"underpay\", \"underscored\", \"undersurface\", \"undeserved\", \"undisabled\", \"undoable\", \"undynamited\", \"unembellished-seeming\", \"unenthroned\", \"unethical-appearing\", \"unexpectant\", \"unfanged\", \"unfetching\", \"unfogged\", \"unframed\", \"ungastlich\", \"ungill\", \"ungreen\", \"unhardily\", \"unhipness\", \"uniaxially\", \"unifoliate\", \"unimitably\", \"uninfested\", \"unintelligibly\", \"union-organized\", \"unissued\", \"unjoinable\", \"unlabialize\", \"unlikenesses\", \"unlustrously\", \"unmatureness\", \"unminister\", \"unmould\", \"unnerve\", \"unofficially\", \"unpacifiable\", \"unpeel\", \"unpigmented\", \"unpolished-looking\", \"unpreposterous\", \"unprojectable\", \"unpurposive\", \"unreadable\", \"unrecyclability\", \"unrelentor\", \"unrepresentativeness\", \"unretired\", \"unrolling\", \"unsanctity\", \"unscoffed\", \"unself-opinionated\", \"unshapely-legged\", \"unsincerity\", \"unsocket\", \"unspirited\", \"unsteady-gazed\", \"unstudied\", \"unsupplied\", \"unsystematicity\", \"untensing\", \"unthankfulness\", \"untoned-legged\", \"untreue\", \"ununterbrochen\", \"unverbogen\", \"unvividness\", \"unweighting\", \"unwontedly\", \"upas\", \"upholstress\", \"uprive\", \"upturn\", \"urban-planning-focused\", \"urgence\", \"urtarsi\", \"user-friendly\", \"usurpatory\", \"utricles\", \"v-particle\", \"vacuoles\", \"vague-worded\", \"valiants\", \"valse\", \"vandalisme\", \"vapor-creating\", \"variantly\", \"vascularity\", \"vaudeville\", \"vegetarian-friendly\", \"velleity\", \"veneficious\", \"ventifact\", \"veralterung\", \"verbleib\", \"verdorrt\", \"verfoeien\", \"veridic\", \"verlangt\", \"verminy\", \"verrechnet\", \"verschwiegenheit\", \"versteckt\", \"vertrekken\", \"verwijten\", \"vesperal\", \"vexation\", \"vicario\", \"victorian\", \"vidović\", \"vigorous-appearing\", \"villosity\", \"vinta\", \"vir\", \"virtuous\", \"visione\", \"vitalistically\", \"vituperio\", \"vmsize\", \"voice-commandable\", \"volgarizzare\", \"volume-centric\", \"von\", \"vorhand\", \"voter\", \"vuggy\", \"waaghalzig\", \"wage-suppressing\", \"waist-low\", \"walkingly\", \"wanderers\", \"wardrober\", \"warpwise\", \"waskom\", \"water-caused\", \"waterbed\", \"watson\", \"wayfarers\", \"wealth-yielding\", \"weather-wasted\", \"wedlock\", \"wegsehen\", \"weightless\", \"well-adjusted\", \"well-counterfeited\", \"well-grassed\", \"well-placed\", \"well-tagged\", \"weltering\", \"west-leaning\", \"wet-lipped\", \"whatchamacallit\", \"whensoever\", \"whinged\", \"whistler\", \"whiteside\", \"whoop\", \"wide-eyed\", \"widthwise\", \"wild-williams\", \"willowers\", \"wind-pollinated\", \"windwayward\", \"winkle\", \"wire-straightening\", \"wishingly\", \"within-species\", \"woe-weary\", \"womanize\", \"wood-derived\", \"woodworking\", \"wordbook\", \"worker-initiated\", \"world-bound\", \"worm-eating\", \"wort\", \"wraxling\", \"writers\", \"wye\", \"xenopodidae\", \"y-warn\", \"yardman\", \"yeeuck\", \"yerbales\", \"yobbos\", \"youth-oriented\", \"zachery\", \"zaruri\", \"zendah\", \"zerumbet\", \"zionist-leaning\", \"zoochemistry\", \"zozobra\", \"zurechtweisen\", \"zwangslage\", \"éventail\"];\n\n\n//# sourceURL=webpack://llexicom/./scripts/table.ts?");

/***/ }),

/***/ "./scripts/word.mustache":
/*!*******************************!*\
  !*** ./scripts/word.mustache ***!
  \*******************************/
/***/ ((module) => {

"use strict";
eval("module.exports = \"<!DOCTYPE html>\\n<div class=\\\"word-container\\\">\\n  <div class=\\\"header-section\\\">\\n    <h1 class=\\\"word-title\\\">{{word}}</h1>\\n  </div>\\n\\n  {{#pronunciation}}\\n  <div class=\\\"pronounce-section\\\">\\n    {{#ipa}}\\n    <div class=\\\"ipa\\\">{{ipa}}</div>\\n    {{/ipa}}\\n\\n    {{#ipa_uk}}\\n    <div class=\\\"ipa\\\">(英){{ipa_uk}}</div>\\n    {{/ipa_uk}}\\n\\n    {{#ipa_us}}\\n    <div class=\\\"ipa\\\">(米){{ipa_us}}</div>\\n    {{/ipa_us}}\\n\\n    {{#syllables}}\\n    <div class=\\\"syllable\\\">\\n      ({{syllables}})\\n    </div>\\n    {{/syllables}}\\n  </div>\\n  {{/pronunciation}}\\n\\n  <div class=\\\"priority-box\\\">\\n    <span class=\\\"priority\\\">{{priority}}</span>\\n  </div>\\n  \\n  {{#meanings}}\\n  <section class=\\\"section\\\">\\n    {{#.}}\\n    <div class=\\\"meaning-card\\\">\\n      <div class=\\\"meaning-title\\\">\\n        <div class=\\\"number\\\">\\n          {{index_plus_1}}.\\n        </div>\\n        <span class=\\\"part-of-speech\\\">\\n          {{part_of_speech_translated}}\\n        </span>\\n        <div class=\\\"definition-box\\\">\\n          <p class=\\\"definition\\\">{{definition}}</p>\\n        </div>\\n        {{#transitivity_translated}}\\n        <span class=\\\"transitivity-badge\\\">\\n          {{transitivity_translated}}\\n        </span>\\n        {{/transitivity_translated}}\\n      </div>\\n      <div class=\\\"meaning-content\\\">\\n\\t<div class=\\\"content\\\">\\n          <p class=\\\"english-definition\\\">{{english_definition}}</p>\\n          {{#examples}}\\n          {{^empty}}\\n          <ul class=\\\"example-list\\\">\\n            {{#.}}\\n            <li class=\\\"example-item\\\">\\n              <p class=\\\"sentence\\\">\\\"{{sentence}}\\\"</p>\\n              <p class=\\\"translation\\\"><em>{{translation}}</em></p>\\n            </li>\\n            {{/.}}\\n          </ul>\\n          {{/empty}}\\n          {{/examples}}\\n\\n          <div class=\\\"related-terms-group\\\">\\n\\t    {{#has_collocations}}\\n            <div class=\\\"related-column\\\">\\n              <h4>コロケーション:</h4>\\n              <ul class=\\\"simple-list\\\">\\n\\t\\t{{#collocations}}\\n\\t\\t{{^empty}}\\n\\t\\t<li>{{.}}</li>\\n\\t\\t{{/empty}}\\n\\t\\t{{/collocations}}\\n              </ul>\\n            </div>\\n\\t    {{/has_collocations}}\\n\\t    \\n\\t    {{#has_synonyms}}\\n            <div class=\\\"related-column\\\">\\n              <h4>類義語:</h4>\\n              <ul class=\\\"simple-list\\\">\\n\\t\\t{{#synonyms}}\\n\\t\\t{{^empty}}\\n\\t\\t<li>{{.}}</li>\\n\\t\\t{{/empty}}\\n\\t\\t{{/synonyms}}\\n              </ul>\\n            </div>\\n\\t    {{/has_synonyms}}\\n\\n\\t    {{#has_antonyms}}\\n            <div class=\\\"related-column\\\">\\n              <h4>対義語:</h4>\\n              <ul class=\\\"simple-list\\\">\\n\\t\\t{{#antonyms}}\\n\\t\\t<li>{{.}}</li>\\n\\t\\t{{/antonyms}}\\n\\t      </ul>\\n            </div>\\n\\t    {{/has_antonyms}}\\n          </div>\\n\\t</div>\\n      </div>\\n    </div>\\n    {{/.}}\\n  </section>\\n  {{/meanings}}\\n\\n  {{#readability_explanation}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">解説</h2>\\n    <div class=\\\"readability-explanation\\\">\\n      <p class=\\\"readability-level\\\"><strong>対象レベル:</strong> {{level}}</p>\\n      <p>{{{readability_explanation.text}}}</p>\\n    </div>\\n  </section>\\n  {{/readability_explanation}}\\n\\n  {{#etymology}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">語源</h2>\\n    <p>{{value}}</p>\\n  </section>\\n  {{/etymology}}\\n\\n\\n  {{#has_inflection_forms}}\\n  {{#inflection}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">活用</h2>\\n    {{#noun_plural}}\\n    <h3>名詞の形:</h3>\\n    <dl class=\\\"definition-list\\\">\\n      <dt>単数形</dt>\\n      <dd>{{noun_singular}}</dd>\\n      <dt>複数形</dt>\\n      <dd>{{noun_plural}}</dd>\\n    </dl>\\n    {{/noun_plural}}\\n    {{#verb_forms}}\\n    <h3>動詞の形:</h3>\\n    <dl class=\\\"definition-list\\\">\\n      <dt>現在形</dt>\\n      <dd>{{present_simple_joined}}</dd>\\n      <dt>過去形</dt>\\n      <dd>{{past_simple}}</dd>\\n      <dt>過去分詞</dt>\\n      <dd>{{past_participle}}</dd>\\n      <dt>現在分詞</dt>\\n      <dd>{{present_participle}}</dd>\\n    </dl>\\n    {{/verb_forms}}\\n  </section>\\n  {{/inflection}}\\n  {{/has_inflection_forms}}\\n\\n  {{#usage_notes}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">使用上の注意</h2>\\n    <div class=\\\"note-box\\\">\\n      {{{usage_notes.explanation}}}\\n    </div>\\n  </section>\\n  {{/usage_notes}}\\n\\n  {{#common_mistakes}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">よくある間違い</h2>\\n    {{#common_mistakes}}\\n    {{#examples}}\\n    {{^empty}}\\n    {{#.}}\\n    <div class=\\\"mistake-item\\\">\\n      <h4>間違い {{_index_plus_1}}:</h4>\\n      <p><span class=\\\"incorrect-example\\\">{{incorrect}}</span></p>\\n      <p><span class=\\\"correct-example\\\">{{correct}}</span></p>\\n      <p class=\\\"note-text\\\"><strong>補足:</strong> {{note}}</p>\\n    </div>\\n    {{/.}}\\n    {{/empty}}\\n    {{/examples}}\\n    {{/common_mistakes}}\\n  </section>\\n  {{/common_mistakes}}\\n\\n  {{#related_words}}\\n  {{#has_related_words}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">関連語句 <small class=\\\"sub-title\\\">(Related Words)</small></h2>\\n    <div class=\\\"related-terms-group\\\">\\n      {{#has_derivatives}}\\n      <div class=\\\"related-column\\\">\\n        <h3>派生語:</h3>\\n        <ul class=\\\"simple-list\\\">\\n\\t  {{#derivatives}}\\n          <li>{{.}}</li>\\n\\t  {{/derivatives}}\\n        </ul>\\n      </div>\\n      {{/has_derivatives}}\\n\\n      {{#has_phrasal_verbs}}\\n      <div class=\\\"related-column\\\">\\n        <h3>句動詞:</h3>\\n        <ul class=\\\"simple-list\\\">\\n\\t  {{#phrasal_verbs}}\\n          <li>{{.}}</li>\\n\\t  {{/phrasal_verbs}}\\n        </ul>\\n      </div>\\n      {{/has_phrasal_verbs}}\\n\\n      {{#has_idioms_phrases}}\\n      <div class=\\\"related-column\\\">\\n        <h3>イディオム・慣用句:</h3>\\n        <ul class=\\\"simple-list\\\">\\n\\t  {{#idioms_phrases}}\\n          <li>{{.}}</li>\\n\\t  {{/idioms_phrases}}\\n        </ul>\\n      </div>\\n      {{/has_idioms_phrases}}\\n\\n    </div>\\n  </section>\\n  {{/has_related_words}}\\n  {{/related_words}}\\n\\n  {{#level_frequency}}\\n  {{#level_frequency}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">レベル・頻度</h2>\\n    <dl class=\\\"definition-list\\\">\\n      <dt>CEFR</dt>\\n      <dd>{{CEFR}}</dd>\\n      <dt>Google Ngram 頻度</dt>\\n      <dd>{{frequency_google_ngram}}</dd>\\n    </dl>\\n  </section>\\n  {{/level_frequency}}\\n  {{/level_frequency}}\\n\\n  {{#has_example_sentences}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">追加例文</h2>\\n    <ul class=\\\"additional-example-list\\\">\\n      {{#example_sentences}}\\n      {{^empty}}\\n      {{#.}}\\n      <li class=\\\"additional-example-item\\\">\\n        <p class=\\\"sentence\\\">\\\"{{{sentence}}}\\\"</p>\\n        <p class=\\\"translation\\\"><em>{{translation}}</em></p>\\n        <p class=\\\"meta-info\\\">\\n          タイプ: <span class=\\\"badge\\\">{{type_translated}}</span>,\\n          カテゴリ: <span class=\\\"badge\\\">{{meaning_category}}</span>\\n        </p>\\n      </li>\\n      {{/.}}\\n      {{/empty}}\\n      {{/example_sentences}}\\n    </ul>\\n  </section>\\n  {{/has_example_sentences}}\\n</div>\\n\";\n\n//# sourceURL=webpack://llexicom/./scripts/word.mustache?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./scripts/index.ts");
/******/ 	
/******/ })()
;