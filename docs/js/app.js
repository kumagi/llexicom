/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/hogan.js/lib/compiler.js":
/*!***********************************************!*\
  !*** ./node_modules/hogan.js/lib/compiler.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n(function (Hogan) {\n  // Setup regex  assignments\n  // remove whitespace according to Mustache spec\n  var rIsWhitespace = /\\S/,\n      rQuot = /\\\"/g,\n      rNewline =  /\\n/g,\n      rCr = /\\r/g,\n      rSlash = /\\\\/g,\n      rLineSep = /\\u2028/,\n      rParagraphSep = /\\u2029/;\n\n  Hogan.tags = {\n    '#': 1, '^': 2, '<': 3, '$': 4,\n    '/': 5, '!': 6, '>': 7, '=': 8, '_v': 9,\n    '{': 10, '&': 11, '_t': 12\n  };\n\n  Hogan.scan = function scan(text, delimiters) {\n    var len = text.length,\n        IN_TEXT = 0,\n        IN_TAG_TYPE = 1,\n        IN_TAG = 2,\n        state = IN_TEXT,\n        tagType = null,\n        tag = null,\n        buf = '',\n        tokens = [],\n        seenTag = false,\n        i = 0,\n        lineStart = 0,\n        otag = '{{',\n        ctag = '}}';\n\n    function addBuf() {\n      if (buf.length > 0) {\n        tokens.push({tag: '_t', text: new String(buf)});\n        buf = '';\n      }\n    }\n\n    function lineIsWhitespace() {\n      var isAllWhitespace = true;\n      for (var j = lineStart; j < tokens.length; j++) {\n        isAllWhitespace =\n          (Hogan.tags[tokens[j].tag] < Hogan.tags['_v']) ||\n          (tokens[j].tag == '_t' && tokens[j].text.match(rIsWhitespace) === null);\n        if (!isAllWhitespace) {\n          return false;\n        }\n      }\n\n      return isAllWhitespace;\n    }\n\n    function filterLine(haveSeenTag, noNewLine) {\n      addBuf();\n\n      if (haveSeenTag && lineIsWhitespace()) {\n        for (var j = lineStart, next; j < tokens.length; j++) {\n          if (tokens[j].text) {\n            if ((next = tokens[j+1]) && next.tag == '>') {\n              // set indent to token value\n              next.indent = tokens[j].text.toString()\n            }\n            tokens.splice(j, 1);\n          }\n        }\n      } else if (!noNewLine) {\n        tokens.push({tag:'\\n'});\n      }\n\n      seenTag = false;\n      lineStart = tokens.length;\n    }\n\n    function changeDelimiters(text, index) {\n      var close = '=' + ctag,\n          closeIndex = text.indexOf(close, index),\n          delimiters = trim(\n            text.substring(text.indexOf('=', index) + 1, closeIndex)\n          ).split(' ');\n\n      otag = delimiters[0];\n      ctag = delimiters[delimiters.length - 1];\n\n      return closeIndex + close.length - 1;\n    }\n\n    if (delimiters) {\n      delimiters = delimiters.split(' ');\n      otag = delimiters[0];\n      ctag = delimiters[1];\n    }\n\n    for (i = 0; i < len; i++) {\n      if (state == IN_TEXT) {\n        if (tagChange(otag, text, i)) {\n          --i;\n          addBuf();\n          state = IN_TAG_TYPE;\n        } else {\n          if (text.charAt(i) == '\\n') {\n            filterLine(seenTag);\n          } else {\n            buf += text.charAt(i);\n          }\n        }\n      } else if (state == IN_TAG_TYPE) {\n        i += otag.length - 1;\n        tag = Hogan.tags[text.charAt(i + 1)];\n        tagType = tag ? text.charAt(i + 1) : '_v';\n        if (tagType == '=') {\n          i = changeDelimiters(text, i);\n          state = IN_TEXT;\n        } else {\n          if (tag) {\n            i++;\n          }\n          state = IN_TAG;\n        }\n        seenTag = i;\n      } else {\n        if (tagChange(ctag, text, i)) {\n          tokens.push({tag: tagType, n: trim(buf), otag: otag, ctag: ctag,\n                       i: (tagType == '/') ? seenTag - otag.length : i + ctag.length});\n          buf = '';\n          i += ctag.length - 1;\n          state = IN_TEXT;\n          if (tagType == '{') {\n            if (ctag == '}}') {\n              i++;\n            } else {\n              cleanTripleStache(tokens[tokens.length - 1]);\n            }\n          }\n        } else {\n          buf += text.charAt(i);\n        }\n      }\n    }\n\n    filterLine(seenTag, true);\n\n    return tokens;\n  }\n\n  function cleanTripleStache(token) {\n    if (token.n.substr(token.n.length - 1) === '}') {\n      token.n = token.n.substring(0, token.n.length - 1);\n    }\n  }\n\n  function trim(s) {\n    if (s.trim) {\n      return s.trim();\n    }\n\n    return s.replace(/^\\s*|\\s*$/g, '');\n  }\n\n  function tagChange(tag, text, index) {\n    if (text.charAt(index) != tag.charAt(0)) {\n      return false;\n    }\n\n    for (var i = 1, l = tag.length; i < l; i++) {\n      if (text.charAt(index + i) != tag.charAt(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // the tags allowed inside super templates\n  var allowedInSuper = {'_t': true, '\\n': true, '$': true, '/': true};\n\n  function buildTree(tokens, kind, stack, customTags) {\n    var instructions = [],\n        opener = null,\n        tail = null,\n        token = null;\n\n    tail = stack[stack.length - 1];\n\n    while (tokens.length > 0) {\n      token = tokens.shift();\n\n      if (tail && tail.tag == '<' && !(token.tag in allowedInSuper)) {\n        throw new Error('Illegal content in < super tag.');\n      }\n\n      if (Hogan.tags[token.tag] <= Hogan.tags['$'] || isOpener(token, customTags)) {\n        stack.push(token);\n        token.nodes = buildTree(tokens, token.tag, stack, customTags);\n      } else if (token.tag == '/') {\n        if (stack.length === 0) {\n          throw new Error('Closing tag without opener: /' + token.n);\n        }\n        opener = stack.pop();\n        if (token.n != opener.n && !isCloser(token.n, opener.n, customTags)) {\n          throw new Error('Nesting error: ' + opener.n + ' vs. ' + token.n);\n        }\n        opener.end = token.i;\n        return instructions;\n      } else if (token.tag == '\\n') {\n        token.last = (tokens.length == 0) || (tokens[0].tag == '\\n');\n      }\n\n      instructions.push(token);\n    }\n\n    if (stack.length > 0) {\n      throw new Error('missing closing tag: ' + stack.pop().n);\n    }\n\n    return instructions;\n  }\n\n  function isOpener(token, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].o == token.n) {\n        token.tag = '#';\n        return true;\n      }\n    }\n  }\n\n  function isCloser(close, open, tags) {\n    for (var i = 0, l = tags.length; i < l; i++) {\n      if (tags[i].c == close && tags[i].o == open) {\n        return true;\n      }\n    }\n  }\n\n  function stringifySubstitutions(obj) {\n    var items = [];\n    for (var key in obj) {\n      items.push('\"' + esc(key) + '\": function(c,p,t,i) {' + obj[key] + '}');\n    }\n    return \"{ \" + items.join(\",\") + \" }\";\n  }\n\n  function stringifyPartials(codeObj) {\n    var partials = [];\n    for (var key in codeObj.partials) {\n      partials.push('\"' + esc(key) + '\":{name:\"' + esc(codeObj.partials[key].name) + '\", ' + stringifyPartials(codeObj.partials[key]) + \"}\");\n    }\n    return \"partials: {\" + partials.join(\",\") + \"}, subs: \" + stringifySubstitutions(codeObj.subs);\n  }\n\n  Hogan.stringify = function(codeObj, text, options) {\n    return \"{code: function (c,p,i) { \" + Hogan.wrapMain(codeObj.code) + \" },\" + stringifyPartials(codeObj) +  \"}\";\n  }\n\n  var serialNo = 0;\n  Hogan.generate = function(tree, text, options) {\n    serialNo = 0;\n    var context = { code: '', subs: {}, partials: {} };\n    Hogan.walk(tree, context);\n\n    if (options.asString) {\n      return this.stringify(context, text, options);\n    }\n\n    return this.makeTemplate(context, text, options);\n  }\n\n  Hogan.wrapMain = function(code) {\n    return 'var t=this;t.b(i=i||\"\");' + code + 'return t.fl();';\n  }\n\n  Hogan.template = Hogan.Template;\n\n  Hogan.makeTemplate = function(codeObj, text, options) {\n    var template = this.makePartials(codeObj);\n    template.code = new Function('c', 'p', 'i', this.wrapMain(codeObj.code));\n    return new this.template(template, text, this, options);\n  }\n\n  Hogan.makePartials = function(codeObj) {\n    var key, template = {subs: {}, partials: codeObj.partials, name: codeObj.name};\n    for (key in template.partials) {\n      template.partials[key] = this.makePartials(template.partials[key]);\n    }\n    for (key in codeObj.subs) {\n      template.subs[key] = new Function('c', 'p', 't', 'i', codeObj.subs[key]);\n    }\n    return template;\n  }\n\n  function esc(s) {\n    return s.replace(rSlash, '\\\\\\\\')\n            .replace(rQuot, '\\\\\\\"')\n            .replace(rNewline, '\\\\n')\n            .replace(rCr, '\\\\r')\n            .replace(rLineSep, '\\\\u2028')\n            .replace(rParagraphSep, '\\\\u2029');\n  }\n\n  function chooseMethod(s) {\n    return (~s.indexOf('.')) ? 'd' : 'f';\n  }\n\n  function createPartial(node, context) {\n    var prefix = \"<\" + (context.prefix || \"\");\n    var sym = prefix + node.n + serialNo++;\n    context.partials[sym] = {name: node.n, partials: {}};\n    context.code += 't.b(t.rp(\"' +  esc(sym) + '\",c,p,\"' + (node.indent || '') + '\"));';\n    return sym;\n  }\n\n  Hogan.codegen = {\n    '#': function(node, context) {\n      context.code += 'if(t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),' +\n                      'c,p,0,' + node.i + ',' + node.end + ',\"' + node.otag + \" \" + node.ctag + '\")){' +\n                      't.rs(c,p,' + 'function(c,p,t){';\n      Hogan.walk(node.nodes, context);\n      context.code += '});c.pop();}';\n    },\n\n    '^': function(node, context) {\n      context.code += 'if(!t.s(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,1),c,p,1,0,0,\"\")){';\n      Hogan.walk(node.nodes, context);\n      context.code += '};';\n    },\n\n    '>': createPartial,\n    '<': function(node, context) {\n      var ctx = {partials: {}, code: '', subs: {}, inPartial: true};\n      Hogan.walk(node.nodes, ctx);\n      var template = context.partials[createPartial(node, context)];\n      template.subs = ctx.subs;\n      template.partials = ctx.partials;\n    },\n\n    '$': function(node, context) {\n      var ctx = {subs: {}, code: '', partials: context.partials, prefix: node.n};\n      Hogan.walk(node.nodes, ctx);\n      context.subs[node.n] = ctx.code;\n      if (!context.inPartial) {\n        context.code += 't.sub(\"' + esc(node.n) + '\",c,p,i);';\n      }\n    },\n\n    '\\n': function(node, context) {\n      context.code += write('\"\\\\n\"' + (node.last ? '' : ' + i'));\n    },\n\n    '_v': function(node, context) {\n      context.code += 't.b(t.v(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n    },\n\n    '_t': function(node, context) {\n      context.code += write('\"' + esc(node.text) + '\"');\n    },\n\n    '{': tripleStache,\n\n    '&': tripleStache\n  }\n\n  function tripleStache(node, context) {\n    context.code += 't.b(t.t(t.' + chooseMethod(node.n) + '(\"' + esc(node.n) + '\",c,p,0)));';\n  }\n\n  function write(s) {\n    return 't.b(' + s + ');';\n  }\n\n  Hogan.walk = function(nodelist, context) {\n    var func;\n    for (var i = 0, l = nodelist.length; i < l; i++) {\n      func = Hogan.codegen[nodelist[i].tag];\n      func && func(nodelist[i], context);\n    }\n    return context;\n  }\n\n  Hogan.parse = function(tokens, text, options) {\n    options = options || {};\n    return buildTree(tokens, '', [], options.sectionTags || []);\n  }\n\n  Hogan.cache = {};\n\n  Hogan.cacheKey = function(text, options) {\n    return [text, !!options.asString, !!options.disableLambda, options.delimiters, !!options.modelGet].join('||');\n  }\n\n  Hogan.compile = function(text, options) {\n    options = options || {};\n    var key = Hogan.cacheKey(text, options);\n    var template = this.cache[key];\n\n    if (template) {\n      var partials = template.partials;\n      for (var name in partials) {\n        delete partials[name].instance;\n      }\n      return template;\n    }\n\n    template = this.generate(this.parse(this.scan(text, options.delimiters), text, options), text, options);\n    return this.cache[key] = template;\n  }\n})( true ? exports : 0);\n\n\n//# sourceURL=webpack://llexicom/./node_modules/hogan.js/lib/compiler.js?");

/***/ }),

/***/ "./node_modules/hogan.js/lib/hogan.js":
/*!********************************************!*\
  !*** ./node_modules/hogan.js/lib/hogan.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n// This file is for use with Node.js. See dist/ for browser files.\n\nvar Hogan = __webpack_require__(/*! ./compiler */ \"./node_modules/hogan.js/lib/compiler.js\");\nHogan.Template = (__webpack_require__(/*! ./template */ \"./node_modules/hogan.js/lib/template.js\").Template);\nHogan.template = Hogan.Template;\nmodule.exports = Hogan;\n\n\n//# sourceURL=webpack://llexicom/./node_modules/hogan.js/lib/hogan.js?");

/***/ }),

/***/ "./node_modules/hogan.js/lib/template.js":
/*!***********************************************!*\
  !*** ./node_modules/hogan.js/lib/template.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*\n *  Copyright 2011 Twitter, Inc.\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nvar Hogan = {};\n\n(function (Hogan) {\n  Hogan.Template = function (codeObj, text, compiler, options) {\n    codeObj = codeObj || {};\n    this.r = codeObj.code || this.r;\n    this.c = compiler;\n    this.options = options || {};\n    this.text = text || '';\n    this.partials = codeObj.partials || {};\n    this.subs = codeObj.subs || {};\n    this.buf = '';\n  }\n\n  Hogan.Template.prototype = {\n    // render: replaced by generated code.\n    r: function (context, partials, indent) { return ''; },\n\n    // variable escaping\n    v: hoganEscape,\n\n    // triple stache\n    t: coerceToString,\n\n    render: function render(context, partials, indent) {\n      return this.ri([context], partials || {}, indent);\n    },\n\n    // render internal -- a hook for overrides that catches partials too\n    ri: function (context, partials, indent) {\n      return this.r(context, partials, indent);\n    },\n\n    // ensurePartial\n    ep: function(symbol, partials) {\n      var partial = this.partials[symbol];\n\n      // check to see that if we've instantiated this partial before\n      var template = partials[partial.name];\n      if (partial.instance && partial.base == template) {\n        return partial.instance;\n      }\n\n      if (typeof template == 'string') {\n        if (!this.c) {\n          throw new Error(\"No compiler available.\");\n        }\n        template = this.c.compile(template, this.options);\n      }\n\n      if (!template) {\n        return null;\n      }\n\n      // We use this to check whether the partials dictionary has changed\n      this.partials[symbol].base = template;\n\n      if (partial.subs) {\n        // Make sure we consider parent template now\n        if (!partials.stackText) partials.stackText = {};\n        for (key in partial.subs) {\n          if (!partials.stackText[key]) {\n            partials.stackText[key] = (this.activeSub !== undefined && partials.stackText[this.activeSub]) ? partials.stackText[this.activeSub] : this.text;\n          }\n        }\n        template = createSpecializedPartial(template, partial.subs, partial.partials,\n          this.stackSubs, this.stackPartials, partials.stackText);\n      }\n      this.partials[symbol].instance = template;\n\n      return template;\n    },\n\n    // tries to find a partial in the current scope and render it\n    rp: function(symbol, context, partials, indent) {\n      var partial = this.ep(symbol, partials);\n      if (!partial) {\n        return '';\n      }\n\n      return partial.ri(context, partials, indent);\n    },\n\n    // render a section\n    rs: function(context, partials, section) {\n      var tail = context[context.length - 1];\n\n      if (!isArray(tail)) {\n        section(context, partials, this);\n        return;\n      }\n\n      for (var i = 0; i < tail.length; i++) {\n        context.push(tail[i]);\n        section(context, partials, this);\n        context.pop();\n      }\n    },\n\n    // maybe start a section\n    s: function(val, ctx, partials, inverted, start, end, tags) {\n      var pass;\n\n      if (isArray(val) && val.length === 0) {\n        return false;\n      }\n\n      if (typeof val == 'function') {\n        val = this.ms(val, ctx, partials, inverted, start, end, tags);\n      }\n\n      pass = !!val;\n\n      if (!inverted && pass && ctx) {\n        ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);\n      }\n\n      return pass;\n    },\n\n    // find values with dotted names\n    d: function(key, ctx, partials, returnFound) {\n      var found,\n          names = key.split('.'),\n          val = this.f(names[0], ctx, partials, returnFound),\n          doModelGet = this.options.modelGet,\n          cx = null;\n\n      if (key === '.' && isArray(ctx[ctx.length - 2])) {\n        val = ctx[ctx.length - 1];\n      } else {\n        for (var i = 1; i < names.length; i++) {\n          found = findInScope(names[i], val, doModelGet);\n          if (found !== undefined) {\n            cx = val;\n            val = found;\n          } else {\n            val = '';\n          }\n        }\n      }\n\n      if (returnFound && !val) {\n        return false;\n      }\n\n      if (!returnFound && typeof val == 'function') {\n        ctx.push(cx);\n        val = this.mv(val, ctx, partials);\n        ctx.pop();\n      }\n\n      return val;\n    },\n\n    // find values with normal names\n    f: function(key, ctx, partials, returnFound) {\n      var val = false,\n          v = null,\n          found = false,\n          doModelGet = this.options.modelGet;\n\n      for (var i = ctx.length - 1; i >= 0; i--) {\n        v = ctx[i];\n        val = findInScope(key, v, doModelGet);\n        if (val !== undefined) {\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        return (returnFound) ? false : \"\";\n      }\n\n      if (!returnFound && typeof val == 'function') {\n        val = this.mv(val, ctx, partials);\n      }\n\n      return val;\n    },\n\n    // higher order templates\n    ls: function(func, cx, partials, text, tags) {\n      var oldTags = this.options.delimiters;\n\n      this.options.delimiters = tags;\n      this.b(this.ct(coerceToString(func.call(cx, text)), cx, partials));\n      this.options.delimiters = oldTags;\n\n      return false;\n    },\n\n    // compile text\n    ct: function(text, cx, partials) {\n      if (this.options.disableLambda) {\n        throw new Error('Lambda features disabled.');\n      }\n      return this.c.compile(text, this.options).render(cx, partials);\n    },\n\n    // template result buffering\n    b: function(s) { this.buf += s; },\n\n    fl: function() { var r = this.buf; this.buf = ''; return r; },\n\n    // method replace section\n    ms: function(func, ctx, partials, inverted, start, end, tags) {\n      var textSource,\n          cx = ctx[ctx.length - 1],\n          result = func.call(cx);\n\n      if (typeof result == 'function') {\n        if (inverted) {\n          return true;\n        } else {\n          textSource = (this.activeSub && this.subsText && this.subsText[this.activeSub]) ? this.subsText[this.activeSub] : this.text;\n          return this.ls(result, cx, partials, textSource.substring(start, end), tags);\n        }\n      }\n\n      return result;\n    },\n\n    // method replace variable\n    mv: function(func, ctx, partials) {\n      var cx = ctx[ctx.length - 1];\n      var result = func.call(cx);\n\n      if (typeof result == 'function') {\n        return this.ct(coerceToString(result.call(cx)), cx, partials);\n      }\n\n      return result;\n    },\n\n    sub: function(name, context, partials, indent) {\n      var f = this.subs[name];\n      if (f) {\n        this.activeSub = name;\n        f(context, partials, this, indent);\n        this.activeSub = false;\n      }\n    }\n\n  };\n\n  //Find a key in an object\n  function findInScope(key, scope, doModelGet) {\n    var val;\n\n    if (scope && typeof scope == 'object') {\n\n      if (scope[key] !== undefined) {\n        val = scope[key];\n\n      // try lookup with get for backbone or similar model data\n      } else if (doModelGet && scope.get && typeof scope.get == 'function') {\n        val = scope.get(key);\n      }\n    }\n\n    return val;\n  }\n\n  function createSpecializedPartial(instance, subs, partials, stackSubs, stackPartials, stackText) {\n    function PartialTemplate() {};\n    PartialTemplate.prototype = instance;\n    function Substitutions() {};\n    Substitutions.prototype = instance.subs;\n    var key;\n    var partial = new PartialTemplate();\n    partial.subs = new Substitutions();\n    partial.subsText = {};  //hehe. substext.\n    partial.buf = '';\n\n    stackSubs = stackSubs || {};\n    partial.stackSubs = stackSubs;\n    partial.subsText = stackText;\n    for (key in subs) {\n      if (!stackSubs[key]) stackSubs[key] = subs[key];\n    }\n    for (key in stackSubs) {\n      partial.subs[key] = stackSubs[key];\n    }\n\n    stackPartials = stackPartials || {};\n    partial.stackPartials = stackPartials;\n    for (key in partials) {\n      if (!stackPartials[key]) stackPartials[key] = partials[key];\n    }\n    for (key in stackPartials) {\n      partial.partials[key] = stackPartials[key];\n    }\n\n    return partial;\n  }\n\n  var rAmp = /&/g,\n      rLt = /</g,\n      rGt = />/g,\n      rApos = /\\'/g,\n      rQuot = /\\\"/g,\n      hChars = /[&<>\\\"\\']/;\n\n  function coerceToString(val) {\n    return String((val === null || val === undefined) ? '' : val);\n  }\n\n  function hoganEscape(str) {\n    str = coerceToString(str);\n    return hChars.test(str) ?\n      str\n        .replace(rAmp, '&amp;')\n        .replace(rLt, '&lt;')\n        .replace(rGt, '&gt;')\n        .replace(rApos, '&#39;')\n        .replace(rQuot, '&quot;') :\n      str;\n  }\n\n  var isArray = Array.isArray || function(a) {\n    return Object.prototype.toString.call(a) === '[object Array]';\n  };\n\n})( true ? exports : 0);\n\n\n//# sourceURL=webpack://llexicom/./node_modules/hogan.js/lib/template.js?");

/***/ }),

/***/ "./scripts/finder.ts":
/*!***************************!*\
  !*** ./scripts/finder.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Finder = void 0;\nclass Finder {\n    constructor() {\n        this.table = (__webpack_require__(/*! ./table */ \"./scripts/table.ts\").table);\n        this.cachedDictionary = {};\n    }\n    nearestIndex(key, table = this.table) {\n        let left = -1;\n        let right = table.length;\n        while (right - left > 1) {\n            const mid = Math.floor(left + (right - left) / 2);\n            if (table[mid] > key) {\n                right = mid;\n            }\n            else {\n                left = mid;\n            }\n        }\n        return left;\n    }\n    // Returns `count` of words which nears specified `key` in dictionary.\n    nearby(key, count) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _ = yield this.find(key); // Call this just for populate the cache.\n            const near_keys = Object.keys(this.cachedDictionary).sort();\n            const index = this.nearestIndex(key, near_keys);\n            const keys = near_keys.slice(Math.max(0, index - (count / 2)), index + (count / 2) + 1);\n            return Object.fromEntries(keys.map((key) => [key, this.cachedDictionary[key][0].meanings[0].definition]));\n        });\n    }\n    randomChoice(count) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shuffled = [...this.table];\n            for (let i = shuffled.length - 1; i > 0; i--) {\n                const j = Math.floor(Math.random() * (i + 1));\n                [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n            }\n            const files = count / 10;\n            const src = shuffled.slice(0, files);\n            const promises = src.map((key) => this.find(key));\n            const results = yield Promise.all(promises);\n            const usedIndices = new Set();\n            const words = [];\n            const originalKeys = Object.keys(this.cachedDictionary);\n            while (words.length < count) {\n                const index = Math.floor(Math.random() * originalKeys.length);\n                if (usedIndices.has(index)) {\n                    continue;\n                }\n                if (!this.cachedDictionary[originalKeys[index]] ||\n                    !this.cachedDictionary[originalKeys[index]][0].meanings) {\n                    continue;\n                }\n                usedIndices.add(index);\n                words.push(originalKeys[index]);\n            }\n            return Object.fromEntries(words.map((key) => [key, this.cachedDictionary[key][0].meanings[0].definition]));\n        });\n    }\n    // Returns single word data which exactly matches specified `key`.\n    // The `key` is case-insensitive.\n    find(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const canonical_key = key.toLowerCase();\n            if (this.cachedDictionary[canonical_key]) {\n                console.log(`cache hit for ${canonical_key} out of ${Object.keys(this.cachedDictionary).length}`);\n                return this.cachedDictionary[canonical_key];\n            }\n            try {\n                const nearest_index = this.nearestIndex(canonical_key);\n                const nearest_key = this.table[nearest_index];\n                console.log(`fetching ${nearest_key} for ${canonical_key}`);\n                const response = yield fetch(`${nearest_key}.json.lz`, {\n                    method: 'GET',\n                    headers: {\n                        'Accept-Encoding': 'br'\n                    }\n                });\n                const ds = new DecompressionStream(\"deflate\");\n                const readableStream = response.body;\n                if (readableStream === null) {\n                    console.error(\"no readable stream\");\n                    return undefined;\n                }\n                const decompressedStream = readableStream.pipeThrough(ds);\n                const blob = yield new Response(decompressedStream).blob();\n                const dict = JSON.parse(yield blob.text());\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                this.cachedDictionary = Object.assign(Object.assign({}, this.cachedDictionary), dict);\n                return this.cachedDictionary[canonical_key];\n            }\n            catch (error) {\n                console.error('Error fetching dictionary data:', error);\n                return undefined;\n            }\n        });\n    }\n}\nexports.Finder = Finder;\n\n\n//# sourceURL=webpack://llexicom/./scripts/finder.ts?");

/***/ }),

/***/ "./scripts/index.ts":
/*!**************************!*\
  !*** ./scripts/index.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst finder_1 = __webpack_require__(/*! ./finder */ \"./scripts/finder.ts\");\nconst render_1 = __webpack_require__(/*! ./render */ \"./scripts/render.ts\");\nconst finder = new finder_1.Finder();\nconst performSearch = () => {\n    const searchInput = document.getElementById('searchInput');\n    if (!(searchInput instanceof HTMLInputElement)) {\n        console.error(\"not valid input\");\n        return;\n    }\n    const searchTerm = searchInput === null || searchInput === void 0 ? void 0 : searchInput.value.trim();\n    if (searchTerm === undefined) {\n        return;\n    }\n    performSearchAndPushHistory(searchTerm);\n};\nconst performSearchAndPushHistory = (searchTerm) => {\n    performSearchImpl(searchTerm);\n    const newUrl = `?query=${searchTerm}`;\n    history.pushState({\n        query: searchTerm\n    }, '', newUrl);\n};\nconst performSearchImpl = (searchTerm) => __awaiter(void 0, void 0, void 0, function* () {\n    if (searchTerm === '') {\n        console.log(\"empty query\");\n        return;\n    }\n    const resultsContainer = document.getElementById('results');\n    if (resultsContainer === null) {\n        console.error(\"No result box\");\n        return;\n    }\n    const data = yield finder.find(searchTerm);\n    if (data === undefined) {\n        const candidates = yield finder.nearby(searchTerm, 100);\n        resultsContainer.innerHTML = (0, render_1.renderNotfoundMessage)(searchTerm, candidates);\n    }\n    else {\n        resultsContainer.innerHTML = (0, render_1.render)(data);\n        const cards = document.getElementsByClassName(\"meaning-card\");\n        for (const card of cards) {\n            card.addEventListener('click', (m) => {\n                if (!(m.target instanceof HTMLElement)) {\n                    return;\n                }\n                const body = card.querySelector('.meaning-content');\n                if (body) {\n                    body.classList.toggle(\"visible\");\n                }\n                const title = card.querySelector('.meaning-title');\n                if (title) {\n                    title.classList.toggle(\"expand\");\n                }\n            });\n        }\n    }\n});\nconst fillSamples = () => __awaiter(void 0, void 0, void 0, function* () {\n    const samples = yield finder.randomChoice(100);\n    const resultsContainer = document.getElementById('results');\n    if (!resultsContainer) {\n        return;\n    }\n    resultsContainer.innerHTML = (0, render_1.renderIndexSamples)(samples);\n    const wordEntries = document.getElementsByClassName('word-entry');\n    for (const wordEntry of wordEntries) {\n        wordEntry.addEventListener('click', (event) => {\n            const div = wordEntry.querySelector('div');\n            if (div) {\n                const word = div.innerHTML;\n                performSearchAndPushHistory(word);\n            }\n            event.stopPropagation();\n            console.log(\"clidked word\");\n            window.scrollTo({\n                top: 0,\n                left: 0,\n                behavior: 'smooth'\n            });\n        }, true);\n    }\n});\nfunction load() {\n    const searchButton = document.getElementById('searchButton');\n    searchButton === null || searchButton === void 0 ? void 0 : searchButton.addEventListener('click', () => {\n        performSearch();\n    });\n    const searchInput = document.getElementById('searchInput');\n    searchInput === null || searchInput === void 0 ? void 0 : searchInput.addEventListener('keypress', (event) => {\n        if (event.key === 'Enter') {\n            performSearch();\n        }\n    });\n    const logo = document.getElementById('logo');\n    logo === null || logo === void 0 ? void 0 : logo.addEventListener('click', () => {\n        history.pushState({\n            query: undefined\n        }, '', location.pathname);\n        fillSamples();\n    });\n    const params = new URLSearchParams(window.location.search);\n    const query = params.get('query');\n    if (searchInput instanceof HTMLInputElement && query !== null) {\n        searchInput.value = query;\n        performSearchImpl(query);\n    }\n    else {\n        fillSamples();\n    }\n}\n;\nwindow.addEventListener('pageshow', (event) => {\n    load();\n});\nwindow.addEventListener('popstate', (event) => {\n    const searchInput = document.getElementById('searchInput');\n    if (event.state && searchInput instanceof HTMLInputElement) {\n        const query = event.state.query || '';\n        if (!query) {\n            fillSamples();\n        }\n        else {\n            searchInput.value = query;\n            performSearchImpl(query);\n        }\n    }\n    else {\n        load();\n    }\n});\n\n\n//# sourceURL=webpack://llexicom/./scripts/index.ts?");

/***/ }),

/***/ "./scripts/render.ts":
/*!***************************!*\
  !*** ./scripts/render.ts ***!
  \***************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.render = render;\nexports.renderNotfoundMessage = renderNotfoundMessage;\nexports.renderIndexSamples = renderIndexSamples;\nconst Hogan = __webpack_require__(/*! hogan.js */ \"./node_modules/hogan.js/lib/hogan.js\");\nconst word_mustache_1 = __importDefault(__webpack_require__(/*! ./word.mustache */ \"./scripts/word.mustache\"));\nconst template = Hogan.compile(word_mustache_1.default);\nfunction parseMarkdownBold(text) {\n    if (!text) {\n        return \"\";\n    }\n    return text.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n}\nfunction translatePartOfSpeech(pos) {\n    switch (pos) {\n        case \"verb\":\n            return \"動詞\";\n        case \"verb (vt)\":\n            return \"他動詞\";\n        case \"verb (vi)\":\n            return \"自動詞\";\n        case \"noun\":\n            return \"名詞\";\n        case \"pronoun\":\n            return \"代名詞\";\n        case \"proper noun\":\n            return \"固有名詞\";\n        case \"adjective\":\n            return \"形容詞\";\n        case \"adverb\":\n            return \"副詞\";\n        case \"preposition\":\n            return \"前置詞\";\n        case \"conjunction\":\n            return \"接続詞\";\n        case \"interjection\":\n            return \"間投詞\";\n    }\n    if (pos.startsWith(\"verb\")) {\n        return \"動詞 (変化)\";\n    }\n    if (pos.startsWith(\"adjective\")) {\n        return \"形容詞\";\n    }\n    console.log(pos);\n    return \"Unknown\";\n}\nfunction translateTransitivity(en) {\n    switch (en) {\n        case \"vr\":\n        case \"vi\":\n            return \"自\";\n        case \"vt\":\n            return \"他\";\n    }\n    return \"sss\";\n}\nfunction mustachePreprocess(data) {\n    if (data.meanings) {\n        for (let i = 0; i < data.meanings.length; i++) {\n            data.meanings[i].index_plus_1 = i + 1;\n            if (data.meanings[i].part_of_speech) {\n                data.meanings[i].part_of_speech_translated = translatePartOfSpeech(data.meanings[i].part_of_speech);\n            }\n            if (data.meanings[i].transitivity) {\n                data.meanings[i].transitivity_translated = translateTransitivity(data.meanings[i].transitivity);\n            }\n            data.meanings[i].has_collocations = (data.meanings[i].collocations && data.meanings[i].collocations.length > 0);\n            data.meanings[i].has_synonyms = (data.meanings[i].synonyms && data.meanings[i].synonyms.length > 0);\n            data.meanings[i].has_antonyms = (data.meanings[i].antonyms && data.meanings[i].antonyms.length > 0);\n        }\n    }\n    if (data.example_sentences) {\n        for (let i = 0; i < data.example_sentences.length; i++) {\n            if (data.example_sentences[i].type) {\n                data.example_sentences[i].type_translated = translatePartOfSpeech(data.example_sentences[i].type);\n            }\n            if (data.example_sentences[i].sentence) {\n                data.example_sentences[i].sentence = parseMarkdownBold(data.example_sentences[i].sentence);\n            }\n        }\n    }\n    if (data.readability_explanation) {\n        data.readability_explanation.text = parseMarkdownBold(data.readability_explanation.text);\n    }\n    if (data.usage_notes) {\n        data.usage_notes.explanation = parseMarkdownBold(data.usage_notes.explanation);\n    }\n    if (data.related_words) {\n        data.related_words.has_derivatives = !!data.related_words.derivatives;\n        data.related_words.has_idioms_phrases = !!data.related_words.idioms_phrases;\n        data.related_words.has_phrasal_verbs = !!data.related_words.has_phrasal_verbs;\n    }\n    data.has_inflection_forms = !!data.inflection && (!!data.inflection.noun_plural ||\n        !!data.inflection.verb_forms);\n    data.has_related_words = !!data.related_words;\n    data.has_example_sentences = !!data.example_sentences;\n    return data;\n}\nfunction render(data) {\n    return template.render(mustachePreprocess(data[0])); // TODO: Handle multiple words data if exists.\n}\nfunction renderNotfoundMessage(target, words) {\n    const sorted_words = Object.keys(words).sort();\n    let result = `${target}は見つかりませんでした<br>`;\n    result += '<div class=\"suggestions-container\">\\n';\n    result += '<div class=\"suggestions-title\">もしかして:</div>\\n';\n    result += '<div class=\"word-tags\">\\n';\n    for (let i = 0; i < sorted_words.length; i++) {\n        result += `<a href=\"?query=${sorted_words[i]}\" class=\"word-tag\" title=\"${words[sorted_words[i]]}\">${sorted_words[i]}</a><br>`;\n    }\n    result += '</div></div>';\n    return result;\n}\nfunction renderIndexSamples(words) {\n    const keys = Object.keys(words);\n    let result = '<div class=\"list-container\">\\n';\n    result += '<ul class=\"word-list\">\\n';\n    for (let i = 0; i < keys.length; i++) {\n        result += `<li class=\"word-entry\" title=\"${keys[i]}\"><div class=\"word-link\">${keys[i]}</div>`;\n        result += `<span class=\"word-translation\">${words[keys[i]]}</span></li>`;\n    }\n    result += '</ul></div>';\n    return result;\n}\n\n\n//# sourceURL=webpack://llexicom/./scripts/render.ts?");

/***/ }),

/***/ "./scripts/table.ts":
/*!**************************!*\
  !*** ./scripts/table.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nexports.table = [\"'tis\", \"-tious\", \"a-spread\", \"aannemen\", \"abadite\", \"abashes\", \"abbattimento\", \"abbrutirsi\", \"abearance\", \"abetments\", \"abgrund\", \"ability-diminishing\", \"abjuration\", \"ablock\", \"abogados\", \"aborrecer\", \"abrachia\", \"abridgements\", \"abscheulich\", \"absinthiating\", \"absorver\", \"abstractor\", \"abundant\", \"abwesend\", \"acadian\", \"acanthuridae\", \"acc\", \"accentuator\", \"accessorial\", \"acclimatisable\", \"accomplishments\", \"accoy\", \"accumulators\", \"acedias\", \"acertannin\", \"acetoin\", \"acetylid\", \"achenodia\", \"achoo\", \"achuas\", \"acidulent\", \"aclamar\", \"acomodar-se\", \"acoustic\", \"acquittingly\", \"acro-\", \"acromion\", \"acroterteria\", \"actinocrinite\", \"action-taking\", \"actuaciones\", \"acupunctured\", \"adage\", \"adapid\", \"addedly\", \"addolcimento\", \"adelia\", \"adenoids\", \"aderezo\", \"adiabatically\", \"adipocerite\", \"adjoint\", \"adjuvants\", \"admirable\", \"admonitrix\", \"adoptative\", \"adp-\", \"adron\", \"adult-related\", \"advancement-wise\", \"adversarious\", \"advocation\", \"aegagropilae\", \"aeolist\", \"aerobe\", \"aerologic\", \"aerospace-derived\", \"aethalia\", \"afeminado\", \"affeeble\", \"affirmare\", \"afford\", \"afghanets\", \"afore-running\", \"afrite\", \"afterbreach\", \"afteroar\", \"afzetten\", \"agapetidae\", \"age-cracked\", \"agentries\", \"aggrade\", \"aggressively\", \"agitated-faced\", \"agnatha\", \"agonistically\", \"agrarian-centric\", \"agricultural\", \"agrostologic\", \"aguroth\", \"ahondar\", \"aided\", \"ailuroid\", \"air-dry\", \"aircraftmen\", \"airometer\", \"aisne-marne\", \"ajustadamente\", \"akili\", \"akuammine\", \"alakazam\", \"alarmierend\", \"albergar\", \"alboroto\", \"alcahests\", \"alclad\", \"alcoholysis\", \"aldide\", \"alectoromorphae\", \"alepine\", \"alexander\", \"alfraganus\", \"algiers\", \"alhambresque\", \"alienly\", \"alingual\", \"aliyahs\", \"alkanol\", \"all-blasting\", \"all-firedly\", \"all-perfectness\", \"all-thorny\", \"allays\", \"alleluja\", \"allettante\", \"allinearsi\", \"allodially\", \"alloplasmatic\", \"allows\", \"allyn\", \"almoning\", \"alogically\", \"alpestrian\", \"alpo\", \"alterar\", \"altheimer\", \"altumal\", \"alunites\", \"alyado\", \"amalbergas\", \"amarantite\", \"amateur-led\", \"ambagiousness\", \"ambientato\", \"amblyoscope\", \"ambulomancy\", \"amelita\", \"american-influenced\", \"ametria\", \"amidoguaiacol\", \"aminolytic\", \"ammassarsi\", \"ammonire\", \"amoebae\", \"amoritish\", \"amparar\", \"amphicarpous\", \"amphiphilic\", \"amphogenic\", \"ampongue\", \"amurcosity\", \"amylo-\", \"anabel\", \"anacromyodian\", \"anagogically\", \"anallagmatic\", \"analyzing\", \"anaphylatoxin\", \"anasitch\", \"anatomicosurgical\", \"anchietea\", \"ancodont\", \"anderssen\", \"androclinium\", \"andryc\", \"anemoscope\", \"aneurismally\", \"angelenos\", \"angiectasis\", \"angiosis\", \"anglicize\", \"anglophobia\", \"angulate\", \"anhistous\", \"animadverted\", \"animes\", \"anisoiconia\", \"anklebone\", \"annacquato\", \"annexive\", \"annoyance-related\", \"annuntiare\", \"anomalousness\", \"anoretic\", \"anprangern\", \"anstarren\", \"antanacathartic\", \"antechambers\", \"antennulary\", \"anterus\", \"anthobiology\", \"anthracitiferous\", \"anthropol.\", \"anthropotoxin\", \"anti-christianism\", \"anti-gallicanism\", \"anti-jansenist\", \"anti-oxidative\", \"anti-speciesism\", \"antianarchic\", \"antiburglary\", \"anticipation-oriented\", \"anticonformity\", \"antidancing\", \"antiejaculation\", \"antifoaming\", \"antiheterolysin\", \"antiliturgic\", \"antimerging\", \"antimystic\", \"antioptimist\", \"antipeptone\", \"antipooling\", \"antiquatedly\", \"antirickets\", \"antisipasi\", \"antisupernaturalist\", \"antitumoral\", \"antoinetta\", \"antwoorden\", \"any-kyn\", \"aosta\", \"aparte\", \"apenar\", \"aphanite\", \"aphoristical\", \"apickaback\", \"aplazado\", \"apocr\", \"apokatastatic\", \"apopetalous\", \"apostacies\", \"apotheosis\", \"appariscente\", \"appendage\", \"appetitional\", \"appliances\", \"apportions\", \"appressoria\", \"appropriators\", \"apresentar\", \"aproximado\", \"apyrotype\", \"aquativeness\", \"arabesquerie\", \"araguaia\", \"arare\", \"arbitrator\", \"arc-shaped\", \"archaeology\", \"archdeaconship\", \"archetto\", \"archimage\", \"archivo\", \"archrebel\", \"arctiidae\", \"ardoise\", \"arendalite\", \"argan\", \"argiopidae\", \"arguta\", \"ariela\", \"aristocracy\", \"arkansans\", \"armary\", \"armloads\", \"arna\", \"aromatised\", \"arraigns\", \"arrendator\", \"arriet\", \"arrosive\", \"arseniasis\", \"art-minded\", \"arteriostenosis\", \"arthrometry\", \"articulus\", \"artisanship\", \"arundiferous\", \"as-told-to\", \"ascaridiasis\", \"asciferous\", \"asea\", \"ash-covered\", \"ashli\", \"asianization\", \"askja\", \"aspekt\", \"asphodels\", \"aspy\", \"assaults\", \"asserire\", \"asset-stripping\", \"assinar\", \"assoggettati\", \"astartidae\", \"asthenosphere\", \"astragalus-derived\", \"astrography\", \"astuto\", \"asystematic\", \"ataviarse\", \"atenta\", \"athenagoras\", \"athyreosis\", \"atmo-\", \"atoms\", \"atrasar-se\", \"atropia\", \"attainture\", \"attention-seeking\", \"attirant\", \"attractions\", \"attwood\", \"aucanian\", \"audio-reactive\", \"auf\", \"aufmerksam\", \"auger-type\", \"aulacomniaceae\", \"auramine\", \"aurigal\", \"auscultatory\", \"ausgiebig\", \"ausreichend\", \"austine\", \"autarch\", \"author-entry\", \"auto-omnibus\", \"autochemical\", \"autodialer\", \"autohemolysis\", \"automated-centered\", \"autonephrectomy\", \"autopolyploid\", \"autosled\", \"autotypic\", \"auxofluor\", \"avaramente\", \"aventayle\", \"aves\", \"avilement\", \"avouches\", \"avvicinarsi\", \"awber\", \"awny\", \"axises\", \"aydlett\", \"azan\", \"azoic\", \"azulene\", \"baba\", \"babits\", \"baccalaurean\", \"bacillosis\", \"back-to-front\", \"backfurrow\", \"backsets\", \"backup\", \"bacteriocin\", \"bad-minded\", \"badmouth\", \"bagattino\", \"baguhan\", \"bailie\", \"bajar\", \"bakshishes\", \"balanoplasty\", \"baldly\", \"balkanizing\", \"ballers\", \"ballism\", \"ballyragged\", \"balsamum\", \"bana\", \"banded\", \"bandsawn\", \"bangui\", \"bankruptcy-prone\", \"banter\", \"baradari\", \"barbarousness\", \"barbu\", \"bare-breasted\", \"bargeage\", \"barkla\", \"barnet\", \"baronga\", \"barranquitas\", \"barriguda\", \"bartizans\", \"basally\", \"basenji\", \"basie\", \"basipterygoid\", \"bassanello\", \"bastian\", \"batement\", \"bathyhyperesthesia\", \"batson\", \"battlegrounds\", \"baulking\", \"baxtone\", \"bazoo\", \"beachier\", \"bealach\", \"bear\", \"beat-centric\", \"beauteously\", \"bebeerin\", \"beche-de-mer\", \"becoresh\", \"bedaubs\", \"bedfellows\", \"bedplates\", \"beduin\", \"beeflower\", \"beer-naive\", \"beeway\", \"befool\", \"bega\", \"beginnende\", \"begriffen\", \"behavioral-focused\", \"behoved\", \"bejesus\", \"belabours\", \"beleaps\", \"belies\", \"bellboys\", \"bellota\", \"beloeilite\", \"beluchi\", \"bemix\", \"bench-related\", \"benedictionale\", \"benet-mercie\", \"benjaminite\", \"benue\", \"benzoin\", \"beparody\", \"berang\", \"berdampak\", \"bergalith\", \"berhyming\", \"berkonflik\", \"bernanos\", \"berrettino\", \"bertemu\", \"berylline\", \"bescramble\", \"besiege\", \"besoms\", \"besqueeze\", \"bestechen\", \"bestrews\", \"betelnuts\", \"betrag\", \"betteringly\", \"beveiligen\", \"bewegen\", \"bewreak\", \"be·dote\", \"bhumibol\", \"biasesly\", \"bibliographer\", \"bicalvous\", \"biconjugate\", \"bide\", \"bierstube\", \"big-gaited\", \"bight\", \"bikh\", \"biliary\", \"billhead\", \"bimane\", \"bindingness\", \"binti\", \"biodynamical\", \"biolysis\", \"biopsychologist\", \"biozone\", \"biracialism\", \"birdliming\", \"birretta\", \"bisected\", \"bismite\", \"bit\", \"bitterbump\", \"bivaulted\", \"blabbermouth\", \"black-tressed\", \"blackings\", \"bladderweed\", \"blanche\", \"blanquear\", \"blastoid\", \"blay\", \"bleeder\", \"blennostatic\", \"bleu\", \"blindstories\", \"bll\", \"blocs\", \"blood-stirring\", \"bloodthirstiest\", \"blossomry\", \"blowjobs\", \"blue-collar-influenced\", \"bluebuck\", \"bluewoods\", \"blurbs\", \"bnu\", \"boatels\", \"bobbysoxers\", \"bod\", \"body-positive\", \"bogalusa\", \"bohannon\", \"boisterousness\", \"boleweed\", \"bolshy\", \"bombastic\", \"bonapartist\", \"bone-dry\", \"boniata\", \"bonser\", \"book-fell\", \"bookmate\", \"boongary\", \"boots\", \"bord-land\", \"bori\", \"borowolframic\", \"bosk\", \"boswelliana\", \"bothrenchyma\", \"bottle-rinsing\", \"boucherism\", \"boult\", \"bourges\", \"boviform\", \"bowfin\", \"box-leaved\", \"boydekyn\", \"braccae\", \"brachycranic\", \"bracteate\", \"bradyville\", \"braidings\", \"brainworker\", \"branchiata\", \"brand-independent\", \"branen\", \"brass-bold\", \"brauch\", \"brawnier\", \"breachful\", \"breaker-upper\", \"breath\", \"breedable\", \"brengsek\", \"brevipennate\", \"brick-dust\", \"bridewain\", \"briga\", \"brilhantismo\", \"brinie\", \"bristle-stalked\", \"brittni\", \"broadacre\", \"brochantite\", \"broilery\", \"bromeosin\", \"bromyrite\", \"bronny\", \"brook\", \"brot\", \"brown-leaved\", \"brs\", \"brunch\", \"brushlike\", \"bryant\", \"bsi\", \"bubbleless\", \"buchloe\", \"buckled\", \"buddhism\", \"buerger\", \"bug-prone\", \"buildable\", \"bulbus\", \"bullaces\", \"bullicioso\", \"bulreedy\", \"bumpily\", \"bungee\", \"bunyoro\", \"burdie\", \"burgin\", \"burl\", \"burnishers\", \"bursae\", \"busey\", \"bushwhacks\", \"busky\", \"butcherer\", \"butterers\", \"buttonholed\", \"buyers\", \"by-line\", \"bygones\", \"byss\", \"cabalism\", \"cabined\", \"cabrillas\", \"cachua\", \"cacophonic\", \"caddisfly\", \"caduciaries\", \"caesiums\", \"cagr\", \"cajang\", \"calamarian\", \"calcaneocuboid\", \"calciphilous\", \"caleche\", \"calibrated\", \"calipers\", \"callidity\", \"callownesses\", \"calorie-laden\", \"calusa\", \"calyptra\", \"cambiante\", \"camenes\", \"cammarum\", \"campbell-bannerman\", \"campobello\", \"can-opening\", \"canals\", \"cancerization\", \"candil\", \"cane-backed\", \"canistel\", \"cannier\", \"canonized\", \"canters\", \"cantu\", \"capaciousness\", \"capes\", \"capitalistically\", \"caponiers\", \"caprifoliaceous\", \"captacula\", \"car-borne\", \"caramboled\", \"carb-heavy\", \"carbomycin\", \"carborundum\", \"carcharias\", \"cardiant\", \"cardiometry\", \"care-charming\", \"carere\", \"caricature\", \"cariyo\", \"carmentis\", \"carnivallike\", \"carotinemia\", \"carpinteria\", \"carrells\", \"carrotiest\", \"carthamin\", \"carved\", \"cascabel\", \"casemates\", \"casimir\", \"cassiani\", \"castara\", \"castoff\", \"cat-locks\", \"catalinite\", \"cataphrenic\", \"catch-all\", \"categorial\", \"catfooted\", \"cathisma\", \"catkinate\", \"cattell\", \"caudatory\", \"causability\", \"cauterizer\", \"caveatee\", \"cavum\", \"cckw\", \"cecidomyiid\", \"ceevee\", \"celemines\", \"celite\", \"celluloided\", \"cement-temper\", \"censo\", \"center-left-led\", \"centonze\", \"centrifugation\", \"cepat-cepat\", \"cephalopod\", \"ceratites\", \"cercopidae\", \"cerebrospinal\", \"cermets\", \"certificato\", \"cervisial\", \"cesuras\", \"cgiar\", \"chaetognath\", \"chain-drooped\", \"chaityas\", \"chaleh\", \"chalta\", \"chamfrain\", \"chanca\", \"chaney\", \"channer\", \"chape\", \"chapultepec\", \"charbon\", \"charisms\", \"charmedly\", \"charting\", \"chastenesses\", \"chattering\", \"chavender\", \"cheatham\", \"checkroom\", \"cheerleader\", \"cheirography\", \"chem\", \"chemitype\", \"chenab\", \"cherkess\", \"chesney\", \"chevaliers\", \"chiamo\", \"chichihaerh\", \"chider\", \"chilcats\", \"chiliadal\", \"chilson\", \"china-led\", \"chinners\", \"chiquita\", \"chiropraxis\", \"chitarroni\", \"chkalov\", \"chlori\", \"chloroiodide\", \"chob\", \"choicely\", \"cholecystocolotomy\", \"cholinic\", \"chondrofibromatous\", \"chop-stick\", \"choreographer\", \"choroiditis\", \"chowse\", \"christhood\", \"chromamammalian\", \"chromidiogamy\", \"chromoptometer\", \"chronometrical\", \"chrysology\", \"chuckey\", \"chumley\", \"churchgoings\", \"chuted\", \"chèvres\", \"ciceronianisms\", \"cigs\", \"cinched-waisted\", \"cinematically\", \"cinque\", \"circlewise\", \"circulus\", \"circumfused\", \"circumscriptively\", \"cirone\", \"cislunar\", \"citifies\", \"citrus-fragrant\", \"civile\", \"cladanthous\", \"clairvoyants\", \"clangere\", \"clare\", \"clarkson\", \"classific\", \"claunch\", \"claviharp\", \"cleading\", \"clear-eyes\", \"cleburne\", \"clenchers\", \"clermont-ferrand\", \"client-operated\", \"climate-naive\", \"clingfishes\", \"cliona\", \"clivias\", \"cloddishness\", \"clonorchis\", \"close-shaven\", \"cloth-backed\", \"cloud-compelling\", \"cloven-hoofed\", \"clubfisted\", \"clupeodei\", \"cmcc\", \"co-created\", \"co-ossify\", \"coachwright\", \"coagular\", \"coal-whipper\", \"coappear\", \"coasts\", \"cobaltocyanic\", \"cobwebbier\", \"coccothrinax\", \"cock-a-doodle-dooed\", \"cockeyedly\", \"cockup\", \"codamine\", \"codger\", \"coeducational\", \"coembodied\", \"coenures\", \"coexisted\", \"coffinite\", \"cognati\", \"cohabit\", \"cohog\", \"coincident\", \"coitions\", \"cold-chiselled\", \"colebrook\", \"colicroot\", \"collar-cutting\", \"collectivizes\", \"collierville\", \"collomia\", \"coloboma\", \"colonnade\", \"colorations\", \"colourably\", \"coltun\", \"colvin\", \"combatif\", \"combustion\", \"comestibles\", \"comins\", \"commemoro\", \"commercialist\", \"commission\", \"common-nosed\", \"communicants\", \"communizing\", \"companheirismo\", \"comparative\", \"compattarsi\", \"competence-promoting\", \"compital\", \"completer\", \"complicato\", \"composable\", \"comprehendingly\", \"comprizable\", \"compunctiously\", \"comsymp\", \"concavo\", \"concept-based\", \"concertizing\", \"conciliabulum\", \"conclusory\", \"concretively\", \"condemners\", \"condition-specific\", \"conduciveness\", \"conepates\", \"confervae\", \"confidenzialmente\", \"confiscatory\", \"conformationally\", \"confundido\", \"congenic\", \"congoni\", \"coniah\", \"conjoins\", \"connacht\", \"connivances\", \"conquedle\", \"consciousness-enhancing\", \"consentir\", \"considerablemente\", \"consists\", \"consonants\", \"constantly\", \"constricting\", \"consultable\", \"consumptively\", \"contamino\", \"contendere\", \"contestador\", \"contingent-looking\", \"contour\", \"contraddistinguere\", \"contrapositive\", \"contravalence\", \"control-impairing\", \"contused\", \"conveniens\", \"conversantly\", \"conveyed\", \"convolution\", \"cooker\", \"coonily\", \"coorie\", \"copepod\", \"coposo\", \"coppock\", \"copsewooded\", \"coquetted\", \"corallic\", \"cordate-amplexicaul\", \"core-baking\", \"coriariaceae\", \"corms\", \"cornet-a-pistons\", \"cornuate\", \"coronership\", \"corporate-wide\", \"correctible\", \"corrida\", \"corrosion-susceptible\", \"corses\", \"cortisones\", \"corymbosely\", \"cosheries\", \"cosmoline\", \"cossie\", \"costlew\", \"cote-hardie\", \"cottae\", \"coty\", \"coulson\", \"counter-branding\", \"counter-trend\", \"counterbrace\", \"counterembattled\", \"counterintrigues\", \"counterpetitions\", \"counterreprisal\", \"countersynod\", \"countrify\", \"courant\", \"courtin'\", \"covariance\", \"covets\", \"cowbird\", \"cowplop\", \"coyest\", \"crab-grass\", \"crackmans\", \"cragginess\", \"crandon\", \"cranker\", \"crash-land\", \"cravens\", \"creach\", \"creatinin\", \"credibilidade\", \"creep\", \"creneled\", \"cresa\", \"cresylic\", \"cribbers\", \"criminalmente\", \"crini-\", \"crispature\", \"critical\", \"croce\", \"crojiks\", \"crooksided\", \"cross-bearing\", \"cross-fingered\", \"cross-questioner\", \"crossbowmen\", \"crosstied\", \"croupiers\", \"crownets\", \"cruddle\", \"crummable\", \"crusta\", \"cryogenic-durable\", \"crypto-jewish\", \"cryptonym\", \"crystallo-\", \"ctenii\", \"cubbyhole\", \"cuchullain\", \"cuddlesome\", \"cuisinary\", \"cullion\", \"cultivated\", \"cumana\", \"cumulated\", \"cunny\", \"cupreo-\", \"curatorium\", \"curiboca\", \"curnie\", \"cursitor\", \"curvado\", \"cushats\", \"custom-bound\", \"custroun\", \"cutises\", \"cuvy\", \"cyanoaurate\", \"cyber-work-ready\", \"cyclian\", \"cyclonoscope\", \"cydippid\", \"cymbaled\", \"cynical-eyed\", \"cypres\", \"cystadenoma\", \"cystophotography\", \"cytozoon\", \"dablet\", \"dactylioglyphtic\", \"daedalist\", \"daggy\", \"dailies\", \"daisycutter\", \"dallman\", \"damasks\", \"damosel\", \"dance-loving\", \"danford\", \"danneggiarsi\", \"dapperness\", \"darien\", \"darkliest\", \"dartboard\", \"dasiphora\", \"data-exposing\", \"data-structure-independent\", \"datenstrukturierung\", \"daughters\", \"daviston\", \"day-focused\", \"daypeep\", \"dclass\", \"de-encapsulator\", \"de-urbanization\", \"dead-tired\", \"deair\", \"deaquation\", \"deathful\", \"debauchable\", \"debiti\", \"debt-consolidating\", \"decade\", \"decancellation\", \"decarnated\", \"decelerable\", \"decentre\", \"decidir\", \"decistere\", \"declension\", \"decolonising\", \"decompression-driven\", \"decorativo\", \"decresc\", \"decurving\", \"deducibility\", \"deep-dish\", \"deepeningly\", \"defaced\", \"defect\", \"defenser\", \"deficit\", \"definitise\", \"defluorination\", \"defragmentable\", \"degenerado\", \"degradement\", \"dehumanise\", \"deificazione\", \"deject\", \"delannoy\", \"delegant\", \"delible\", \"delimitate\", \"delivers\", \"delsarte\", \"demagnetiser\", \"demasculinised\", \"demetre\", \"demigoddess\", \"demireps\", \"demobilizes\", \"demonassa\", \"demonstrativeness\", \"dempsey\", \"denaturalisation\", \"dendrology\", \"denizenship\", \"densest\", \"dentification\", \"denunciant\", \"deoxidizer\", \"depenalize\", \"depetalize\", \"deplorer\", \"deposals\", \"depredar\", \"deprogrammings\", \"deraigns\", \"derequisition\", \"dermatic\", \"dermographia\", \"derrick\", \"desacoplar\", \"desalinates\", \"desarrollador\", \"descansar\", \"descomponer\", \"describent\", \"desegregates\", \"desengomarse\", \"desertor\", \"deshabille\", \"design-oblivious\", \"desinere\", \"desk-bound\", \"desmemoriarse\", \"desmund\", \"desorientarse\", \"desperations\", \"despondently\", \"desregulamentar\", \"destinies\", \"desugar\", \"desvio\", \"detecters\", \"determinare\", \"deticks\", \"detrimentally\", \"deuteroconid\", \"devant\", \"developpes\", \"devilizing\", \"devolatilization\", \"dew-bedabbled\", \"deworm\", \"dextrotropic\", \"dhhs\", \"diabolicalness\", \"diadematoida\", \"diaguitas\", \"dialogo\", \"diamond-headed\", \"diaphanous\", \"diasene\", \"diatribist\", \"dibebaskan\", \"dicephalus\", \"dichronous\", \"dictamina\", \"dicynodontidae\", \"diduga\", \"dierolf\", \"dietz\", \"differire\", \"diffusiveness\", \"diggs\", \"digitonin\", \"dihalang\", \"dike\", \"dilatant\", \"dilis\", \"diluvio\", \"dimerizes\", \"dimitting\", \"dine-in\", \"dinkeys\", \"dioeciodimorphous\", \"dioscorea\", \"diphase\", \"diplarthrism\", \"diplonts\", \"dipsaceae\", \"direct-access\", \"diremehkan\", \"dirt-removing\", \"disadattamento\", \"disambientarsi\", \"disarmonizzare\", \"disbandment\", \"discarder\", \"disciplinal\", \"discolored\", \"discongruity\", \"discordanza\", \"discreditably\", \"discurrent\", \"disebutkan\", \"disenchantments\", \"disequilibrato\", \"disfurnish\", \"disgustingness\", \"dishonestly\", \"disimulado\", \"disintegrate\", \"disjune\", \"disloign\", \"dismoded\", \"disordered-looking\", \"disparidade\", \"disperarsi\", \"displeasance\", \"disposure\", \"disputatively\", \"disreport\", \"dissect\", \"disservice\", \"dissiper\", \"dissuasiveness\", \"distemper\", \"distinctiveness-developing\", \"distractive\", \"district-wide\", \"disunirsi\", \"dites\", \"ditutupi\", \"divergence\", \"divertimento\", \"divinity\", \"divulsion\", \"djokjakarta\", \"dna-interaction-null\", \"dobbing\", \"docketed\", \"documentarist\", \"dodgery\", \"dog-hole\", \"doggerelling\", \"dogteeth\", \"dolerites\", \"dolliver\", \"domain-specific\", \"domiciliated\", \"dominy\", \"dondolare\", \"donsky\", \"doorknocker\", \"doradilla\", \"dormer\", \"dorsicollar\", \"dose\", \"dotless\", \"double-crossing\", \"double-quick\", \"doubletone\", \"doughnut\", \"dovekie\", \"down-crier\", \"downiest\", \"downthrow\", \"doyleys\", \"draco\", \"draggly\", \"drakefly\", \"drats\", \"drawk\", \"dreamiest\", \"dreidls\", \"dreyfuss\", \"dringendst\", \"drivewell\", \"dromonds\", \"dropped\", \"drovy\", \"druggie\", \"drunkenwise\", \"dry-shoot\", \"dsp\", \"dubbeltje\", \"duck-retter\", \"dudelsack\", \"dug\", \"dulcify\", \"dultie\", \"dumpier\", \"dung-borne\", \"dunseath\", \"duopsonistic\", \"duply\", \"durchhalten\", \"durous\", \"dust-throwing\", \"duty-related\", \"dwindled\", \"dylan\", \"dynes\", \"dysluite\", \"dystomous\", \"eada\", \"earclip\", \"earnings-enhancing\", \"earthboard\", \"ease-related\", \"easternization\", \"eats\", \"ebony-skinned\", \"eccentrometer\", \"echelon\", \"echography\", \"eco-efficiency\", \"economy-first\", \"ectobronchium\", \"ectozoans\", \"eddina\", \"edgewise\", \"editorial-writing\", \"educand\", \"eebree\", \"efektif\", \"effendis\", \"effloresces\", \"eficazmente\", \"eggheads\", \"egotheism\", \"ehm\", \"eight-celled\", \"einberufung\", \"einkassieren\", \"einteilung\", \"ejaculatory\", \"eksperimen\", \"elam\", \"elaterite\", \"elders\", \"electric-heat\", \"electrochemistry\", \"electroing\", \"electronically-initiated\", \"electrostatical\", \"elegant-sounding\", \"elenctical\", \"elevations\", \"eliezer\", \"elitizar-se\", \"ellin\", \"elod\", \"elsehow\", \"eluviation\", \"emagram\", \"embaciar\", \"embeddable\", \"emblematized\", \"embottle\", \"embroiler\", \"embuia\", \"emeried\", \"eminency\", \"emmetrope\", \"emotividad\", \"emperish\", \"emplaning\", \"employer-obstructed\", \"empresslike\", \"emulates\", \"enactors\", \"enardecer\", \"encarnalise\", \"encephalopathy\", \"enchytraeid\", \"encomendero\", \"encroacher\", \"end-match\", \"endeign\", \"endocarpic\", \"endogenous\", \"endopterygota\", \"endothecia\", \"endurantism\", \"energumenon\", \"enfeeble\", \"enforcively\", \"engdahl\", \"engineries\", \"englobement\", \"engrossar\", \"enigmatization\", \"enleague\", \"enneapetalous\", \"enophthalmic\", \"enredarse\", \"ensanguined\", \"ensilist\", \"enswathed\", \"entenebrecerse\", \"enteromere\", \"entertissue\", \"enthusiastisch\", \"entocondylar\", \"entopopliteal\", \"entreabrir\", \"entropionize\", \"entwisted\", \"envenenarse\", \"envisagement\", \"eocene\", \"epanorthosis\", \"ephebos\", \"epiboulangerite\", \"epicranius\", \"epidiplosis\", \"epigyny\", \"epimerised\", \"epiphyseal\", \"episcopolatry\", \"epistomian\", \"epithyme\", \"epodic\", \"equal-balanced\", \"equiangularity\", \"equinecessary\", \"equisetic\", \"equivote\", \"erdrich\", \"erfolgversprechend\", \"ergotizing\", \"erimanthus\", \"erodieren\", \"erotogenicity\", \"error-increasing\", \"erudite-appearing\", \"erysiphe\", \"erythrorrhexis\", \"escalatable\", \"escaso\", \"escondimento\", \"esebrias\", \"eskimo\", \"esophagotome\", \"especificar\", \"esporre\", \"essayical\", \"estabilizador\", \"estatuto\", \"esthete\", \"estotiland\", \"estrif\", \"esurient\", \"eterosessuale\", \"etherism\", \"ethnarchy\", \"ethrogim\", \"etruscan\", \"eucairite\", \"eudaemonic\", \"euglenoidina\", \"eumeromorph\", \"euphemizing\", \"eupsychics\", \"europeanising\", \"eurythmic\", \"eutrophy\", \"evan\", \"evaporators\", \"evenforth\", \"ever-drizzling\", \"evertors\", \"evil-hued\", \"evocations\", \"ewell\", \"exacta\", \"examens\", \"exaugurate\", \"excepter\", \"excircle\", \"exclaves\", \"excrescential\", \"excuses\", \"exeland\", \"exerts\", \"exhibitorship\", \"eximirse\", \"exocardial\", \"exonerates\", \"exoskeletal\", \"expansibility\", \"expedients\", \"experiencible\", \"expertise-stagnating\", \"explants\", \"explorer\", \"expositorily\", \"expropiar\", \"exsecants\", \"extendedly\", \"exterminist\", \"extinctive\", \"extra-christian\", \"extracystic\", \"extraneural\", \"extrasystolic\", \"extremis\", \"exudates\", \"eye-catching\", \"eyeless\", \"eyskens\", \"fabricare\", \"facers\", \"facioscapulohumeral\", \"factory-made-oriented\", \"fadeyev\", \"fah\", \"fainthearted-looking\", \"fairlie\", \"fake-looking\", \"falding\", \"fallostomy\", \"falsifizieren\", \"familiarizations\", \"fanaticize\", \"fanga\", \"fantasmal\", \"far-going\", \"farcetta\", \"farl\", \"faroes\", \"fascicled\", \"fashioners\", \"fastidio\", \"fat-shunning\", \"fathomage\", \"fattura\", \"faunch\", \"favorability\", \"fayetta\", \"fear-tangled\", \"featherfew\", \"february\", \"federally-required\", \"feedback-light\", \"fehlschlag\", \"felicitar\", \"fellow-creature\", \"female-biased\", \"femororotulian\", \"fennel\", \"feres\", \"fermin\", \"ferrarese\", \"ferroinclave\", \"fertility-suppressing\", \"festfahren\", \"fetes\", \"feudally\", \"fewnesses\", \"fiber-restricted\", \"fibrocellular\", \"ficha\", \"fiddle-lipped\", \"fidia\", \"fiendism\", \"fifth-column\", \"figuratively\", \"filasse\", \"filicides\", \"fillips\", \"filters\", \"finalizations\", \"fine-count\", \"finfoot\", \"finickingly\", \"finnip\", \"fire-burning\", \"fireblende\", \"fireside\", \"firmicus\", \"firsthand\", \"fishers\", \"fissile\", \"fit-legged\", \"five-foiled\", \"fixed-income-focused\", \"flabellarium\", \"flagge\", \"flambeaus\", \"flammably\", \"flappering\", \"flat-bosomed\", \"flative\", \"flauntiness\", \"flawedness\", \"fleckering\", \"flemings\", \"fletton\", \"flicked\", \"flint\", \"flitchplate\", \"flocker\", \"floody\", \"florentines\", \"florula\", \"flouter\", \"flown\", \"flugel\", \"flummoxing\", \"fluorinates\", \"flustered-looking\", \"fluxweed\", \"flytail\", \"focalising\", \"foetuses\", \"foible\", \"folia\", \"folkways\", \"fondamental\", \"food-gathering\", \"foot-acted\", \"footings\", \"foozlers\", \"forbiddenly\", \"forcite\", \"fore-vouched\", \"foreclosure\", \"foregathers\", \"foreknee\", \"forepass\", \"foreshadowed\", \"forestay\", \"foretype\", \"forgery-resistant\", \"forkier\", \"formalistically\", \"formfehlerhaft\", \"formulated\", \"forsakenness\", \"forthgaze\", \"fortuneless\", \"forwelk\", \"fossor\", \"foulards\", \"fouqu\", \"four-shilling\", \"fourth-rater\", \"foxhound\", \"fraction\", \"fragmentado\", \"frail-looking\", \"franchezza\", \"frangulaceae\", \"frantically\", \"fraudare\", \"freath\", \"free-flowering\", \"freedoot\", \"freezable\", \"fremdbestimmt\", \"frenzied-gazed\", \"freshish\", \"friableness\", \"friedheim\", \"frigidity\", \"friseurs\", \"frivols\", \"frogman\", \"front-light\", \"froppish\", \"frothiness\", \"fructiculose\", \"fruitery\", \"frustration\", \"fubbed\", \"fuel-rich\", \"fuji-san\", \"full-formed\", \"full-stuffed\", \"full\", \"fulmis\", \"fumigatories\", \"functionnaire\", \"funestal\", \"funktion\", \"furbo\", \"furls\", \"furthermore\", \"fusillading\", \"futabatei\", \"fuzzy-headed\", \"gabbling\", \"gadded\", \"gaelicize\", \"gain-based\", \"galactocele\", \"galaxiidae\", \"galilees\", \"galley-tile\", \"gallivanted\", \"galoshe\", \"galyaks\", \"game-destroying\", \"gammacism\", \"gandering\", \"ganglioside\", \"ganton\", \"garantizado\", \"gardenville\", \"garlandwise\", \"garrattsville\", \"gas-burning\", \"gasificarse\", \"gassville\", \"gastrocnemial\", \"gastronomy-centered\", \"gate-post\", \"gaudful\", \"gauping\", \"gawkers\", \"gazania\", \"gds\", \"gecked\", \"gefallen\", \"geisel\", \"gelatinobromide\", \"gelototherapy\", \"gemitores\", \"gendarmerie\", \"generability\", \"generico\", \"genially\", \"genossenschaft\", \"gentle-handedness\", \"genua\", \"geochronologically\", \"geolocate\", \"geonyctinastic\", \"geospiza\", \"gerardia\", \"geringer\", \"germigene\", \"gerrymanderer\", \"gesetzesbruch\", \"gesticulative\", \"gettered\", \"ghain\", \"ghost\", \"giantry\", \"gibson\", \"gig-lamp\", \"gigo\", \"gillar\", \"gimcrack\", \"gingerspice\", \"giorgi\", \"gire\", \"gisela\", \"giver-out\", \"glad-flowing\", \"glaistig\", \"glaringness\", \"glathsheim\", \"gleamless\", \"glenarm\", \"glib-gabbet\", \"glistering\", \"globing\", \"glonoins\", \"glossalgia\", \"glossotomy\", \"glucate\", \"glumes\", \"gluttony\", \"glycopexis\", \"gnapweed\", \"gnetales\", \"goajiro\", \"gobbledegook\", \"god-guided\", \"godling\", \"goggle\", \"gold-field\", \"golden-red\", \"goldwork\", \"gomerel\", \"gonesome\", \"gonochorismus\", \"good-humored\", \"goodwill\", \"goose-shaped\", \"gordiacean\", \"gorillas\", \"gospelly\", \"goths\", \"gournard\", \"governor-generalship\", \"grab\", \"gradatively\", \"graeme\", \"gram-centimeter\", \"grampa\", \"grandiloquently\", \"granilla\", \"grantsmen\", \"graph\", \"grappler\", \"grassmen\", \"grattage\", \"graven\", \"gravity-operated\", \"grays\", \"great-grandmother\", \"grecophilic\", \"green-gilled\", \"greenhall\", \"greenyard\", \"grenadian\", \"greys\", \"grievousness\", \"grimaldian\", \"gripeful\", \"gristmills\", \"groggiest\", \"gropple\", \"grots\", \"groundlings\", \"groveled\", \"grub street\", \"grugous\", \"gruntle\", \"guadalquivir\", \"guaranteeable\", \"guaruan\", \"gue\", \"guesthouse\", \"guiderock\", \"guilty-cup\", \"gulfing\", \"gumby\", \"gundalow\", \"gunsels\", \"guro\", \"gut-feeling\", \"gutturalization\", \"gwydion\", \"gymnophobia\", \"gynecocratic\", \"gypsiologist\", \"gyrophoraceous\", \"habenulae\", \"habituarse\", \"hacklog\", \"hadramautian\", \"haffkinize\", \"haggle\", \"hail-fellow\", \"hairball\", \"hairy-footed\", \"halavahs\", \"half-ape\", \"half-convincingly\", \"half-fictitious\", \"half-learned\", \"half-proletarian\", \"half-smiling\", \"half-womanly\", \"halisteresis\", \"hallowd\", \"halomorphic\", \"ham-fisted\", \"hamingja\", \"hamner\", \"hand-carve\", \"hand-stamped\", \"handgefertigt\", \"handoffs\", \"handwrought\", \"hankers\", \"haori\", \"happy-go-luckiness\", \"harboring\", \"hard-mouthed\", \"hardhat\", \"hardwired\", \"harled\", \"harmoniphon\", \"harping-iron\", \"harrumphing\", \"hartwood\", \"hashheads\", \"hastifoliate\", \"hathaway\", \"haulback\", \"haute-piece\", \"hawe-bake\", \"hay-colored\", \"haywood\", \"hctds\", \"headends\", \"headroom\", \"health-enhancing\", \"heart-bound\", \"heartened\", \"heat-conserving\", \"heather-blutter\", \"heavenly-mindedness\", \"hebbe\", \"hecatontome\", \"hederiform\", \"heeding\", \"hegemon\", \"heimer\", \"helar\", \"helicoids\", \"helios\", \"helldog\", \"helmer\", \"helpmates\", \"hemat-\", \"hematophagous\", \"hemianosmia\", \"hemikaryon\", \"hemispheres\", \"hemodialysis\", \"hemorrhoidectomies\", \"hendecagon\", \"henotheistic\", \"hepatitis\", \"heptadecane\", \"heraclean\", \"herbane\", \"herdbook\", \"hereness\", \"herm\", \"hernando\", \"heroologist\", \"herstellt\", \"hesitating\", \"heterandry\", \"heterodoxy\", \"heterolytic\", \"heteropoly\", \"heterozygous\", \"hexachloroethane\", \"hexamitiasis\", \"hexode\", \"hibbin\", \"hidalgos\", \"hierarchising\", \"higgle\", \"high-end\", \"high-muckety-muck\", \"high-status\", \"highest-ranked\", \"hijack\", \"hillbird\", \"himelman\", \"hindquarter\", \"hinted\", \"hippen\", \"hipponosology\", \"hirondelle\", \"hispid\", \"historically\", \"hitch-hiker\", \"hmso\", \"hobbist\", \"hochpreisig\", \"hoehne\", \"hoggism\", \"hokah\", \"hole-in-corner\", \"holli\", \"holmgang\", \"holophote\", \"holy-seeming\", \"homeborn\", \"homeothermic\", \"homilists\", \"homoeocrystalline\", \"homographs\", \"homophony\", \"homunculus\", \"honeybees\", \"honorable\", \"hoodooing\", \"hooklet\", \"hoosierize\", \"hopkinton\", \"horick\", \"horn-shaped\", \"horokaka\", \"horse-back\", \"horsehair\", \"hortatorily\", \"hospitality\", \"hot-cold\", \"hotelize\", \"hounded\", \"housefather\", \"housling\", \"howler\", \"hsining\", \"hubungan\", \"huff-shouldered\", \"huila\", \"human\", \"humanitarianisms\", \"humdrummishness\", \"humilities\", \"humpbacked\", \"hunger-pressed\", \"hurdland\", \"hurtable\", \"husky\", \"huxleian\", \"hyaloiditis\", \"hydesville\", \"hydrazidine\", \"hydrocarbonous\", \"hydroelectricities\", \"hydrologic\", \"hydropathy\", \"hydrorachis\", \"hydrotype\", \"hygiology\", \"hylotomous\", \"hynda\", \"hyperabsorption\", \"hyperbolize\", \"hypercritically\", \"hyperethically\", \"hyperinsulinism\", \"hypermorphism\", \"hyperpepsinia\", \"hypersensitisation\", \"hypertonus\", \"hypnaceous\", \"hypobaropathy\", \"hypocreaceous\", \"hypogynic\", \"hypophare\", \"hyporesponsive\", \"hypothallus\", \"hypoxygenated\", \"hyrum\", \"hystricinae\", \"ias\", \"ibrd\", \"ice-stream\", \"ichors\", \"ichthyotic\", \"iconophily\", \"iddhi\", \"identicalness\", \"idette\", \"idiotcies\", \"idolatrizing\", \"idyller\", \"ignatian\", \"ignorato\", \"ikey\", \"ilimitada\", \"ill-comer\", \"ill-lighted\", \"ill-ventilated\", \"illeviable\", \"illuded\", \"illustratively\", \"image-appreciating\", \"imagistic\", \"imbibes\", \"imbued\", \"imitt\", \"immechanically\", \"immigrational\", \"immomentous\", \"immunes\", \"immutabilitas\", \"impalers\", \"impasses\", \"impedably\", \"imperar\", \"imperializing\", \"impertinacy\", \"impignorating\", \"implementing\", \"impolidamente\", \"importunely\", \"impoverirsi\", \"imprescindibile\", \"imprint\", \"improvement-generated\", \"impugner\", \"imune\", \"inabbreviable\", \"inadequative\", \"inanire\", \"inarticulated\", \"inbearing\", \"incanto\", \"incattivire\", \"incertidumbres\", \"incipient\", \"inclinarsi\", \"incognito\", \"incommodious\", \"incomposite\", \"inconglomerate\", \"inconstancy\", \"incoordination\", \"incrassated\", \"incrosses\", \"incumbentess\", \"indamin\", \"indefectible\", \"indenters\", \"indeterminably\", \"indicatable\", \"indigencia\", \"indigotin\", \"indiscusso\", \"indiv.\", \"indivisible\", \"indomitable\", \"inductility\", \"industrial-centric\", \"inebriante\", \"inelaborate\", \"inequivalent\", \"inesthetic\", \"inexpert\", \"infame\", \"infecter\", \"infernale\", \"infile\", \"infixions\", \"inflessibilmente\", \"infolder\", \"informativo\", \"infranatural\", \"infringer\", \"inganno\", \"inghamite\", \"ingratement\", \"inhabited\", \"inhibitingly\", \"iniome\", \"injection\", \"inkhorn\", \"inlayers\", \"innecesariedad\", \"innominado\", \"inobservable\", \"inoperativo\", \"inpolyhedron\", \"inquisitivenesses\", \"insatisfaire\", \"insecticidal\", \"insep\", \"insignias\", \"insnare\", \"insostenibilmente\", \"inspirometer\", \"instated\", \"institutionalism\", \"instrumental-led\", \"insuficiencia\", \"insurgency\", \"intarissable\", \"integropalliate\", \"intemerately\", \"intensified\", \"interaction-driven\", \"interblending\", \"interchangeable\", \"intercommunion\", \"intercystic\", \"interesado\", \"interferingness\", \"intergrave\", \"interjections\", \"interlines\", \"intermeddled\", \"intermittencies\", \"internals\", \"internunce\", \"interpetalous\", \"interpretato\", \"interrer\", \"interscience\", \"intersporal\", \"intertrace\", \"intervention-focused\", \"intestate\", \"intitles\", \"intoxicatingly\", \"intracortical\", \"intramontane\", \"intraprostatic\", \"intrepid-looking\", \"introductoriness\", \"introvertiert\", \"intwines\", \"invalid\", \"invendibleness\", \"invertebrateness\", \"investor-centricity\", \"invisibleness\", \"involution\", \"inyectar\", \"iodospongin\", \"iowa\", \"ir-\", \"iridauxesis\", \"irish-inspired\", \"iron-jointed\", \"ironsided\", \"irrealizzato\", \"irregeneration\", \"irrepatriable\", \"irresponsablemente\", \"irrilevanza\", \"irse\", \"isawa\", \"ishmaelite\", \"isles\", \"isoborneol\", \"isocyanate\", \"isogonics\", \"isoleucine\", \"isoperimetric\", \"isosporic\", \"isozymes\", \"isthmuses\", \"italicizes\", \"ithacan\", \"iungere\", \"ivy-wreathed\", \"j\", \"jack\", \"jackknives\", \"jacobite\", \"jadeite\", \"jahannan\", \"jalaps\", \"jamie\", \"janiform\", \"japanophobia\", \"jargonels\", \"jasies\", \"jauntiness\", \"jaybird\", \"jeanette\", \"jeffry\", \"jellyroll\", \"jeopard\", \"jermonal\", \"jessore\", \"jettisonable\", \"jezreel\", \"jigglier\", \"jingle-jangle\", \"jitu\", \"jobbed\", \"jocuma\", \"john-bullism\", \"jointly-developed\", \"jolson\", \"jordanon\", \"jotters\", \"jovencita\", \"joyhouse\", \"jubilist\", \"judgmental-appearing\", \"juggleries\", \"julianist\", \"jumpoffs\", \"junji\", \"jurez\", \"justiceweed\", \"juv\", \"kabalevsky\", \"kaffia\", \"kainits\", \"kalasie\", \"kallilite\", \"kamelaukion\", \"kandiyohi\", \"kaolikung\", \"karakul\", \"karma\", \"karyolymph\", \"kassaraba\", \"katharsis\", \"kaule\", \"kazimir\", \"kebangkitan\", \"keckles\", \"keelhauled\", \"kefiatoid\", \"keilhauite\", \"kekukuhan\", \"kellick\", \"kembalinya\", \"kenelm\", \"kent\", \"kepner\", \"keratoplasties\", \"kermes\", \"kesabaran\", \"ketahuan\", \"ketidakhati-hatian\", \"kette\", \"keyapaha\", \"kgr\", \"khaskovo\", \"khotan\", \"kick-up\", \"kidskins\", \"kilian\", \"kilobuck\", \"kimigayo\", \"kindredless\", \"king-emperor\", \"kininogen\", \"kiosk\", \"kirkton\", \"kissiah\", \"kittened\", \"klam\", \"kleper\", \"knave\", \"knick-knacks\", \"knitch\", \"knopite\", \"knowledged\", \"koblenz\", \"kohua\", \"kolis\", \"komondorock\", \"konflik\", \"konstanteco\", \"konzeptionell\", \"kopple\", \"korruptionsgeld\", \"kotower\", \"krachtig\", \"kreegar\", \"krishna\", \"krti\", \"kubba\", \"kulturkreise\", \"kurchine\", \"kusum\", \"kwok\", \"kyshtym\", \"labeling\", \"labor-dominated\", \"labours\", \"laced\", \"lachrymosity\", \"laconically\", \"lactify\", \"ladderlike\", \"ladyhoods\", \"lag-inducing\", \"lahaska\", \"laius\", \"lallygagged\", \"lamboy\", \"lamentingly\", \"lamotte\", \"lamprotype\", \"lanciferous\", \"landeshauptmann\", \"landrail\", \"langbeinite\", \"languedoc\", \"lanners\", \"laothoe\", \"lapides\", \"lapwai\", \"large-bodied\", \"largishness\", \"larsen\", \"laryngotome\", \"laspisa\", \"latchstring\", \"lateran\", \"lathyrus\", \"latitudinous\", \"latvian\", \"launcher\", \"laureole\", \"lavatorial\", \"law-borrow\", \"lawrie\", \"layaway\", \"laze\", \"leach\", \"leaderboard\", \"leady\", \"lealness\", \"learns\", \"leatherwork\", \"lecanto\", \"lecturn\", \"leelah\", \"left-oriented\", \"legally-operated\", \"legionaries\", \"legpulling\", \"leiodermia\", \"lekvar\", \"lemonado\", \"lengthiness\", \"lentezza\", \"leonids\", \"lepidoptera\", \"leptilon\", \"lerc\", \"lesser\", \"letreece\", \"leucifer\", \"leucoplastid\", \"leutze\", \"leveridge\", \"levulic acid\", \"lexigraphy\", \"lianas\", \"liberal-leaning\", \"libertino\", \"licastro\", \"lichenologist\", \"lidia\", \"liepaja\", \"life-sustaining\", \"lig-by\", \"light-boned\", \"light-refractive\", \"lightly-scented\", \"ligulas\", \"lilac-flowered\", \"lilyfy\", \"lime-tasting\", \"limited-function\", \"limoncillo\", \"linalools\", \"line-hunting\", \"liner\", \"linguists\", \"linns\", \"lion-hided\", \"lipemia\", \"lipoid\", \"lipuria\", \"liquoring\", \"lissotrichy\", \"literacy-improving\", \"lithified\", \"lithopedium\", \"litigiousnesses\", \"littérateur\", \"liver-brown\", \"lixiviums\", \"lme\", \"loanings\", \"lobelin\", \"locality\", \"lochgelly\", \"lockups\", \"lodato\", \"lofty-minded\", \"logicised\", \"logorrheic\", \"lola\", \"london-esque\", \"long-extended\", \"long-spined\", \"longgar\", \"longspun\", \"looked-after\", \"loose-panicled\", \"lophopoda\", \"lordotic\", \"lorola\", \"lotebush\", \"loudening\", \"louse\", \"love-whispering\", \"low-accuracy\", \"low-gravity\", \"low-roughage\", \"lower-priced\", \"loxley\", \"lsp\", \"lucais\", \"lucinacea\", \"ludes\", \"lugmark\", \"lulls\", \"luminator\", \"lunar-insensitive\", \"lungee\", \"lupi\", \"luscious\", \"lustro\", \"lutidin\", \"lv\", \"lyctid\", \"lymphatically\", \"lyncine\", \"lyrebirds\", \"lysozyme\", \"macadamizer\", \"macerarsi\", \"machine-derived\", \"macilroy\", \"macro\", \"macrognathous\", \"macrosomatia\", \"mad-looking\", \"madhuca\", \"maduromycotic\", \"magalensia\", \"magico\", \"magnetical\", \"magnetotelephonic\", \"magueys\", \"mahmudi\", \"maidstone\", \"mainland\", \"maisonettes\", \"majusculae\", \"makluk\", \"maladies\", \"malarian\", \"maldeveloped\", \"maleficio\", \"malhumorado\", \"malisons\", \"malmesbury\", \"malt-dust\", \"malvasia\", \"mammering\", \"man-changed\", \"management-based\", \"manbarklak\", \"mandatary\", \"manducated\", \"mangeao\", \"manic\", \"manikins\", \"manlikely\", \"manoeuvrer\", \"mansuetudine\", \"mantraps\", \"manumissive\", \"many-mingled\", \"maplebush\", \"marasar\", \"marbury\", \"marciare\", \"margaric\", \"maria-giuseppe\", \"marinates\", \"mark\", \"marketably\", \"markweed\", \"marmoset\", \"marriage\", \"marshier\", \"martialist\", \"martyrly\", \"maryus\", \"maselin\", \"masonwork\", \"massenware\", \"mastered\", \"mastmen\", \"matagasse\", \"material-independent\", \"mathematics-driven\", \"matricides\", \"mattawan\", \"maturement\", \"maunders\", \"mawing\", \"maximus\", \"mayman\", \"mazeness\", \"mccammon\", \"mcfee\", \"mcnully\", \"meadsweet\", \"meaning-blind\", \"meathead\", \"mechanizer\", \"medawar\", \"medianity\", \"medication-resistant\", \"mediodigital\", \"medorra\", \"meetings\", \"megalodactylism\", \"megarean\", \"meh\", \"mekhitarist\", \"melange\", \"melanuric\", \"meles\", \"meliorist\", \"mellitz\", \"melodramatization\", \"melting\", \"membagikan\", \"membicarakan\", \"membuang\", \"memoization\", \"memory-enabling\", \"memperkirakan\", \"memvalidasi\", \"menarcheal\", \"mendahulukan\", \"mendokumentasikan\", \"mengabsahkan\", \"mengatakan\", \"mengganti\", \"menghebohkan\", \"mengkhayalkan\", \"mengusahakan\", \"menisciform\", \"menominasikan\", \"menstruous\", \"mentoanterior\", \"menyangka\", \"menyumbangkan\", \"meraviglioso\", \"merchantman\", \"mereduksi\", \"meridion\", \"merla\", \"merostomatous\", \"meruline\", \"mesenchymatic\", \"mesmerisms\", \"mesognathous\", \"mesorchium\", \"mesoventrally\", \"mesteno\", \"metachemistry\", \"metahewettite\", \"metalinguistics\", \"metalworkings\", \"metaphors\", \"metasomatically\", \"metcalf\", \"meterless\", \"methodizing\", \"metiscus\", \"metridium\", \"metrorrhexis\", \"mexsp\", \"mhs\", \"michabo\", \"micrencephalic\", \"microcardius\", \"microcryptocrystalline\", \"microgalvanometer\", \"micromaniac\", \"micropathologies\", \"micropterygious\", \"microsplenia\", \"microzoic\", \"mid-october\", \"middle-colored\", \"mididae\", \"midwatches\", \"mignon\", \"milanese\", \"milfay\", \"milk-fed\", \"millbrae\", \"millidegree\", \"millite\", \"miltlike\", \"mimly\", \"mincy\", \"mineral-free\", \"miniard\", \"minimalis\", \"minishment\", \"minnie\", \"minuend\", \"miracidia\", \"mirna\", \"mis-sue\", \"misaltered\", \"misattribute\", \"miscalibrated\", \"misclaims\", \"miscopy\", \"misdevise\", \"misentries\", \"misfits\", \"misheard\", \"misjudging\", \"mismake\", \"misogynies\", \"misplays\", \"misraising\", \"missary\", \"missises\", \"missy\", \"mistico\", \"misturar\", \"mitbringen\", \"mitigators\", \"mity\", \"mizzenmasts\", \"mnestic\", \"mobilitazione\", \"mocktail\", \"moderationist\", \"modestness\", \"modulize\", \"mohammedist\", \"moistening\", \"molas\", \"molestar\", \"molloy\", \"molybdocardialgia\", \"monacid\", \"monasterially\", \"monerula\", \"monghol\", \"monitive\", \"mono-industrial\", \"monochord\", \"monodactylism\", \"monogrammatic\", \"monomerous\", \"monophthongized\", \"monopteroi\", \"monosubstitution\", \"monotropic\", \"monstrousness\", \"monthly\", \"mood-centric\", \"moon-stricken\", \"moonshining\", \"moosewob\", \"moraine\", \"morbilli\", \"moreville\", \"mormaordom\", \"morovis\", \"morralla\", \"mortgagee\", \"mosasauridae\", \"moss-gray\", \"moth-attracting\", \"motivado\", \"motorcyclists\", \"moudy-warp\", \"mountaineering\", \"mousee\", \"mouthwise\", \"mowrystown\", \"mrida\", \"mtn\", \"muckhill\", \"mud-built\", \"mudpuppies\", \"muggily\", \"mulaprakriti\", \"mulled\", \"multi-farm\", \"multi-use\", \"multicuspid\", \"multiinfection\", \"multinucleated\", \"multiplicidade\", \"multispindle\", \"multivolumed\", \"munchausenize\", \"municipally\", \"muralist\", \"murky\", \"musal\", \"muscular-legged\", \"music-centric\", \"musk-smelling\", \"mussalchee\", \"mutabilidade\", \"mutilates\", \"mutualness\", \"mycelioid\", \"mycteric\", \"myeloplastic\", \"myocoele\", \"myophorous\", \"myriapodan\", \"myron\", \"mysticism\", \"mythopastoral\", \"myxopodium\", \"nabe\", \"nachteilig\", \"naganas\", \"naigie\", \"naked-eared\", \"nameless\", \"nannie\", \"naosaurus\", \"napooh\", \"narcoticalness\", \"narratively\", \"nas\", \"nasobasilar\", \"natassia\", \"native\", \"naturalists\", \"naumacay\", \"navarchy\", \"nayward\", \"neaera\", \"nearsightedly\", \"nebulises\", \"necked\", \"necroscopical\", \"nee\", \"neemba\", \"neger\", \"negritic\", \"neil\", \"nematicide\", \"neo-classical\", \"neocosmic\", \"neonatology\", \"neovascular\", \"nephritic\", \"nepotists\", \"nerve-ridden\", \"nesmith\", \"netherwards\", \"networking\", \"neurilemma\", \"neurofibrillary\", \"neurotendinous\", \"neutrally-moderated\", \"neves\", \"newcomer-focused\", \"newsboard\", \"nfd\", \"nicarao\", \"nickelage\", \"nicotianin\", \"nidorf\", \"nietzscheism\", \"night-affected\", \"night-watching\", \"nigranilin\", \"nilghaus\", \"nincum\", \"ninguno\", \"nipponese\", \"nitpicked\", \"nitrogen\", \"nitrotrichloromethane\", \"nnw\", \"noble\", \"noctilucal\", \"nodulize\", \"noiselessly\", \"nomenclator\", \"non-aberrant\", \"non-anglophone\", \"non-believers\", \"non-catered\", \"non-commercializing\", \"non-continuable\", \"non-decontaminable\", \"non-dna-associated\", \"non-equivalence\", \"non-fighting\", \"non-geo-enabled\", \"non-homopolymeric\", \"non-intelligent\", \"non-laminated\", \"non-marine\", \"non-moslem\", \"non-oaked\", \"non-payer\", \"non-precedential\", \"non-psychoactive\", \"non-relinquishable\", \"non-rust-resistant\", \"non-sexually\", \"non-spreadable\", \"non-syphilitic\", \"non-transmittably\", \"non-viewer\", \"nonabortively\", \"nonacquaintance\", \"nonadoption\", \"nonaltruistically\", \"nonapostatizing\", \"nonartistic\", \"nonattacking\", \"nonbilabiate\", \"nonbusy\", \"nonce\", \"noncircumscribed\", \"noncollapsibility\", \"noncompensatory\", \"noncondensing\", \"nonconnotative\", \"noncontestation\", \"noncorpuscular\", \"noncrystallized\", \"nondeciduous\", \"nondegenerately\", \"nondeprecating\", \"nondeviously\", \"nondisagreement\", \"nondistortion\", \"none\", \"nonelectrized\", \"nonengineering\", \"nonerosive\", \"nonexactingly\", \"nonexperimentally\", \"nonfactiously\", \"nonfermenting\", \"nonfluency\", \"nonfrugalness\", \"nonglucosidal\", \"nonheading\", \"nonideal\", \"nonimperialness\", \"noninfectiously\", \"noninteracting\", \"nonironicalness\", \"nonlepidopteran\", \"nonlubricating\", \"nonmason\", \"nonmicroscopic\", \"nonmultiplicatively\", \"nonnegotiability\", \"nonobstructively\", \"nonorthogonal\", \"nonparticipating\", \"nonperiodical\", \"nonphosphatic\", \"nonport\", \"nonprevalence\", \"nonprolificacy\", \"nonprudently\", \"nonraised\", \"nonrecombinant\", \"nonrelease\", \"nonrepudiative\", \"nonreticent\", \"nonruminantia\", \"nonscholastical\", \"nonsensitively\", \"nonsignificant\", \"nonsovereignly\", \"nonstarter\", \"nonsubmissiveness\", \"nonsupposed\", \"nonsynthetical\", \"nontensility\", \"nontractableness\", \"nontrust\", \"nonuser\", \"nonverbal\", \"nonvisually\", \"nonzonally\", \"norcamphane\", \"normalise\", \"norristown\", \"northman\", \"nosebone\", \"nostochine\", \"notch-lobed\", \"noticed\", \"notothere\", \"novalike\", \"novenas\", \"nowtherd\", \"ntn\", \"nuclearize\", \"nudging\", \"nullificator\", \"numerative\", \"nunciate\", \"nursekin\", \"nutmegged\", \"nuttings\", \"nyctophobia\", \"o-\", \"oaritic\", \"obbenite\", \"obengenannt\", \"object-independent\", \"objurgator\", \"obliqueness\", \"obole\", \"obsequence\", \"obsolecer\", \"obstructivity\", \"obtusifid\", \"occhiata\", \"occultamento\", \"oceanically\", \"ochreae\", \"octahedra\", \"octocorallia\", \"octupled\", \"odd-hours\", \"odiosamente\", \"odontophorine\", \"odourless\", \"oeno-\", \"off-base\", \"off-year\", \"offhand\", \"offlook\", \"ogdan\", \"ohnmacht\", \"oil-repellent\", \"oily-haired\", \"okkultismus\", \"old-ivory\", \"olefin\", \"olfactory-sensitive\", \"oligopolist\", \"olivetti\", \"olwen\", \"omenta\", \"omnibuses\", \"omniuniversal\", \"omvattend\", \"onboarding\", \"ondular\", \"one-person\", \"oneirotic\", \"online\", \"onsets\", \"onwetend\", \"ooh\", \"oopodal\", \"opalescing\", \"open-grained\", \"openheartedly\", \"operatory\", \"ophion\", \"ophthalmoscopes\", \"opinioned\", \"opisthography\", \"opponieren\", \"opprimo\", \"optician\", \"optioned\", \"oracularness\", \"orangey\", \"orbite\", \"orchidist\", \"orderliness\", \"ordway\", \"orfordville\", \"organization-created\", \"organophone\", \"orient\", \"original\", \"orium\", \"ornately\", \"ornithoscopy\", \"orphanize\", \"orthiconoscope\", \"orthogneiss\", \"orthopyroxene\", \"orvah\", \"oscillariaceae\", \"osha\", \"osmose\", \"osservato\", \"ostend\", \"osteogenist\", \"ostertagia\", \"ostrich-feather\", \"otherdom\", \"otocyon\", \"ottavas\", \"oudenarde\", \"out-field\", \"outage\", \"outblooms\", \"outburnt\", \"outcrept\", \"outdrags\", \"outfed\", \"outfrowned\", \"outhaul\", \"outlandishlike\", \"outmarch\", \"outplans\", \"output-decreasing\", \"outride\", \"outscoring\", \"outsize\", \"outspill\", \"outstriving\", \"outthruster\", \"outwander\", \"outworker\", \"ovarian\", \"over-\", \"over-managing\", \"overaccentuate\", \"overanalyzing\", \"overbalm\", \"overbought\", \"overcalled\", \"overcirculate\", \"overcomplacently\", \"overcourteous\", \"overdebilitating\", \"overdevout\", \"overdragen\", \"overelaborating\", \"overexhaust\", \"overfatness\", \"overflush\", \"overgenialness\", \"overgrieve\", \"overheighten\", \"overimbibing\", \"overintellectualizing\", \"overlactation\", \"overlijden\", \"overmagnifying\", \"overmodernization\", \"overnobly\", \"overpay\", \"overpole\", \"overproduced\", \"overquantity\", \"overreligious\", \"overrules\", \"oversecured\", \"overshort\", \"oversoften\", \"overstain\", \"overstrictness\", \"overswollen\", \"overthwartly\", \"overtrodden\", \"overwade\", \"overwisely\", \"ovipositing\", \"owensville\", \"oxalacetate\", \"oxhouse\", \"oxskin\", \"oxygen-poor\", \"oxyquinone\", \"ozarkite\", \"paca-rana\", \"pachyglossia\", \"pacinian\", \"pactos\", \"padraic\", \"paestum\", \"pagiopoda\", \"pailful\", \"painter-stainer\", \"pal\", \"palaeoethnobotany\", \"palaeotechnic\", \"palatia\", \"paleal\", \"paleogene\", \"paler\", \"palinurus\", \"pallid-gray\", \"palmesthesia\", \"palpated\", \"paludine\", \"pamplona\", \"pana\", \"pancreatalgia\", \"pandiculation\", \"panfried\", \"panicled\", \"pannonia\", \"pansophies\", \"pantheism\", \"pantopelagian\", \"papalism\", \"paperboys\", \"papistic\", \"paquet\", \"paracetamol\", \"paradis\", \"paragenic\", \"paralgesia\", \"paralyse\", \"paramo\", \"paraphilia\", \"parascenia\", \"parasyphilosis\", \"parbuckled\", \"pardee\", \"parent-organized\", \"parged\", \"parisia\", \"parliamental\", \"parodist\", \"parovarian\", \"parrs\", \"partager\", \"partially-started\", \"particulate-laden\", \"parto\", \"pas\", \"paspalum\", \"passemeasure\", \"passionlike\", \"pasteurelleae\", \"pastorling\", \"patchwise\", \"pathetic-looking\", \"pathoradiography\", \"patria\", \"patroclinic\", \"patterner\", \"paulianist\", \"pausal\", \"pavoneggiarsi\", \"pay-related\", \"pazzo\", \"peaceful-eyed\", \"peaked\", \"pearliest\", \"pebble-dashed\", \"pectase\", \"peculiarly\", \"pedate\", \"pedicel\", \"pedogenesis\", \"peens\", \"pegasid\", \"peize\", \"pelecanus\", \"pelligrini\", \"peltigerous\", \"pemberhentian\", \"penalisation\", \"penda\", \"penertiban\", \"penggandaan\", \"peninsulate\", \"pennell\", \"penoncel\", \"pentacrinidae\", \"pentanedione\", \"penthesilea\", \"penuriousness\", \"people-powered\", \"peppy\", \"pequot\", \"perceiving\", \"percoid\", \"perdrix\", \"perfecere\", \"perfluent\", \"perfundere\", \"periaxial\", \"pericolare\", \"perigastric\", \"perimeningitis\", \"periodoscope\", \"periphractic\", \"perispermic\", \"peritonaea\", \"perjurer\", \"permanente\", \"permutably\", \"peropodous\", \"perpetuation\", \"persea\", \"persistable\", \"personally-motivated\", \"perspicaciousness\", \"perteneciente\", \"perubahan\", \"pervicaciously\", \"pessoas\", \"petalodontidae\", \"petit-juror\", \"petro-occipital\", \"petrosquamosal\", \"petunjuk\", \"pfennig\", \"phaeophyceous\", \"phalangiidae\", \"phantasia\", \"pharmaceutical-grade\", \"pharyngismus\", \"phasitron\", \"phenazone\", \"phenosal\", \"phigalian\", \"philipp\", \"philoctetes\", \"philoprogenitiveness\", \"phina\", \"phlegmier\", \"phocodont\", \"phonestheme\", \"phonos\", \"phosphine\", \"photalgia\", \"photochromascope\", \"photoetched\", \"photoisomerization\", \"photophile\", \"photospectroscopic\", \"photozinco\", \"phrenocardiac\", \"phthisiophobia\", \"phyllis\", \"phyllotactical\", \"physiciancy\", \"physiopathologically\", \"phytoclimatology\", \"phytophthora\", \"pianette\", \"picadores\", \"pickback\", \"picnickian\", \"picturableness\", \"piece-dye\", \"piercing-gazed\", \"pig-bed\", \"piggybacking\", \"pijakan\", \"pileus\", \"pilleus\", \"pilously\", \"pinaceous\", \"pinckard\", \"pinfall\", \"pink-footed\", \"pinnatodentate\", \"pintadoes\", \"pip-squeak\", \"pipi\", \"piratelike\", \"piscatology\", \"pistacite\", \"pitch-and-putt\", \"pithless\", \"pituitous\", \"plaatshebben\", \"placers\", \"plagio-\", \"plain-speaking\", \"planarity\", \"planheit\", \"planoferrite\", \"planulan\", \"plasmopara\", \"plat-eye\", \"plath\", \"platooning\", \"platypodia\", \"playbroker\", \"plead\", \"pleated-front\", \"plegar\", \"pleochromatism\", \"pleurenchyma\", \"pleurotyphoid\", \"plinks\", \"plot-secondary\", \"plowers\", \"plum-brown\", \"plumer\", \"plunging\", \"plurisyllable\", \"pluvious\", \"pneumatonomy\", \"pneumoperitonitis\", \"pocketer\", \"podestas\", \"podre\", \"poetcraft\", \"pohjola\", \"pointillists\", \"pokerishly\", \"polarward\", \"policed\", \"politbureau\", \"polky\", \"pollok\", \"poltroonishly\", \"polybotes\", \"polycots\", \"polygamical\", \"polyhalide\", \"polymicrian\", \"polyonym\", \"polyphyly\", \"polys\", \"polysyllabicity\", \"polyvinylidene\", \"pommel\", \"pond-apple\", \"ponica\", \"pooch\", \"poor-yielding\", \"pope\", \"popping-crease\", \"populum\", \"pork\", \"porphyrisation\", \"portas\", \"portionless\", \"posada\", \"positivist\", \"possivelmente\", \"post-horn\", \"post-theodosian\", \"postcephalic\", \"postencephalitic\", \"postgeminum\", \"postlabially\", \"postneural\", \"postpubis\", \"posttrial\", \"pot-lid\", \"potencia\", \"pothunting\", \"pottle\", \"poultryless\", \"pouting\", \"power-law\", \"pozsony\", \"prad\", \"praesystolic\", \"praline\", \"pratingly\", \"pre-agreement\", \"pre-education\", \"pre-envelopment\", \"pre-explanation\", \"pre-modern\", \"pre-victorian\", \"preact\", \"preaffidavit\", \"preannounce\", \"preaverring\", \"prebroadcasting\", \"precedencies\", \"prechoice\", \"precision-preserving\", \"precolluding\", \"preconcept\", \"preconquest\", \"preconvincing\", \"precyclonic\", \"predeficiency\", \"predesignation\", \"predicating\", \"prediscouraged\", \"predivinable\", \"preelect\", \"preenlargement\", \"preexclusively\", \"prefashion\", \"prefinal\", \"prefuneral\", \"preharden\", \"preimitating\", \"preinhabit\", \"preinvest\", \"prelachrymal\", \"prelitigation\", \"premedication\", \"premium-focused\", \"premuroso\", \"preobediently\", \"preopposed\", \"preparingly\", \"preponderant\", \"prepronouncement\", \"prereconciled\", \"prereveal\", \"presbyter\", \"presells\", \"preseptal\", \"presidiario\", \"press-made\", \"presswomen\", \"prestudied\", \"presupplicated\", \"pretechnical\", \"preternaturalism\", \"pretreats\", \"prevailing\", \"preverifying\", \"prewillingly\", \"price-linked\", \"pride-blind\", \"priggisms\", \"primines\", \"primy\", \"pringar\", \"priority-aware\", \"pristineness\", \"privatizing\", \"pro-argentina\", \"pro-clerical\", \"pro-gay\", \"pro-malthusian\", \"pro-revolutionary\", \"pro-westernism\", \"proaudience\", \"probit\", \"procatalectic\", \"processed\", \"proclus\", \"procreationism\", \"proctotrypoidea\", \"prodigiousness\", \"production-reducing\", \"proexposure\", \"professionally-developed\", \"profilieren\", \"profound-seeming\", \"prognosticators\", \"progressive-leaning\", \"projectively\", \"proletarianise\", \"prologuised\", \"promilitarism\", \"promotable\", \"pronating\", \"proode\", \"propanone\", \"prophet-painter\", \"propliopithecus\", \"propound\", \"propylitization\", \"proscapula\", \"prosemination\", \"prosopopoeial\", \"prostatovesiculitis\", \"protaspis\", \"protein-bound\", \"proterobase\", \"protistological\", \"protocneme\", \"protogenist\", \"protopapas\", \"prototipo\", \"protrusile\", \"provecho\", \"provincial\", \"provostry\", \"prudent-looking\", \"prussification\", \"psammoma\", \"pseudo-areopagite\", \"pseudo-turkish\", \"pseudobankrupt\", \"pseudoconjugation\", \"pseudofilaria\", \"pseudolamellibranchia\", \"pseudonarcotic\", \"pseudopoetical\", \"pseudosolution\", \"pseuds\", \"psorosperm\", \"psychoclinical\", \"psychonomics\", \"psychotic\", \"pterocarpus\", \"pterygotous\", \"pubble\", \"publicization\", \"puckerers\", \"puelchean\", \"pugmark\", \"pulghere\", \"pully-hauly\", \"pulpy\", \"pulverulently\", \"punakha\", \"pundum\", \"punkey\", \"pupfish\", \"pura\", \"purges\", \"purple-backed\", \"purpureo-\", \"purveyal\", \"pussiest\", \"putrefazione\", \"puzzle-cap\", \"pycnostyle\", \"pyloralgia\", \"pyracantha\", \"pyres\", \"pyrocitric\", \"pyrone\", \"pyrrhonian\", \"pyxidate\", \"qnp\", \"quadrateness\", \"quadrigenarious\", \"quadrual\", \"quails\", \"quality-centered\", \"quantivalence\", \"quarter-breed\", \"quartos\", \"quasi-automatic\", \"quasi-consistently\", \"quasi-discriminatingly\", \"quasi-experimental\", \"quasi-guiltily\", \"quasi-intimate\", \"quasi-musical\", \"quasi-popularly\", \"quasi-rewarding\", \"quasi-temporal\", \"quaternionic\", \"quebrantado\", \"quellable\", \"querimoniousness\", \"quetsch\", \"quick-sighted\", \"quiet-eyed\", \"quilters\", \"quininic\", \"quinqueliteral\", \"quintette\", \"quirky-looking\", \"quizzically\", \"quotingly\", \"rabbit-mouthed\", \"raccorder\", \"rachiocentesis\", \"rackless\", \"radiar\", \"radicating\", \"radiodigital\", \"radiophoto\", \"radmilla\", \"raftered\", \"raggées\", \"rail-borne\", \"rainbow-arched\", \"rajab\", \"ralline\", \"rament\", \"ramoon\", \"ramusi\", \"randite\", \"ranjit\", \"rantoul\", \"rapidan\", \"rapture-giving\", \"rasboras\", \"raspings\", \"ratans\", \"ratification\", \"ratooner\", \"rattristare\", \"ravenel\", \"rawest\", \"raza\", \"rcm\", \"re-conjure\", \"re-enacting\", \"re-escort\", \"re-genesis\", \"re-rectification\", \"re-shadow\", \"reabstracted\", \"reacidify\", \"readdicts\", \"readornment\", \"reagent\", \"realisticize\", \"ream\", \"reappear\", \"rearmed\", \"reassembling\", \"reattract\", \"rebaptizes\", \"rebent\", \"rebought\", \"reburial\", \"recanceled\", \"recaudar\", \"receptaculitoid\", \"recharged\", \"recidivity\", \"reckling\", \"reclutar\", \"recollectedness\", \"recompensated\", \"reconciliatory\", \"reconnoitringly\", \"recontests\", \"recorked\", \"recreational\", \"rectifiably\", \"recumb\", \"recyclable\", \"red-haired\", \"red-thighed\", \"redcaps\", \"rededicated\", \"redento\", \"redictated\", \"redispose\", \"redocketing\", \"redrugged\", \"reduction-sensitive\", \"reed-crowned\", \"reelections\", \"reencouraging\", \"reeshie\", \"reexploration\", \"referencer\", \"refined-looking\", \"reflex\", \"reforfeiture\", \"refractiveness\", \"refront\", \"refuter\", \"regelating\", \"regimental\", \"registrato\", \"regraduate\", \"regrowths\", \"regurgitation\", \"rehecho\", \"reichsmark\", \"reimpatriation\", \"reincurred\", \"reinfusion\", \"reinstatable\", \"reinvasion\", \"reiteratively\", \"rejustifying\", \"relanced\", \"relaxar-se\", \"relentment\", \"relief-focused\", \"relinquo\", \"reluctantly\", \"remarkable-sounding\", \"remeet\", \"reminiscenceful\", \"remodifying\", \"remote-resistant\", \"remunerated\", \"rendezvousing\", \"renguear\", \"renouncer\", \"renullifying\", \"reopposing\", \"repaginating\", \"repatriated\", \"repentingly\", \"rephrase\", \"repletive\", \"repolarize\", \"reposure\", \"representative-elect\", \"reproachableness\", \"repromulgating\", \"republisher\", \"repurposed\", \"requisar\", \"rerivet\", \"rescindability\", \"resecuring\", \"reservado\", \"reshining\", \"resignadamente\", \"resinous\", \"resnatron\", \"resonating\", \"resp.\", \"respingibile\", \"response-activated\", \"restabelecer\", \"restiaceae\", \"restoringmoment\", \"restriving\", \"resulting\", \"resuscitato\", \"retaliators\", \"retention-focused\", \"reticulocyte\", \"retiral\", \"retractile\", \"retreatment\", \"retrocession\", \"retroperitoneally\", \"retumescence\", \"reupholstering\", \"reve\", \"revenue-driven\", \"reversification\", \"revilement\", \"revives\", \"revolutionize\", \"rewayle\", \"rexine\", \"rhabdomantist\", \"rhason\", \"rhetorical\", \"rhinocele\", \"rhizocarpous\", \"rhodic\", \"rhona\", \"rhyobasalt\", \"riappropriarsi\", \"ribboning\", \"ricco\", \"richellite\", \"ricketily\", \"ricostruire\", \"ridgeway\", \"riesig\", \"riformista\", \"right-handedly\", \"rights-of-way\", \"riguroso\", \"rimbase\", \"rinascere\", \"ringen\", \"rinsing\", \"ripe-tongued\", \"riprendersi\", \"risibilities\", \"risolutamente\", \"ritenuto\", \"rivalee\", \"riverly\", \"rk-up\", \"rng-dependent\", \"roanna\", \"robinson\", \"rochea\", \"rock-steady\", \"rockport\", \"rodless\", \"rogersite\", \"rolf\", \"romaean\", \"romanos\", \"rompish\", \"rontgenologic\", \"roommates\", \"rooyebok\", \"rorqual\", \"rose-faced\", \"rosenblum\", \"rosner\", \"rot-prone\", \"rotina\", \"roture\", \"rough-plumed\", \"roughshod\", \"round-table\", \"rousette\", \"row\", \"royalisation\", \"rscs\", \"rubberize\", \"rubidiums\", \"ruched\", \"ruderal\", \"ruffled\", \"rugi\", \"rule-of-thumb\", \"ruminal\", \"rumtytoo\", \"runnels\", \"rural-development-centered\", \"rusine\", \"rust-eaten\", \"rutaceae\", \"rwy\", \"saaremaa\", \"sabretooth\", \"saccharometabolism\", \"sachlich\", \"sacrificarse\", \"sad-eyed\", \"sadiron\", \"safenesses\", \"sage-leaf\", \"saharic\", \"sailye\", \"saiyids\", \"salamandrine\", \"sales-related\", \"salineno\", \"salmagundis\", \"salpingocele\", \"salter\", \"salukis\", \"salvianin\", \"sambunigrin\", \"samoyed\", \"sancord\", \"sandalwood-fragrant\", \"sandlots\", \"sang-de-boeuf\", \"sanicles\", \"sansar\", \"sapajou\", \"sapotilla\", \"saque\", \"sarcocele\", \"sarcostosis\", \"sarles\", \"sas\", \"satanicalness\", \"satinwood\", \"sattley\", \"saucer-shaped\", \"saurischia\", \"savages\", \"savory-leaved\", \"sawsmith\", \"sayids\", \"sbucciato\", \"scaife\", \"scalework\", \"scamped\", \"scanstor\", \"scapuloaxillary\", \"scared-looking\", \"scarpetti\", \"scattering\", \"scended\", \"sceptrosophy\", \"schedular\", \"scheming-looking\", \"schimpfwort\", \"schizoid\", \"schleppen\", \"schmoose\", \"scholium\", \"schoolmate\", \"schrödinger\", \"schwejda\", \"scient\", \"sciogliersi\", \"scissurellid\", \"sclerodermous\", \"scog\", \"scombroidea\", \"scooting\", \"scoreboards\", \"scostamento\", \"scottify\", \"scowling-faced\", \"scrapes\", \"scream\", \"screw-on\", \"scrieving\", \"scritch-owl\", \"scrota\", \"scrupulosities\", \"sculler\", \"scuppit\", \"scutibranchian\", \"scythed\", \"sea-coal\", \"sea-scented\", \"seaflower\", \"seamount\", \"season-independent\", \"sebastiano\", \"secessionist\", \"secouer\", \"sectionary\", \"securest\", \"sedge-free\", \"seductive\", \"seekonk\", \"segera\", \"seguido\", \"seisin\", \"sejenak\", \"selbstreflektierend\", \"selenodont\", \"self-addiction\", \"self-assertion\", \"self-center\", \"self-condemner\", \"self-created\", \"self-despair\", \"self-dissolved\", \"self-evidencing\", \"self-fitting\", \"self-harmingly\", \"self-infection\", \"self-learning\", \"self-observer\", \"self-poised\", \"self-rake\", \"self-reprovingly\", \"self-serving\", \"self-supportless\", \"self-variation\", \"selichoth\", \"sem-vergonha\", \"semencinae\", \"semi-intercostal\", \"semianarchistic\", \"semicabalistically\", \"semicomically\", \"semidecadent\", \"semielastically\", \"semiform\", \"semijubilee\", \"semimetaphoric\", \"seminium\", \"semipalmation\", \"semipopularized\", \"semirebelliousness\", \"semiseverity\", \"semitaur\", \"semiwaking\", \"senatorian\", \"senilities\", \"sense-data\", \"sensor\", \"sentient\", \"separable\", \"sepiolidae\", \"septets\", \"sepulchers\", \"sequoia\", \"serenading\", \"seri\", \"seriocomedy\", \"serolin\", \"serpentes\", \"serri-\", \"service-provided\", \"sesame\", \"sessional\", \"setoff\", \"seudah\", \"seventy-fifth\", \"sewage-related\", \"sexennium\", \"sextuples\", \"sfiorire\", \"sgranarsi\", \"shadchan\", \"shady-looking\", \"shaird\", \"shalloons\", \"shameface\", \"shangalla\", \"shapeups\", \"sharkful\", \"sharp-toed\", \"shaughn\", \"she-chattel\", \"sheathier\", \"sheepdogs\", \"sheeve\", \"shellblow\", \"shendful\", \"sherify\", \"shice\", \"shiite\", \"shinarump\", \"shipborne\", \"shiri\", \"shivas\", \"shockhead\", \"shogi\", \"shoplifted\", \"short-breasted\", \"short-snouted\", \"shortish\", \"shouse\", \"showiest\", \"shrews\", \"shrivel\", \"shue\", \"shuteyes\", \"sialolith\", \"sicana\", \"sickle-cell\", \"side-effecting\", \"sidelong\", \"sideways-oriented\", \"sierran\", \"sighten\", \"sign-manual\", \"significant-looking\", \"sikata\", \"silhouetted\", \"silipan\", \"sillibub\", \"silver-bar\", \"silvered\", \"simas\", \"simoniacally\", \"simplexes\", \"simulation\", \"sinatra\", \"singerie\", \"single-fuel\", \"single-school\", \"singlehearted\", \"sinistral\", \"sinologer\", \"sinzer\", \"sippar\", \"siroter\", \"sistering\", \"sitter\", \"six-barred\", \"sixfold\", \"sizeably\", \"skating\", \"skeller\", \"skewback\", \"skiffle\", \"skim-coulter\", \"skins\", \"skiting\", \"skrymir\", \"sky-throned\", \"skywriting\", \"slakers\", \"slape\", \"slaty\", \"slavonian\", \"sleeks\", \"sleeved\", \"slewing\", \"slight-built\", \"slinkiness\", \"slipshoe\", \"sloe-blue\", \"sloshed\", \"slow-crawling\", \"slubbed\", \"slumberous\", \"sly-tongued\", \"small-magnification\", \"smantellare\", \"smb\", \"smentirsi\", \"smirchless\", \"smog-protected\", \"smokily\", \"smooth-rinded\", \"smout\", \"smytrie\", \"snag-resistant\", \"snakeship\", \"snarl\", \"sneed\", \"sniffing\", \"snits\", \"snootful\", \"snow-crowned\", \"snowhouse\", \"snubness\", \"so-styled\", \"sobbarcarsi\", \"sobriedad\", \"sociate\", \"sociotechnical\", \"soddisfarsi\", \"sofronia\", \"soft-sleeping\", \"software-triggered\", \"soissons\", \"solar-inspired\", \"sole-commissioned\", \"solenesses\", \"solid-browed\", \"solifugae\", \"sollievo\", \"solusi\", \"somatochrome\", \"somersville\", \"somnifugous\", \"song-inspired\", \"sonnies\", \"soon-rotting\", \"sophia\", \"sopraffazione\", \"sordine\", \"sororially\", \"sortable\", \"sostenido\", \"souchet\", \"soul-rending\", \"sound-group\", \"soupled\", \"souslik\", \"southport\", \"sovrastimare\", \"space-borne\", \"spader\", \"spam\", \"spanking\", \"sparkback\", \"sparsely-tomatoed\", \"spates\", \"spavins\", \"spearflower\", \"specifiable\", \"spectacular-looking\", \"spectroscope\", \"speed-enhancing\", \"speleologists\", \"spendful\", \"spermatogenetic\", \"sperrig\", \"sphaerococcaceous\", \"sphenotic\", \"sphingine\", \"spices\", \"spielraum\", \"spillar\", \"spine-chilling\", \"spinosodenticulate\", \"spiracular\", \"spirit-bowed\", \"spirituell\", \"spite\", \"splanchnoptosia\", \"splendacious\", \"splenoparectasis\", \"sploshed\", \"spokesmanship\", \"spongewood\", \"spoofy\", \"sporadical\", \"sporopollenin\", \"sposa\", \"spr\", \"spread\", \"spring-blooming\", \"springtime\", \"sprucing\", \"spunky\", \"sputnik\", \"squalidly-dressed\", \"squanderingly\", \"squarrous\", \"squeakingly\", \"squiggly\", \"squirmer\", \"srinivasa\", \"stabilitas\", \"stackfreed\", \"staffers\", \"stagier\", \"stairbuilder\", \"stalinist\", \"stammeringly\", \"standard-gravity\", \"standpoint\", \"stapedial\", \"star-flower\", \"starets\", \"starry-bright\", \"stasisidia\", \"stately-beauteous\", \"statisticize\", \"stauder\", \"stchi\", \"steam-pocket\", \"stech\", \"steelless\", \"steere\", \"steinbock\", \"stemmiest\", \"stenophragma\", \"stephanite\", \"stercorin\", \"stereopticon\", \"sterilizer\", \"sternothyroid\", \"stevena\", \"stichoi\", \"sticky\", \"stifled\", \"still-new\", \"stimes\", \"stink-horn\", \"stipulant\", \"stivy\", \"stockinette\", \"stoichiological\", \"stomachachy\", \"stonatura\", \"stonehenge\", \"stoollike\", \"store-brand\", \"stormfulness\", \"stour\", \"stowlins\", \"straight-beaked\", \"straightwards\", \"strand-like\", \"straplike\", \"stratiformis\", \"strawberry-tasting\", \"streamside\", \"strengtheners\", \"stressato\", \"stricks\", \"strikebreaking\", \"stripings\", \"strokesman\", \"strong-tasted\", \"stropping\", \"struktur\", \"stub-end\", \"studebaker\", \"stuffed\", \"stundist\", \"sturare\", \"style-driven\", \"stylonichia\", \"suaveness\", \"subadministrated\", \"subapprobation\", \"subbank\", \"subcells\", \"subcollegiate\", \"subcontracted\", \"subdataries\", \"subdistinctive\", \"subelementally\", \"subexternal\", \"subgenera\", \"subhyalin\", \"subinvolution\", \"subjudiciaries\", \"sublimationist\", \"submembers\", \"submucous\", \"suboptimum\", \"subpeduncled\", \"subprincipals\", \"subrental\", \"subscriptive\", \"subsidium\", \"substance\", \"substrat\", \"subtenant\", \"subtitling\", \"subtribes\", \"suburbanites\", \"subvola\", \"succinct\", \"sucesores\", \"sudan\", \"suevian\", \"suffragitis\", \"sugarings\", \"suina\", \"sulci\", \"sulfomethylic\", \"sulla\", \"sulphinate\", \"sulphophthalic\", \"sulphury\", \"sumisamente\", \"summerland\", \"sun-attracting\", \"sun-protected\", \"sunday\", \"sunless\", \"sunspotted\", \"superaccomplished\", \"superaqueous\", \"supercandidly\", \"supercomplete\", \"superdesirously\", \"superepic\", \"superfete\", \"supergenerous\", \"superimpose\", \"superinsistence\", \"superloyal\", \"supernazione\", \"superpatriotically\", \"superradical\", \"superseamen\", \"supersmartness\", \"supersufficiency\", \"supervene\", \"suplex\", \"supplicants\", \"supportless\", \"suprachorioidal\", \"suprapapillary\", \"surakarta\", \"surf-tormented\", \"surgeon\", \"surpassingness\", \"surrogazione\", \"suscept\", \"suspicion-proof\", \"sustituciones\", \"suzerains\", \"svigorirsi\", \"swain\", \"swanhildas\", \"swartrutting\", \"sweat-house\", \"sweet-complaining\", \"sweetkins\", \"swiddens\", \"swimminess\", \"swingometer\", \"swither\", \"sword-play\", \"sycee\", \"syllabising\", \"sym-\", \"symmetrise\", \"symphoricarpos\", \"synagogical\", \"syncategorematic\", \"syncopism\", \"synechthry\", \"synodal\", \"syntagma\", \"syntonized\", \"syringo-\", \"systematically\", \"t-back\", \"tabetics\", \"tablewise\", \"taccs\", \"tachytely\", \"tactilogical\", \"taeniosome\", \"tagmemes\", \"tailcoated\", \"tains\", \"takeover\", \"tale-teller\", \"talkative\", \"tallitoth\", \"talpidae\", \"tamaulipecan\", \"tamiser\", \"tanagridae\", \"tangibly\", \"tankerabogus\", \"tantalifluoride\", \"tapageur\", \"taphrinaceae\", \"tar\", \"tarbell\", \"targumic\", \"tarogato\", \"tarsius\", \"tartryl\", \"tasksetting\", \"tatami-covered\", \"tatukira\", \"tauten\", \"tavis\", \"tax-supported\", \"taxpayer\", \"tdc\", \"teaching\", \"teapotful\", \"tearcat\", \"technicalize\", \"technology-constraining\", \"tectona\", \"teen-centered\", \"teetsook\", \"teilnahmslos\", \"tele-related\", \"telegraphically\", \"teleostome\", \"telesis\", \"telexing\", \"telocentric\", \"temerousness\", \"tempest-sundered\", \"temporariness\", \"ten-forties\", \"tencionar\", \"tenderling\", \"tenerezza\", \"tenophyte\", \"tensorship\", \"tenuemente\", \"tepid\", \"terbiasa\", \"terefah\", \"terkagum-kagum\", \"terminator\", \"terpedaya\", \"terrebonne\", \"territ\", \"tersembunyi\", \"tesack\", \"testamentally\", \"testor\", \"tetraamylose\", \"tetragamy\", \"tetranitroaniline\", \"tetrastylous\", \"teucrium\", \"text-writer\", \"thain\", \"thallogenous\", \"thanking\", \"thd\", \"thecae\", \"thelitises\", \"theocrasy\", \"theomagy\", \"theoriai\", \"therapists\", \"therian\", \"thermochemical\", \"thermoperiodic\", \"therological\", \"thevetia\", \"thick-haired\", \"thicks\", \"thin-barked\", \"thingumabob\", \"thiohydrolyze\", \"third-to-last\", \"thirtyish\", \"thomey\", \"thorbert\", \"thorough-dry\", \"thought-numb\", \"thrallborn\", \"threaten\", \"three-faced\", \"three-quarter-bred\", \"threescore\", \"thringing\", \"thrombophilia\", \"throw off\", \"thujas\", \"thunder-god\", \"thurgood\", \"thylakoid\", \"thyridial\", \"ti\", \"tichodrome\", \"tictoc\", \"tidiose\", \"tierza\", \"tight-looking\", \"tikker\", \"tilling\", \"timber-skeletoned\", \"time-independent\", \"timeservingness\", \"timucuan\", \"tindal\", \"tinkerdom\", \"tintamar\", \"tiplet\", \"tirannia\", \"tirshatha\", \"titanoniobate\", \"title-specific\", \"tituber\", \"tng\", \"toastmastery\", \"toccoa\", \"toelaten\", \"tohatchi\", \"toklas\", \"toll\", \"toluoles\", \"tomblet\", \"tomsk\", \"tongue-haltered\", \"tonkawa\", \"too-early\", \"toons\", \"top-armor\", \"topcrosses\", \"topnet\", \"topsl\", \"torcido\", \"torneio\", \"torrefication\", \"torticollis\", \"torvous\", \"totalist\", \"tottlish\", \"touggourt\", \"tourist-oriented\", \"tow-made\", \"town-cress\", \"tows\", \"toxins\", \"tpn\", \"tracheation\", \"trachymedusae\", \"tractorist\", \"tradition-eroding\", \"traffic-agnostic\", \"tragicality\", \"trainability\", \"tralasciare\", \"tramway\", \"tranquillizzare\", \"transaccidentation\", \"transcosmic\", \"transferencia\", \"transfusion-compatible\", \"transistorizing\", \"translocations\", \"transmogrify\", \"transphobia\", \"transpositive\", \"transvection\", \"trapiferous\", \"trasimeno\", \"traumatropism\", \"traverse-table\", \"treads\", \"treble-heavy\", \"treeline\", \"tremare\", \"trenchers\", \"treponemicide\", \"trezevant\", \"triangular-shaped\", \"tribofluorescent\", \"tricentenary\", \"trichogenous\", \"trichy\", \"tricostate\", \"triennias\", \"trigger-happy\", \"trihoral\", \"trilly\", \"trimont\", \"trinkgeld\", \"triozonide\", \"triple-check\", \"tripmadam\", \"trirhombohedral\", \"tristichic\", \"tritocerebrum\", \"trivalence\", \"trochate\", \"troglodytish\", \"tromple\", \"trophochromatin\", \"tropyl\", \"troublousness\", \"troweled\", \"truculencies\", \"truest\", \"truncating\", \"trustability\", \"truthfulnesses\", \"tryworks\", \"tsts\", \"tubby\", \"tuberculophobia\", \"tubster\", \"tucky\", \"tuition-based\", \"tumbarse\", \"tumpline\", \"tunggal\", \"tupaiidae\", \"turbidite\", \"turcian\", \"turkana\", \"turmoils\", \"turnip-tailed\", \"turreted\", \"tushed\", \"tutore\", \"twaddled\", \"tweedier\", \"twelve-stone\", \"twi-minded\", \"twice-collected\", \"twice-forgotten\", \"twice-patched\", \"twice-salvaged\", \"twice-unpaid\", \"twin-bearing\", \"twinner\", \"twittingly\", \"two-four\", \"two-shanked\", \"tx\", \"tympanichordal\", \"typer\", \"typhopneumonia\", \"tyranness\", \"tysonite\", \"uberous\", \"udi\", \"ugro-slavonic\", \"uittrekken\", \"ulla\", \"ultimata\", \"ultraconfident\", \"ultramaximal\", \"ultraspecialization\", \"umbellate\", \"umbrellalike\", \"umm\", \"un-chinese\", \"un-latinised\", \"unabashed-eyed\", \"unacceleratable\", \"unacknowledged\", \"unadjournment\", \"unadvisedness\", \"unalachtigo\", \"unamatively\", \"unancient\", \"unapart\", \"unapprenticed\", \"unarrival\", \"unassistedly\", \"unattributably\", \"unavian\", \"unbankable\", \"unbeauteousness\", \"unbeholfenheit\", \"unbereit\", \"unbibulousness\", \"unblissfulness\", \"unbookmark\", \"unbraze\", \"unbrutify\", \"unbutton\", \"uncanonicity\", \"uncasked\", \"uncensurability\", \"uncharacteristic-looking\", \"unchoke\", \"uncircumstantially\", \"uncleft\", \"unclutched\", \"uncollectibly\", \"uncommixed\", \"uncompliable\", \"unconcernment\", \"unconflicting\", \"unconsecutive\", \"uncontagious\", \"uncontrivable\", \"uncookedness\", \"uncostly\", \"uncreased\", \"uncrushable\", \"uncus\", \"undebilitating\", \"undecried\", \"undeftness\", \"undemonstrably\", \"under-compensate\", \"underachieves\", \"underboy\", \"undercliff\", \"underdeveloping\", \"underextension\", \"undergloom\", \"underivability\", \"underlunged\", \"underpaid\", \"underpromote\", \"underruling\", \"underside\", \"understating\", \"underterrestrial\", \"underward\", \"undesignated\", \"undeviated\", \"undignifiedness\", \"undiscording\", \"undispleased\", \"undiuretic\", \"undonkey\", \"undry\", \"uneagled\", \"uneffaceable\", \"uneloping\", \"unemployment-insured\", \"unenjoined\", \"unenvenomed\", \"unermesslich\", \"uneuphoniously\", \"unexcellent\", \"unexhumed\", \"unexplosively\", \"unfacetiousness\", \"unfarced\", \"unfeathered\", \"unfervently\", \"unfireproof\", \"unflexed\", \"unfollowable\", \"unforgiver\", \"unfraternally\", \"unfrizzy\", \"unfused\", \"ungazetted\", \"ungepflegt\", \"unglamorous\", \"ungoodness\", \"ungravely\", \"unguessed\", \"unhallucinated\", \"unharping\", \"unhedonistic\", \"unhindering\", \"unhoopable\", \"unhurriedly\", \"unicamerate\", \"unidimensional\", \"uniformisation\", \"unillustrious\", \"unimpeachableness\", \"unincarnate\", \"uninfectiously\", \"uninjured\", \"uninsurability\", \"uninterrogatively\", \"uninvincible\", \"uniped\", \"unisex\", \"unitization\", \"universologist\", \"unjuridic\", \"unkkoordiniert\", \"unlamented\", \"unlearnt\", \"unlifted\", \"unliturgize\", \"unlounging\", \"unmackly\", \"unmanlike\", \"unmatchableness\", \"unmellifluent\", \"unmesmeric\", \"unmined\", \"unmocking\", \"unmoralistic\", \"unmultiplicative\", \"unnaively\", \"unneglectfully\", \"unnormalised\", \"unobnoxious\", \"unofficialdom\", \"unordainable\", \"unovercome\", \"unpaltry\", \"unparted\", \"unpaying\", \"unperceptional\", \"unpersonalised\", \"unphonographed\", \"unplace\", \"unplight\", \"unponderousness\", \"unpraise\", \"unprejudicially\", \"unpreventible\", \"unproductive\", \"unproofread\", \"unprotuberantly\", \"unpunctilious\", \"unquarried\", \"unraking\", \"unrealistic-looking\", \"unrecognizable\", \"unreeving\", \"unregular\", \"unrelocatable\", \"unrepeatability\", \"unreprovableness\", \"unresounding\", \"unretreated\", \"unrhymed\", \"unrivalled\", \"unrra\", \"unsacrificial\", \"unsanctimonious\", \"unsavable\", \"unscholar\", \"unseal\", \"unsedulously\", \"unselling\", \"unserved\", \"unshapedness\", \"unshoe\", \"unsightless\", \"unsipped\", \"unslippery\", \"unsnarl\", \"unsolid\", \"unsoured\", \"unspiable\", \"unsprayed\", \"unstandardizable\", \"unstewardlike\", \"unstraightness\", \"unstuff\", \"unsubtractive\", \"unsummerlike\", \"unsurgically\", \"unswears\", \"unsystematicity\", \"untapered\", \"untemporally\", \"unterred\", \"unthewed\", \"untidal\", \"untolerable\", \"untraditional\", \"untransmutability\", \"untripping\", \"untumultuously\", \"unungun\", \"unvainly\", \"unvenomed\", \"unvertraut\", \"unvisualizable\", \"unvoweled\", \"unwary-looking\", \"unweighty\", \"unwillful\", \"unwoman\", \"unwresting\", \"up-lit\", \"upbrook\", \"updives\", \"uphasp\", \"uplifting\", \"uppity\", \"uproused\", \"upsprinkle\", \"upthrusted\", \"upwound\", \"uranophane\", \"urbana\", \"urease\", \"ureterosalpingostomy\", \"urgy\", \"urn-buried\", \"uromelus\", \"ursine\", \"usaha\", \"usfl\", \"ustbem\", \"utdatert\", \"utilizador\", \"utuh\", \"uw\", \"vacates\", \"vacla\", \"vagabondia\", \"vagosamente\", \"vakils\", \"valerolactone\", \"validous\", \"valorising\", \"valuing\", \"vanalstyne\", \"vanillate\", \"vanzetti\", \"vapourise\", \"variancy\", \"varificatory\", \"varro\", \"vasoactive\", \"vastha\", \"vaultedly\", \"vecino\", \"vegetable-feeding\", \"veil-wearing\", \"veldschoen\", \"velumen\", \"vendibleness\", \"venerato\", \"venisonlike\", \"ventilations\", \"ventromesal\", \"veralterung\", \"verbannt\", \"verbrauchsorientiert\", \"verdrehen\", \"verfeinern\", \"vergoyne\", \"veritates\", \"verloren\", \"vermin-eaten\", \"vernalize\", \"verplichten\", \"verschijnen\", \"versicolored\", \"verstockt\", \"verticity\", \"vervine\", \"verzeihen\", \"vesiculose\", \"vestinian\", \"vetted\", \"viaje\", \"vibrieren\", \"vice-director\", \"viceregent\", \"victoria\", \"video-only\", \"vierno\", \"vigils\", \"vilemente\", \"villanova\", \"vinci\", \"vinegar\", \"vintage\", \"violet-blindness\", \"viperoidea\", \"virginly\", \"virtualist\", \"visceralgia\", \"visibilmente\", \"viss\", \"vitalization\", \"vitilitigate\", \"vittore\", \"vivicremation\", \"vizier\", \"vocabulary-related\", \"vocular\", \"voidingly\", \"volcano\", \"volleyers\", \"volturno\", \"volupt\", \"vonsenite\", \"vorgabe\", \"vorticity\", \"vought\", \"vrijgeven\", \"vulgair\", \"vulture-rent\", \"wabblingly\", \"wadingly\", \"wage-decreasing\", \"wagoners\", \"wailing\", \"waitsmen\", \"waldenses\", \"wall\", \"wallower\", \"wamefou\", \"waneatta\", \"wantingness\", \"warangal\", \"wareman\", \"warmaking\", \"warranties\", \"warworker\", \"washo\", \"wastefully\", \"watchmaker\", \"water-front\", \"water-soaked\", \"waterheap\", \"waterwall\", \"wauked\", \"waveringness\", \"waxler\", \"wayward\", \"weaker\", \"weaponshow\", \"weather-informed\", \"weazand\", \"wedekind\", \"weekley\", \"wefts\", \"weighment\", \"weiman\", \"weitermachen\", \"well-achieved\", \"well-aware\", \"well-carpeted\", \"well-contracted\", \"well-disposedly\", \"well-feathered\", \"well-greaved\", \"well-judging\", \"well-modeled\", \"well-pondered\", \"well-risen\", \"well-sprayed\", \"well-trodden\", \"wellhead\", \"weltering\", \"wepman\", \"wesentlichste\", \"western-directed\", \"westward-sloping\", \"weys\", \"whangers\", \"wheam\", \"wheeler-dealer\", \"whenceeer\", \"wheyness\", \"whimling\", \"whipcraft\", \"whirlmagee\", \"whistleblower\", \"white-girdled\", \"white-veiled\", \"whitesark\", \"whitsuntide\", \"wholegrain\", \"whoresons\", \"wickeder\", \"wide-framed\", \"widens\", \"wiedergutmachen\", \"wiggle\", \"wild-type-specific\", \"wilier\", \"willie-waught\", \"wilmette\", \"winching\", \"wind-sheltered\", \"windjammer\", \"windsurf\", \"winegrower\", \"wings\", \"winona\", \"wintering\", \"wire-draw\", \"wirewalker\", \"wiseass\", \"wissensdurst\", \"witchy\", \"within-generation\", \"wittichenite\", \"woad\", \"woffler\", \"wolfing\", \"woman-operated\", \"wommera\", \"wons\", \"woodbox\", \"woodiness\", \"woodsy\", \"woolford\", \"woorali\", \"wordlessly\", \"workaway\", \"workload-reducing\", \"world-braving\", \"world-famed\", \"world-protected\", \"world-wise\", \"wormship\", \"worseness\", \"worthwhile\", \"wr\", \"wrathiness\", \"wretched\", \"wrister\", \"wrong-screwed\", \"wtemberg\", \"wwi\", \"wystand\", \"xanthogen\", \"xeno-\", \"xeres\", \"xipe\", \"xyla\", \"xylotypography\", \"yackety-yakking\", \"yaksha\", \"yanking\", \"yarmalke\", \"yavapai\", \"year-old\", \"yell\", \"yellow-ringleted\", \"yelly-hooing\", \"yeshivahs\", \"yield-oriented\", \"yocking\", \"yolane\", \"you-all\", \"youth-led\", \"yttrias\", \"yunfei\", \"zachariah\", \"zalucki\", \"zanuck\", \"zaruri\", \"zebrule\", \"zellerbach\", \"zephan\", \"zersplitterung\", \"zieger\", \"zinc-coat\", \"zino\", \"zithers\", \"zoftig\", \"zonitoides\", \"zoographer\", \"zoophagous\", \"zootopia\", \"zuccarino\", \"zunehmend\", \"zutat\", \"zygite\", \"zyme\", \"évora\", \"律\"];\n\n\n//# sourceURL=webpack://llexicom/./scripts/table.ts?");

/***/ }),

/***/ "./scripts/word.mustache":
/*!*******************************!*\
  !*** ./scripts/word.mustache ***!
  \*******************************/
/***/ ((module) => {

"use strict";
eval("module.exports = \"<!DOCTYPE html>\\n<div class=\\\"word-container\\\">\\n  <div class=\\\"header-section\\\">\\n    <h1 class=\\\"word-title\\\">{{word}}</h1>\\n  </div>\\n\\n  {{#pronunciation}}\\n  <div class=\\\"pronounce-section\\\">\\n    {{#ipa}}\\n    <div class=\\\"ipa\\\">{{ipa}}</div>\\n    {{/ipa}}\\n\\n    {{#ipa_uk}}\\n    <div class=\\\"ipa\\\">(英){{ipa_uk}}</div>\\n    {{/ipa_uk}}\\n\\n    {{#ipa_us}}\\n    <div class=\\\"ipa\\\">(米){{ipa_us}}</div>\\n    {{/ipa_us}}\\n\\n    {{#syllables}}\\n    <div class=\\\"syllable\\\">\\n      ({{syllables}})\\n    </div>\\n    {{/syllables}}\\n  </div>\\n  {{/pronunciation}}\\n\\n  <div class=\\\"priority-box\\\">\\n    <span class=\\\"priority\\\">{{priority}}</span>\\n  </div>\\n  \\n  {{#meanings}}\\n  <section class=\\\"section\\\">\\n    {{#.}}\\n    <div class=\\\"meaning-card\\\">\\n      <div class=\\\"meaning-title\\\">\\n        <div class=\\\"number\\\">\\n          {{index_plus_1}}.\\n        </div>\\n        <span class=\\\"part-of-speech\\\">\\n          {{part_of_speech_translated}}\\n        </span>\\n        <div class=\\\"definition-box\\\">\\n          <p class=\\\"definition\\\">{{definition}}</p>\\n        </div>\\n        {{#transitivity_translated}}\\n        <span class=\\\"transitivity-badge\\\">\\n          {{transitivity_translated}}\\n        </span>\\n        {{/transitivity_translated}}\\n      </div>\\n      <div class=\\\"meaning-content\\\">\\n\\t<div class=\\\"content\\\">\\n          <p class=\\\"english-definition\\\">{{english_definition}}</p>\\n          {{#examples}}\\n          {{^empty}}\\n          <ul class=\\\"example-list\\\">\\n            {{#.}}\\n            <li class=\\\"example-item\\\">\\n              <p class=\\\"sentence\\\">\\\"{{sentence}}\\\"</p>\\n              <p class=\\\"translation\\\"><em>{{translation}}</em></p>\\n            </li>\\n            {{/.}}\\n          </ul>\\n          {{/empty}}\\n          {{/examples}}\\n\\n          <div class=\\\"related-terms-group\\\">\\n\\t    {{#has_collocations}}\\n            <div class=\\\"related-column\\\">\\n              <h4>コロケーション:</h4>\\n              <ul class=\\\"simple-list\\\">\\n\\t\\t{{#collocations}}\\n\\t\\t{{^empty}}\\n\\t\\t<li>{{.}}</li>\\n\\t\\t{{/empty}}\\n\\t\\t{{/collocations}}\\n              </ul>\\n            </div>\\n\\t    {{/has_collocations}}\\n\\t    \\n\\t    {{#has_synonyms}}\\n            <div class=\\\"related-column\\\">\\n              <h4>類義語:</h4>\\n              <ul class=\\\"simple-list\\\">\\n\\t\\t{{#synonyms}}\\n\\t\\t{{^empty}}\\n\\t\\t<li>{{.}}</li>\\n\\t\\t{{/empty}}\\n\\t\\t{{/synonyms}}\\n              </ul>\\n            </div>\\n\\t    {{/has_synonyms}}\\n\\n\\t    {{#has_antonyms}}\\n            <div class=\\\"related-column\\\">\\n              <h4>対義語:</h4>\\n              <ul class=\\\"simple-list\\\">\\n\\t\\t{{#antonyms}}\\n\\t\\t<li>{{.}}</li>\\n\\t\\t{{/antonyms}}\\n\\t      </ul>\\n            </div>\\n\\t    {{/has_antonyms}}\\n          </div>\\n\\t</div>\\n      </div>\\n    </div>\\n    {{/.}}\\n  </section>\\n  {{/meanings}}\\n\\n  {{#readability_explanation}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">解説</h2>\\n    <div class=\\\"readability-explanation\\\">\\n      <p class=\\\"readability-level\\\"><strong>対象レベル:</strong> {{level}}</p>\\n      <p>{{{readability_explanation.text}}}</p>\\n    </div>\\n  </section>\\n  {{/readability_explanation}}\\n\\n  {{#etymology}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">語源</h2>\\n    <p>{{value}}</p>\\n  </section>\\n  {{/etymology}}\\n\\n\\n  {{#has_inflection_forms}}\\n  {{#inflection}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">活用</h2>\\n    {{#noun_plural}}\\n    <h3>名詞の形:</h3>\\n    <dl class=\\\"definition-list\\\">\\n      <dt>単数形</dt>\\n      <dd>{{noun_singular}}</dd>\\n      <dt>複数形</dt>\\n      <dd>{{noun_plural}}</dd>\\n    </dl>\\n    {{/noun_plural}}\\n    {{#verb_forms}}\\n    <h3>動詞の形:</h3>\\n    <dl class=\\\"definition-list\\\">\\n      <dt>現在形</dt>\\n      <dd>{{present_simple_joined}}</dd>\\n      <dt>過去形</dt>\\n      <dd>{{past_simple}}</dd>\\n      <dt>過去分詞</dt>\\n      <dd>{{past_participle}}</dd>\\n      <dt>現在分詞</dt>\\n      <dd>{{present_participle}}</dd>\\n    </dl>\\n    {{/verb_forms}}\\n  </section>\\n  {{/inflection}}\\n  {{/has_inflection_forms}}\\n\\n  {{#usage_notes}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">使用上の注意</h2>\\n    <div class=\\\"note-box\\\">\\n      {{{usage_notes.explanation}}}\\n    </div>\\n  </section>\\n  {{/usage_notes}}\\n\\n  {{#common_mistakes}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">よくある間違い</h2>\\n    {{#common_mistakes}}\\n    {{#examples}}\\n    {{^empty}}\\n    {{#.}}\\n    <div class=\\\"mistake-item\\\">\\n      <h4>間違い {{_index_plus_1}}:</h4>\\n      <p><span class=\\\"incorrect-example\\\">{{incorrect}}</span></p>\\n      <p><span class=\\\"correct-example\\\">{{correct}}</span></p>\\n      <p class=\\\"note-text\\\"><strong>補足:</strong> {{note}}</p>\\n    </div>\\n    {{/.}}\\n    {{/empty}}\\n    {{/examples}}\\n    {{/common_mistakes}}\\n  </section>\\n  {{/common_mistakes}}\\n\\n  {{#related_words}}\\n  {{#has_related_words}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">関連語句 <small class=\\\"sub-title\\\">(Related Words)</small></h2>\\n    <div class=\\\"related-terms-group\\\">\\n      {{#has_derivatives}}\\n      <div class=\\\"related-column\\\">\\n        <h3>派生語:</h3>\\n        <ul class=\\\"simple-list\\\">\\n\\t  {{#derivatives}}\\n          <li>{{.}}</li>\\n\\t  {{/derivatives}}\\n        </ul>\\n      </div>\\n      {{/has_derivatives}}\\n\\n      {{#has_phrasal_verbs}}\\n      <div class=\\\"related-column\\\">\\n        <h3>句動詞:</h3>\\n        <ul class=\\\"simple-list\\\">\\n\\t  {{#phrasal_verbs}}\\n          <li>{{.}}</li>\\n\\t  {{/phrasal_verbs}}\\n        </ul>\\n      </div>\\n      {{/has_phrasal_verbs}}\\n\\n      {{#has_idioms_phrases}}\\n      <div class=\\\"related-column\\\">\\n        <h3>イディオム・慣用句:</h3>\\n        <ul class=\\\"simple-list\\\">\\n\\t  {{#idioms_phrases}}\\n          <li>{{.}}</li>\\n\\t  {{/idioms_phrases}}\\n        </ul>\\n      </div>\\n      {{/has_idioms_phrases}}\\n\\n    </div>\\n  </section>\\n  {{/has_related_words}}\\n  {{/related_words}}\\n\\n  {{#level_frequency}}\\n  {{#level_frequency}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">レベル・頻度</h2>\\n    <dl class=\\\"definition-list\\\">\\n      <dt>CEFR</dt>\\n      <dd>{{CEFR}}</dd>\\n      <dt>Google Ngram 頻度</dt>\\n      <dd>{{frequency_google_ngram}}</dd>\\n    </dl>\\n  </section>\\n  {{/level_frequency}}\\n  {{/level_frequency}}\\n\\n  {{#has_example_sentences}}\\n  <section class=\\\"section\\\">\\n    <h2 class=\\\"section-title\\\">追加例文</h2>\\n    <ul class=\\\"additional-example-list\\\">\\n      {{#example_sentences}}\\n      {{^empty}}\\n      {{#.}}\\n      <li class=\\\"additional-example-item\\\">\\n        <p class=\\\"sentence\\\">\\\"{{{sentence}}}\\\"</p>\\n        <p class=\\\"translation\\\"><em>{{translation}}</em></p>\\n        <p class=\\\"meta-info\\\">\\n          タイプ: <span class=\\\"badge\\\">{{type_translated}}</span>,\\n          カテゴリ: <span class=\\\"badge\\\">{{meaning_category}}</span>\\n        </p>\\n      </li>\\n      {{/.}}\\n      {{/empty}}\\n      {{/example_sentences}}\\n    </ul>\\n  </section>\\n  {{/has_example_sentences}}\\n</div>\\n\";\n\n//# sourceURL=webpack://llexicom/./scripts/word.mustache?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./scripts/index.ts");
/******/ 	
/******/ })()
;