{"word":"type-agnostic","priority":"☆☆☆","meanings":[{"part_of_speech":"adjective","definition":"型に依存しない、型に左右されない、型を意識しない","english_definition":"(of code, software, etc.) designed to work regardless of the data type it is processing; not dependent on or specific to a particular data type.","examples":[{"sentence":"This function is type-agnostic; it can handle integers, strings, or any other data type.","translation":"この関数は型に依存しません。整数、文字列、またはその他のデータ型を処理できます。"},{"sentence":"A type-agnostic approach allows for greater flexibility and reusability of code.","translation":"型に依存しないアプローチにより、コードの柔軟性と再利用性が向上します。"},{"sentence":"The library provides type-agnostic containers that can store any kind of object.","translation":"このライブラリは、あらゆる種類のオブジェクトを格納できる型に依存しないコンテナを提供します。"}],"collocations":["type-agnostic function (型に依存しない関数)","type-agnostic code (型に依存しないコード)","type-agnostic library (型に依存しないライブラリ)","type-agnostic container (型に依存しないコンテナ)","type-agnostic programming (型に依存しないプログラミング)","type-agnostic design (型に依存しない設計)"],"synonyms":["generic","polymorphic","data-agnostic","type-independent"],"antonyms":["type-specific","type-dependent","type-aware"]},{"part_of_speech":"adjective","definition":"(より一般的に)特定の種類のデータや形式に依存しない","english_definition":"(more generally) not dependent on or specific to a particular kind of data or format.","examples":[{"sentence":"The system is designed to be platform-agnostic, so it can run on any operating system.","translation":"このシステムはプラットフォームに依存しないように設計されているため、あらゆるオペレーティングシステムで実行できます。"},{"sentence":"We need a solution that is vendor-agnostic, so we are not locked into a single provider.","translation":"特定のベンダーに縛られないように、ベンダーに依存しないソリューションが必要です。"}],"collocations":["platform-agnostic (プラットフォームに依存しない)","vendor-agnostic (ベンダーに依存しない)","technology-agnostic (テクノロジーに依存しない)"],"synonyms":["independent","neutral","universal","non-specific"],"antonyms":["specific","dependent","proprietary"]}],"etymology":{"value":"「type」（型）+「agnostic」（不可知論者、ここでは「知らない、気にしない」の意）からなる造語。プログラミングの文脈で、特定のデータ型に依存しないことを意味するために作られた。","priority":"★★☆"},"pronunciation":{"ipa":"/ˈtaɪp æɡˈnɒstɪk/","syllables":"type-ag-nos-tic"},"inflection":{"notes":"形容詞なので、比較級・最上級の変化はありません。"},"usage_notes":{"explanation":"「**type-agnostic**」は主にプログラミングやソフトウェア開発の分野で使用される専門用語です。特定のデータ型（整数、文字列、オブジェクトなど）に依存しないコードや関数、システムなどを指します。型に依存しない設計は、コードの再利用性や柔軟性を高めるために重要です。より広義には、特定のプラットフォーム、ベンダー、テクノロジーなどに依存しないことを意味する場合もあります。類似の概念として「generic programming（総称プログラミング）」や「polymorphism（ポリモーフィズム）」があります。","priority":"★★★"},"common_mistakes":{"examples":[{"incorrect":"✗ The code is type-agnostic with integers.","correct":"✓ The code is type-agnostic. / ✓ The code is type-agnostic and can handle integers.","note":"「type-agnostic」は、特定の型**だけ**に依存しないという意味ではありません。特定の型**全て**に依存しないという意味です。特定の型を挙げたい場合は、`and can handle`などで情報を追加します。"},{"incorrect":"✗ This is a type-agnostic code for Python only.","correct":"✓ This is type-agnostic code. / ✓ This code is written in Python and is type-agnostic.","note":"特定の言語に依存する場合は、`type-agnostic`の前に言語を限定する言葉を置くのは矛盾します。言語に依存しないことを強調したい場合は、`type-agnostic code`とだけ記述します。Pythonで書かれていて、かつ型に依存しないことを強調したい場合は、`This code is written in Python and is type-agnostic.`のように記述します。"}],"priority":"★★☆"},"related_words":{"derivatives":["agnostic (形容詞/名詞: 不可知論的な、不可知論者)"],"related_terms":["generic programming (総称プログラミング)","polymorphism (ポリモーフィズム)","duck typing (ダックタイピング)","template (テンプレート)"],"priority":"★★★"},"level_frequency":{"CEFR":"C2 (専門用語)","frequency_google_ngram":"低頻度 (Low frequency) - 専門分野で使われる用語。","priority":"★☆☆"},"readability_explanation":{"level":"C1","text":"「**type-agnostic**」は、主にプログラミングで使われる言葉で、「特定のデータの種類（型）に依存しない」という意味です。例えば、ある関数が整数でも文字列でも、どんな種類のデータでも同じように処理できる場合、その関数は「type-agnostic（型に依存しない）」と言えます。これは、プログラムをより柔軟にし、さまざまな状況で再利用できるようにするための重要な考え方です。より一般的には、特定の技術やプラットフォームに依存しないことを指す場合もあります。"},"example_sentences":[{"sentence":"The function is designed to be **type-agnostic**, allowing it to work with various data types.","translation":"その関数は、さまざまなデータ型で動作できるように、型に依存しないように設計されています。","type":"adjective","meaning_category":"型に依存しない"},{"sentence":"Using a **type-agnostic** approach can simplify code and reduce redundancy.","translation":"型に依存しないアプローチを使用すると、コードを簡素化し、冗長性を削減できます。","type":"adjective","meaning_category":"型に依存しない"},{"sentence":"The library provides **type-agnostic** data structures for efficient storage and retrieval.","translation":"このライブラリは、効率的な保存と検索のための型に依存しないデータ構造を提供します。","type":"adjective","meaning_category":"型に依存しない"},{"sentence":"The API is designed to be **type-agnostic**, accepting data in various formats.","translation":"このAPIは、さまざまな形式のデータを受け入れるように、型に依存しないように設計されています。","type":"adjective","meaning_category":"型に依存しない"}]}