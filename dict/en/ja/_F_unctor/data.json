{"word":"Functor","priority":"★★☆","meanings":[{"part_of_speech":"noun","definition":"(プログラミング) 関数型プログラミングにおけるファンクター。ある型コンストラクタに適用できる関数を表現する型クラス。","english_definition":"(programming) In functional programming, a functor is a type class that represents a mapping between categories (specifically, between types), allowing functions to be applied to values inside a container type without modifying the container itself.","examples":[{"sentence":"In Haskell, Functor is defined as a type class with a single method, fmap.","translation":"Haskellでは、Functorはfmapという単一のメソッドを持つ型クラスとして定義されています。"},{"sentence":"Functors allow you to apply a function to the elements of a list without explicitly iterating over the list.","translation":"ファンクターを使用すると、リストを明示的に反復処理せずに、リストの要素に関数を適用できます。"},{"sentence":"Many common data structures, such as lists, trees, and options, can be made into functors.","translation":"リスト、ツリー、オプションなど、多くの一般的なデータ構造をファンクターにすることができます。"}],"collocations":["Functor type class","fmap method","map function","applicative functor","monad functor"],"synonyms":["map","fmap"],"antonyms":[]}],"etymology":{"value":"The term 'functor' originates from category theory in mathematics, where it describes a mapping between categories. In programming, it borrows this concept to represent a mapping between types.","priority":"★★☆"},"pronunciation":{"ipa":"ˈfʌŋktər","syllables":"Func-tor"},"inflection":{"noun_plural":"Functors"},"usage_notes":{"explanation":"In functional programming, a Functor is a type class that abstracts the application of a function to a value within a container. It provides a way to apply a function to elements inside a data structure (like a list or a tree) without needing to know the specific details of how the data structure is implemented. The key operation is often called `fmap` or `map`, which takes a function and a functor instance, and returns a new functor instance with the function applied to its contents.","priority":"★★☆"},"common_mistakes":{"examples":[{"incorrect":"✗ Functors are only useful for simple data structures.","correct":"✓ Functors can be used with a wide variety of data structures, including complex ones.","note":"Functors are applicable to many different types of data structures, not just simple ones."},{"incorrect":"✗ Functors require you to modify the original container.","correct":"✓ Functors typically return a new container with the modified values, leaving the original container unchanged.","note":"Functors should not modify the original container; they should return a new one."}],"priority":"★★☆"},"related_words":{"derivatives":["functorial"],"phrasal_verbs":[],"related_concepts":["Applicative Functor","Monad","Category Theory","Type Class","Higher-Order Function"],"priority":"★★☆"},"level_frequency":{"frequency_programming":"Intermediate to Advanced Functional Programming","priority":"★★☆"},"readability_explanation":{"level":"Advanced","text":"A Functor is a concept from functional programming that allows you to apply a function to values inside a container (like a list) without changing the container itself. Think of it as a way to transform the contents of a box without opening the box. The main operation is often called `fmap` or `map`. This is useful for writing generic code that works with different types of containers."},"example_sentences":[{"sentence":"The `fmap` function applies a given function to each element inside the `Maybe` functor.","translation":"`fmap`関数は、与えられた関数を`Maybe`ファンクター内の各要素に適用します。","type":"example","meaning_category":"Function application"},{"sentence":"By using functors, we can write more modular and reusable code.","translation":"ファンクターを使用することで、よりモジュール化され、再利用可能なコードを書くことができます。","type":"example","meaning_category":"Code reusability"}]}