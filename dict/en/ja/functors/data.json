{"word":"functors","priority":"★★★","meanings":[{"part_of_speech":"noun","definition":"関手（数学の圏論における構造を保つ写像）","english_definition":"In category theory, a mapping between categories that preserves the categorical structure.","examples":[{"sentence":"Functors are fundamental constructs in category theory that map objects to objects and morphisms to morphisms.","translation":"関手は、対象を対象に、射を射に写す圏論の基本的な構成概念です。"},{"sentence":"The forgetful functor maps algebraic structures to their underlying sets.","translation":"忘却関手は代数構造をその基礎となる集合に写します。"}],"collocations":["covariant functor (共変関手)","contravariant functor (反変関手)","forgetful functor (忘却関手)","faithful functor (忠実関手)","adjoint functors (随伴関手)"],"synonyms":["morphism of categories"],"antonyms":[]},{"part_of_speech":"noun","definition":"関数オブジェクト（プログラミングにおける関数のように振る舞うオブジェクト）","english_definition":"In programming, an object that can be called as if it were a function.","examples":[{"sentence":"In C++, functors are often used to provide customizable behavior in algorithms.","translation":"C++では、関数的オブジェクトはアルゴリズムにカスタマイズ可能な振る舞いを提供するためによく使われます。"},{"sentence":"Python's __call__ method allows objects to act as functors.","translation":"Pythonの__call__メソッドにより、オブジェクトが関数的に振る舞うことができます。"}],"collocations":["function object (関数オブジェクト)","functor class (関数的オブジェクトクラス)","STL functor (STLの関数オブジェクト)"],"synonyms":["function object","callable object"],"antonyms":[]}],"etymology":{"value":"数学用語としては、'function（関数）'と'-or（行為者を示す接尾辞）'の合成。1930年代の圏論の創始者サミュエル・アイレンベルクとソーンダース・マックレーンによる造語。プログラミング用語としては、数学の概念から転用。","priority":"★★☆"},"pronunciation":{"ipa":"/ˈfʌŋktərz/","syllables":"func-tors"},"inflection":{"noun_forms":{"singular":"functor"}},"usage_notes":{"explanation":"「**functors**」は高度に専門的な用語で、主に2つの文脈で使用されます：\n1. 数学（特に圏論）では、圏間の構造を保つ写像を指します。共変関手（covariant）と反変関手（contravariant）の区別が重要です。\n2. プログラミングでは、関数のように呼び出せるオブジェクトを指します。C++のSTLや関数型プログラミング言語で頻繁に使用されます。\n文脈によって意味が大きく異なるため、使用分野を明確にする必要があります。数学的関手は抽象的な概念であるのに対し、プログラミングの関手的オブジェクトは具体的な実装です。","priority":"★★★"},"common_mistakes":{"examples":[{"incorrect":"✗ Functors in programming are exactly same as mathematical functors.","correct":"✓ Functors in programming are inspired by but not identical to mathematical functors.","note":"プログラミングの関手的オブジェクトは数学の関手からアイデアを得ていますが、同じ概念ではありません。"},{"incorrect":"✗ All function pointers are functors.","correct":"✓ Only objects that overload operator() or implement __call__ are functors.","note":"関数ポインタ自体は関数的オブジェクトではありません。C++ではoperator()をオーバーロードしたオブジェクト、Pythonでは__call__メソッドを実装したオブジェクトが該当します。"}],"priority":"★★☆"},"related_words":{"derivatives":["functorial (形容詞: 関手的な)","functorially (副詞: 関手的に)","bifunctor (名詞: 二変関手)"],"idioms_phrases":["endofunctor (自己関手)","exponential functor (指数関手)","free functor (自由関手)","representable functor (表現可能関手)"],"priority":"★★★"},"level_frequency":{"CEFR":"Not applicable (専門用語)","frequency_google_ngram":"低頻度 (Low frequency) - 専門分野限定の使用。","priority":"★☆☆"},"readability_explanation":{"level":"C2","text":"「**functors**」は高度に専門的な用語で、数学の圏論や上級プログラミングの文脈でのみ使用されます。数学では、圏間の構造を保つ写像を指し、共変関手と反変関手の区別が重要です。プログラミングでは、関数のように呼び出せるオブジェクトを指し、C++のoperator()オーバーロードやPythonの__call__メソッドが典型的な実装です。この用語を理解するには、圏論または高度なプログラミング概念の予備知識が必要です。"},"example_sentences":[{"sentence":"In Haskell, the **Functor** typeclass represents mathematical functors.","translation":"Haskellでは、Functor型クラスが数学的な関手を表現します。","type":"noun (programming)","meaning_category":"関数オブジェクト"},{"sentence":"The composition of two **functors** is itself a functor.","translation":"二つの関手の合成はそれ自身が関手となります。","type":"noun (mathematics)","meaning_category":"関手"},{"sentence":"STL algorithms often accept **functors** as predicate arguments.","translation":"STLアルゴリズムはしばしば関数的オブジェクトを述語引数として受け取ります。","type":"noun (programming)","meaning_category":"関数オブジェクト"},{"sentence":"Adjoint **functors** appear everywhere in modern mathematics.","translation":"随伴関手は現代数学の至る所に現れます。","type":"noun (mathematics)","meaning_category":"関手"}]}