{"word":"non-reentrant","priority":"☆☆☆","meanings":[{"part_of_speech":"adjective","definition":"(プログラミング)再入可能でない、リエントラントでない","english_definition":"(of a routine or program) not reentrant; not able to be safely called again before its previous invocation has completed.","examples":[{"sentence":"This function is non-reentrant and should not be called from interrupt handlers.","translation":"この関数は再入可能ではないため、割り込みハンドラから呼び出すべきではありません。"},{"sentence":"Using global variables can make a function non-reentrant.","translation":"グローバル変数を使用すると、関数が再入可能でなくなる可能性があります。"}],"collocations":["non-reentrant code","non-reentrant function","non-reentrant routine"],"synonyms":["not reentrant"],"antonyms":["reentrant"],"related_terms":["reentrant","thread-safe","race condition","critical section","mutex"]}],"etymology":{"value":"'non-' (not) + 'reentrant' (able to be entered again while still running).","priority":"★★★"},"pronunciation":{"ipa":"/ˌnɒn.riːˈɛn.trənt/","syllables":"non-re-en-trant"},"inflection":{"notes":"This word does not inflect."},"usage_notes":{"explanation":"In computer science, a routine or function is *reentrant* if it can be interrupted in the middle of its execution and then safely called again ('re-entered') before its previous invocation completes. A *non-reentrant* routine cannot be safely re-entered in this way, typically because it modifies global state (e.g., global variables) without proper synchronization. Calling a non-reentrant function from an interrupt handler or from multiple threads without protection can lead to unpredictable behavior and data corruption.","priority":"★★★"},"common_mistakes":{"examples":[{"incorrect":"✗ The code is non-reenter.","correct":"✓ The code is non-reentrant.","note":"The correct term is 'non-reentrant', not 'non-reenter'."}],"priority":"★★☆"},"level_frequency":{"level":"Advanced (Technical)","frequency_google_ngram":"Low frequency (specialized term)","priority":"★☆☆"},"readability_explanation":{"level":"C2","text":"'Non-reentrant' is a technical term in computer science, particularly in concurrent and real-time programming. It describes code (functions, routines) that cannot be safely called again while it's already running. This is usually because the code uses shared resources (like global variables) without proper locking mechanisms, which can lead to data corruption or unpredictable behavior if the code is interrupted and re-entered. Understanding this concept is crucial for writing reliable multithreaded or interrupt-driven software."},"example_sentences":[{"sentence":"The legacy code contained several non-reentrant functions, making it difficult to adapt for a multithreaded environment.","translation":"レガシーコードにはいくつかの再入可能でない関数が含まれており、マルチスレッド環境への適応を困難にしていました。","type":"general"},{"sentence":"The operating system kernel must ensure that critical sections are accessed only by reentrant code or with appropriate locking to prevent race conditions.","translation":"オペレーティングシステムのカーネルは、クリティカルセクションが再入可能なコードによってのみアクセスされるか、競合状態を防ぐための適切なロックを使用するように保証する必要があります。","type":"technical"}]}