{"word":"Equatable","priority":"☆☆☆","meanings":[{"part_of_speech":"protocol","definition":"(Swiftプログラミング)等価性を判定できる型","english_definition":"(Swift programming) A type that can be compared for value equality.","examples":[{"sentence":"Conforming to the Equatable protocol allows you to use == and != operators to compare instances of your custom types.","translation":"Equatableプロトコルに準拠することで、==演算子と!=演算子を使用して、カスタム型のインスタンスを比較できます。"}],"collocations":["conforming to Equatable (Equatableに準拠する)","Equatable protocol (Equatableプロトコル)","value equality (値の等価性)"],"synonyms":["Comparable (比較可能な)"],"antonyms":[]}],"etymology":{"value":"'equal'（等しい）に、抽象名詞を作る接尾辞 '-able' が付いたもの。","priority":"★★★"},"pronunciation":{"ipa":"/ˈiːkwətəbəl/","syllables":"e-qua-ta-ble"},"inflection":{},"usage_notes":{"explanation":"EquatableはSwiftのプロトコルであり、クラス、構造体、列挙型などのカスタム型が、等しいかどうかを比較できるようにします。Equatableプロトコルに準拠するには、`==`演算子を実装する必要があります。`!=`演算子はデフォルトで`==`演算子の結果を否定したものとして提供されます。","priority":"★★★"},"common_mistakes":{"examples":[{"incorrect":"struct Point { var x: Int; var y: Int } let p1 = Point(x: 1, y: 2); let p2 = Point(x: 1, y: 2); print(p1 == p2)","correct":"struct Point: Equatable { var x: Int; var y: Int } let p1 = Point(x: 1, y: 2); let p2 = Point(x: 1, y: 2); print(p1 == p2)","note":"Equatableプロトコルに準拠していない型に対して`==`演算子を使用するとコンパイルエラーが発生します。"},{"incorrect":"struct Point: Equatable { var x: Int; var y: Int; static func != (lhs: Point, rhs: Point) -> Bool { return lhs.x != rhs.x || lhs.y != rhs.y } }","correct":"struct Point: Equatable { var x: Int; var y: Int; static func == (lhs: Point, rhs: Point) -> Bool { return lhs.x == rhs.x && lhs.y == rhs.y } }","note":"Equatableプロトコルに準拠するには、`==`演算子を実装する必要があります。`!=`演算子は自動的に提供されるため、明示的に実装する必要はありません。"}],"priority":"★★☆"},"related_words":{"derivatives":["equality (等価性)","equal (等しい)"],"related_concepts":["Hashable (ハッシュ化可能な)","Comparable (比較可能な)"],"priority":"★★☆"},"level_frequency":{},"readability_explanation":{"level":"C1","text":"Equatableは、Swiftプログラミング言語で使用されるプロトコルです。Equatableプロトコルに準拠する型は、値が等しいかどうかを比較できます。これは、カスタムデータ型が等しいかどうかを判断する必要がある場合に役立ちます。Equatableプロトコルに準拠するには、`==`演算子を実装する必要があります。"},"example_sentences":[{"sentence":"To make a custom type equatable, you must declare that it conforms to the Equatable protocol.","translation":"カスタム型をEquatableにするには、Equatableプロトコルに準拠することを宣言する必要があります。","type":"general","meaning_category":"Equatableプロトコル準拠"},{"sentence":"The Equatable protocol requires you to implement the == operator.","translation":"Equatableプロトコルでは、==演算子を実装する必要があります。","type":"requirement","meaning_category":"Equatableプロトコルの要件"},{"sentence":"By conforming to Equatable, you can easily check if two instances of a struct are equal.","translation":"Equatableに準拠することで、構造体の2つのインスタンスが等しいかどうかを簡単に確認できます。","type":"usage","meaning_category":"Equatableの使用例"}]}