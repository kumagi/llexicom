{"word":"coroutines","priority":"★★☆","meanings":[{"part_of_speech":"noun","definition":"協調的サブルーチン、並列処理を可能にするプログラミング構造","english_definition":"A programming structure that allows execution to be suspended and resumed, enabling cooperative multitasking.","examples":[{"sentence":"Coroutines enable non-blocking asynchronous programming.","translation":"コルーチンは非同期プログラミングをブロックせずに可能にする"},{"sentence":"We implemented the game AI using coroutines.","translation":"ゲームAIをコルーチンを使って実装した"}],"technical_details":{"characteristics":["協調的マルチタスクを実現","明示的なyield/resume操作","スタックフレームを保持可能","スレッドより軽量"],"comparison":{"threads":"プリエンプティブなマルチタスク","functions":"単一の実行フロー","generators":"より制限されたコルーチン"}}}],"etymology":{"value":"co-（共同） + routine（ルーチン）。1958年Melvin Conwayが最初に使用した用語","priority":"★☆☆"},"pronunciation":{"ipa":"/ˈkoʊruːtiːnz/","syllables":"co-ro-u-tines"},"related_terms":{"programming_concepts":["async/await","generators","fibers","green threads","event loops"],"implementations":["Python generators","Kotlin coroutines","C++20 coroutines","Unity coroutines","Lua coroutines"]},"usage_contexts":[{"domain":"ゲーム開発","examples":["アニメーションの順次処理","AIの状態管理"]},{"domain":"非同期プログラミング","examples":["I/O待機処理","ネットワーク通信"]}],"example_code":[{"language":"Python","code":"async def fetch_data():\n    data = await api_call()\n    process(data)","description":"非同期API呼び出しの例"},{"language":"Kotlin","code":"fun main() = runBlocking {\n    launch {\n        delay(1000L)\n        println(\"World!\")\n    }\n    println(\"Hello,\")}","description":"コルーチンによる遅延処理"}],"common_mistakes":[{"error":"スタックオーバーフローのリスク","solution":"深い再帰呼び出しを避ける"},{"error":"スレッドセーフでない操作","solution":"適切な同期機構を使用"}],"learning_resources":[{"type":"書籍","title":"The Art of Computer Programming","author":"Donald Knuth"},{"type":"オンライン","title":"Kotlin Coroutines Guide","url":"https://kotlinlang.org/docs/coroutines-guide.html"}]}