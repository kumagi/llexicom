{"word":"non-mutative","priority":"★★☆","meanings":[{"part_of_speech":"adjective","definition":"(プログラミング)元のデータを変更しない、副作用がない","english_definition":"(of a function or operation in programming) not changing the original data; without side effects.","examples":[{"sentence":"A non-mutative function returns a new object instead of modifying the existing one.","translation":"非破壊的な関数は、既存のオブジェクトを変更する代わりに、新しいオブジェクトを返します。"},{"sentence":"Using non-mutative operations can help prevent unexpected bugs.","translation":"非破壊的な操作を使用すると、予期しないバグを防ぐのに役立ちます。"}],"collocations":["non-mutative operation","non-mutative function","non-mutative method"],"synonyms":["immutable","pure","side-effect-free"],"antonyms":["mutative","destructive"]}],"etymology":{"value":"「non-」+「mutative」。mutativeは「変化させる性質を持つ」という意味。","priority":"★★★"},"pronunciation":{"ipa":"/ˌnɒnˈmjuːtətɪv/","syllables":"non-mu-ta-tive"},"inflection":{"notes":"形容詞なので、比較級・最上級の変化はありません。"},"usage_notes":{"explanation":"「**non-mutative**」は、主にプログラミングの文脈で使用される用語で、関数や操作が元のデータ構造を変更しないことを指します。代わりに、新しいデータ構造を生成して返します。これは、関数型プログラミングの重要な概念であり、副作用を避けることで、コードの予測可能性と保守性を高めます。イミュータブル（immutable）なデータ構造と密接に関連しています。","priority":"★★★"},"common_mistakes":{"examples":[{"incorrect":"✗ The array is non-mutative, so I can't add elements.","correct":"✓ The array is immutable, so I can't add elements.","note":"「non-mutative」は操作や関数を指すことが多く、データ構造自体が変更できない場合は「immutable」を使う方が適切です。"},{"incorrect":"✗ This function is mutative, so it's non-mutative.","correct":"✓ This function is mutative, so it's not non-mutative.","note":"mutativeとnon-mutativeは対義語なので、両立することはありません。"}],"priority":"★★☆"},"related_words":{"derivatives":["mutation (名詞: 突然変異、変化)","mutate (動詞: 変化する、突然変異を起こす)","mutative (形容詞: 変化させる性質を持つ)","immutable (形容詞: 不変の、変更不能な)","immutability (名詞: 不変性、変更不能性)"],"priority":"★★☆"},"level_frequency":{"CEFR":"C2","frequency_google_ngram":"低頻度 (Low frequency) - 専門用語。","priority":"★☆☆"},"readability_explanation":{"level":"C1","text":"「**non-mutative**」は、プログラミングで使われる言葉で、関数や操作が元のデータを変えないことを意味します。たとえば、リストに要素を追加する関数が、元のリストを変更せずに新しいリストを作る場合、その関数は「non-mutative」です。これは、プログラムが複雑になったときに、どこでデータが変更されたかを追いやすくするために重要な考え方です。関数型プログラミングでは、特に重視されます。"},"example_sentences":[{"sentence":"The `map` function in JavaScript is **non-mutative**.","translation":"JavaScriptの`map`関数は非破壊的です。","type":"adjective","meaning_category":"元のデータを変更しない"},{"sentence":"Using **non-mutative** data structures improves code predictability.","translation":"非破壊的なデータ構造を使用すると、コードの予測可能性が向上します。","type":"adjective","meaning_category":"元のデータを変更しない"},{"sentence":"A **non-mutative** approach helps avoid side effects in your code.","translation":"非破壊的なアプローチは、コード内の副作用を回避するのに役立ちます。","type":"adjective","meaning_category":"元のデータを変更しない"}]}