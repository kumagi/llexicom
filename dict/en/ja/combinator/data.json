{"word":"combinator","priority":"★★☆","meanings":[{"part_of_speech":"noun","definition":"(プログラミング) 他の関数を組み合わせて新しい関数を作る関数、またはそのような関数のためのパターン","english_definition":"(programming) A function that combines other functions to create a new function; or a pattern for such functions.","examples":[{"sentence":"Combinators are a powerful tool in functional programming.","translation":"コンビネータは関数型プログラミングにおける強力なツールです。"},{"sentence":"The Y combinator is a classic example of a fixed-point combinator.","translation":"Yコンビネータは、不動点コンビネータの古典的な例です。"}],"collocations":["Y combinator","fixed-point combinator","parser combinator","function combinator"],"synonyms":["higher-order function"],"antonyms":[]}],"etymology":{"value":"\"combine\"（組み合わせる）という単語に、動作主を表す接尾辞 \"-ator\" が付いたもの。","priority":"★★★"},"pronunciation":{"ipa":"/ˈkɒmbɪneɪtər/","syllables":"com-bi-na-tor"},"inflection":{"noun_plural":"combinators"},"usage_notes":{"explanation":"「**combinator**」は主にプログラミング、特に関数型プログラミングの分野で使用される用語です。コンビネータは、関数を引数として受け取り、それらを組み合わせて新しい関数を生成する高階関数です。コンビネータは、特定の制御フローやデータ変換パターンを抽象化し、再利用可能なコードを作成するために使用されます。コンビネータは、ラムダ計算の理論的基盤とも深く関連しています。","priority":"★★☆"},"common_mistakes":{"examples":[{"incorrect":"✗ The combinator combined the data with the function.","correct":"✓ The combinator combined the functions.","note":"コンビネータは関数を組み合わせるものであり、データと関数を組み合わせるものではありません。"},{"incorrect":"✗ Combinators are only used in object-oriented programming.","correct":"✓ Combinators are primarily used in functional programming.","note":"コンビネータは主に、関数型プログラミングで使用されます。"}],"priority":"★★★"},"related_words":{"derivatives":["combination","combine"],"related_concepts":["lambda calculus","functional programming","higher-order function","composition"],"priority":"★★★"},"level_frequency":{"frequency_google_ngram":"比較的低頻度 (Relatively low frequency) - プログラミングの専門用語。","priority":"★★☆"},"readability_explanation":{"level":"C1","text":"「**combinator**」は、プログラミング、特に関数型プログラミングで使われる専門用語です。これは、他の関数を組み合わせて新しい関数を作るための関数またはパターンを指します。関数を引数として受け取り、それらを組み合わせて新しい関数を返す高階関数の一種です。Yコンビネータなどの特定のコンビネータは、理論的な重要性を持っています。コンビネータは、コードの再利用性と抽象化を高めるのに役立ちます。"},"example_sentences":[{"sentence":"This library provides a set of parser **combinators** for building complex parsers.","translation":"このライブラリは、複雑なパーサーを構築するためのパーサーコンビネータのセットを提供します。","type":"noun","meaning_category":"プログラミング"},{"sentence":"Using **combinators**, we can define complex control flow patterns in a declarative way.","translation":"コンビネータを使用することで、複雑な制御フローパターンを宣言的に定義できます。","type":"noun","meaning_category":"プログラミング"},{"sentence":"The power of **combinators** lies in their ability to compose simple functions into more complex ones.","translation":"コンビネータの力は、単純な関数をより複雑な関数に合成する能力にあります。","type":"noun","meaning_category":"プログラミング"}]}