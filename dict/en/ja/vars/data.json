{"word":"vars","priority":"☆☆☆","meanings":[{"part_of_speech":"noun","definition":"(Python) オブジェクトの __dict__ 属性を返す関数。モジュール、クラス、インスタンスなどの属性を辞書として取得する。","english_definition":"(Python) A function that returns the __dict__ attribute of an object. It retrieves the attributes of a module, class, instance, etc., as a dictionary.","examples":[{"sentence":"print(vars(my_object))","translation":"print(vars(my_object))","note":"オブジェクト my_object の属性を辞書として表示します。"},{"sentence":"print(vars(MyClass))","translation":"print(vars(MyClass))","note":"クラス MyClass の属性（クラス変数、メソッドなど）を辞書として表示します。"},{"sentence":"import math\nprint(vars(math))","translation":"import math\nprint(vars(math))","note":"math モジュールの属性（関数、定数など）を辞書として表示します。"}],"collocations":["vars(object)","vars() (引数なしの場合、locals() と同じ)"],"synonyms":["__dict__ (属性を直接参照する場合)","dir() (属性のリストを返す)","locals() (ローカル変数の辞書を返す)","globals() (グローバル変数の辞書を返す)"],"antonyms":[],"related_concepts":["__dict__ attribute","introspection","reflection","attribute access"],"use_cases":["Debugging: オブジェクトの状態を調べる。","Dynamic attribute access: 属性名を文字列で指定してアクセスする。","Metaprogramming: プログラムの構造を動的に変更する。"]}],"etymology":{"value":"Python の組み込み関数であり、'variables' の短縮形であると推測される。オブジェクトの属性を操作するための関数として設計された。","priority":"★☆☆"},"pronunciation":{"ipa":"/vɑːrz/","syllables":"vars"},"inflection":{"notes":"複数形はありません。関数名として使用されるため、活用もありません。"},"usage_notes":{"explanation":"`vars()` は Python の組み込み関数で、オブジェクトの属性を辞書として返します。引数としてオブジェクト（モジュール、クラス、インスタンスなど）を受け取ります。引数なしで `vars()` を呼び出すと、`locals()` と同じように、現在のローカルスコープの変数の辞書が返されます。`vars()` は、オブジェクトの `__dict__` 属性にアクセスするのとほぼ同じですが、`__dict__` 属性を持たないオブジェクトでも `vars()` は動作します。主にデバッグや、オブジェクトの属性を動的に操作する際に使用されます。","priority":"★★☆"},"common_mistakes":{"examples":[{"incorrect":"✗ vars = 10","correct":"✓ my_vars = 10","note":"`vars` は組み込み関数名なので、変数名として使用することは避けるべきです。"},{"incorrect":"✗ vars(10)","correct":"✓ vars(int)","note":"整数リテラル `10` は属性を持たないため、`vars(10)` はエラーになります。`vars(int)` のように、型オブジェクトを渡す必要があります。"}],"priority":"★☆☆"},"related_words":{"derivatives":[],"related_functions":["dir()","locals()","globals()","getattr()","setattr()","hasattr()"],"related_concepts":["introspection","reflection","metaclass","dynamic programming"],"priority":"★★☆"},"level_frequency":{"CEFR":"C2","frequency_google_ngram":"低頻度 (Low frequency) - Python プログラミングに特有の関数であり、一般的な英語の語彙ではない。","priority":"★☆☆"},"readability_explanation":{"level":"C1","text":"`vars()` は Python プログラミング言語で使用される関数です。オブジェクトの属性を辞書として取得するために使用されます。たとえば、クラスのインスタンスを作成し、`vars()` を使用してそのインスタンスのすべての変数とその値を表示できます。これは、オブジェクトの状態を調べたり、プログラムをデバッグしたりするのに役立ちます。`vars()` は、より高度なプログラミング概念である内省とメタプログラミングに関連しています。"},"example_sentences":[{"sentence":"Use `vars()` to inspect the attributes of a class instance.","translation":"クラスインスタンスの属性を調べるために `vars()` を使用します。","type":"usage","meaning_category":"属性の検査"},{"sentence":"The `vars()` function is useful for debugging complex objects.","translation":"`vars()` 関数は、複雑なオブジェクトをデバッグするのに役立ちます。","type":"usage","meaning_category":"デバッグ"},{"sentence":"You can use `vars()` to dynamically access attributes by name.","translation":"`vars()` を使用して、名前で属性に動的にアクセスできます。","type":"usage","meaning_category":"動的な属性アクセス"}]}