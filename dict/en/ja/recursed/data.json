{"word":"recursed","priority":"★★☆","meanings":[{"part_of_speech":"verb","transitivity":"vi","definition":"(プログラミング)再帰した、再帰呼び出しを行った","english_definition":"(in programming) to call itself; to perform recursion.","examples":[{"sentence":"The function recursed until it reached the base case.","translation":"その関数は、ベースケースに到達するまで再帰した。"},{"sentence":"The algorithm recursed to solve the smaller subproblems.","translation":"そのアルゴリズムは、より小さなサブ問題を解決するために再帰した。"}],"collocations":["recursed deeply","recursed efficiently","recursed infinitely (無限に再帰した)"],"synonyms":["called itself recursively"],"antonyms":["iterated"],"domains":["computer science","programming"]}],"etymology":{"value":"動詞「recurse」の過去形・過去分詞。recurseは「再帰する」という意味で、ラテン語の「recurrere」（再び走る、戻る）に由来する。","priority":"★★☆"},"pronunciation":{"ipa":"/rɪˈkɜːrst/","syllables":"re-cursed"},"inflection":{"verb_forms":{"present_simple":["recurse","recurses"],"past_simple":"recursed","past_participle":"recursed","present_participle":"recursing"}},"usage_notes":{"explanation":"「**recursed**」は、プログラミングの文脈で使われる単語で、「再帰した」という意味です。再帰とは、関数が自分自身を呼び出すプログラミング技法のことです。これは、問題をより小さな、同じ種類のサブ問題に分割し、それらを解決することで、元の問題を解決するのに役立ちます。再帰は、ツリー構造の探索や、複雑なアルゴリズムの実装によく使用されます。再帰呼び出しが停止しない場合、無限ループが発生する可能性があるため、注意が必要です。","priority":"★★☆"},"common_mistakes":{"examples":[{"incorrect":"✗ The program was recursed by the user.","correct":"✓ The program recursed.","note":"「recurse」は自動詞であり、通常は受動態で使用しません。"},{"incorrect":"✗ He recursed the problem.","correct":"✓ He solved the problem recursively.","note":"「recurse」は、関数やアルゴリズムが自分自身を呼び出すことを意味します。問題を再帰的に解決する場合は、「solve recursively」のように表現します。"}],"priority":"★★☆"},"related_words":{"derivatives":["recurse (動詞: 再帰する)","recursion (名詞: 再帰)","recursive (形容詞: 再帰的な)","recursively (副詞: 再帰的に)"],"domains":["computer science","programming"],"priority":"★★☆"},"level_frequency":{"CEFR":"C2 (専門的な文脈のみ)","frequency_google_ngram":"低頻度 (Low frequency) - プログラミング関連の専門用語。","priority":"★☆☆"},"readability_explanation":{"level":"C1","text":"「**recursed**」は、プログラミングで関数が自分自身を呼び出す「再帰」という概念に関連する専門用語です。これは、複雑な問題を小さな、自己相似のサブ問題に分割して解決する手法です。再帰は、データ構造の探索やアルゴリズムの実装に役立ちますが、無限ループを避けるために終了条件を適切に設定する必要があります。一般的な会話ではほとんど使用されず、プログラミングやコンピュータサイエンスの文脈でのみ現れます。"},"example_sentences":[{"sentence":"The function **recursed** multiple times to calculate the factorial.","translation":"その関数は階乗を計算するために何度も再帰した。","type":"verb","meaning_category":"再帰した"},{"sentence":"The quicksort algorithm **recursed** on smaller subarrays.","translation":"クイックソートアルゴリズムは、より小さなサブ配列に対して再帰した。","type":"verb","meaning_category":"再帰した"},{"sentence":"If the base case isn't defined correctly, the function will **recurse** infinitely.","translation":"ベースケースが正しく定義されていない場合、関数は無限に再帰するだろう。","type":"verb","meaning_category":"再帰した"}]}