{"word":"defunctionalization","priority":"☆☆☆","meanings":[{"part_of_speech":"noun","definition":"(プログラミング) 関数型プログラミングにおいて、高階関数呼び出しをデータ構造とswitch文に変換する最適化手法。","english_definition":"(In functional programming) A program transformation that replaces higher-order function calls with data structures and a switch statement.","examples":[{"sentence":"Defunctionalization can improve performance by eliminating the overhead of function calls.","translation":"脱関数化は、関数呼び出しのオーバーヘッドを排除することでパフォーマンスを向上させることができる。"},{"sentence":"The compiler uses defunctionalization to optimize the code.","translation":"コンパイラは、コードを最適化するために脱関数化を使用する。"}],"collocations":["apply defunctionalization","perform defunctionalization","defunctionalization transformation"],"synonyms":["lambda lifting","closure conversion"],"antonyms":[]}],"etymology":{"value":"\"de-\" (除去) + \"functionalization\" (関数化) から構成される。関数型プログラミングの文脈で、関数呼び出しを関数以外のものに置き換えることから。","priority":"☆☆☆"},"pronunciation":{"ipa":"/ˌdiːfʌŋkʃənəlɪˈzeɪʃən/","syllables":"de-func-tion-al-i-za-tion"},"inflection":{"noun_plural":"defunctionalizations"},"usage_notes":{"explanation":"Defunctionalization is a program transformation technique primarily used in functional programming to eliminate higher-order functions. It involves representing function closures as data structures and replacing function calls with a central 'apply' function (often a switch statement) that dispatches to the appropriate code based on the data structure. This can improve performance by reducing function call overhead and enabling other optimizations. It is especially useful in languages that lack efficient support for higher-order functions or when targeting platforms with limited capabilities.","priority":"☆☆☆"},"common_mistakes":{"examples":[{"incorrect":"✗ Defunctionalization is used to create functions.","correct":"✓ Defunctionalization is used to eliminate function calls.","note":"Defunctionalization replaces function calls with data structures, not the other way around."}],"priority":"☆☆☆"},"related_words":{"derivatives":["defunctionalize (verb)"],"phrasal_verbs":[],"related_concepts":["higher-order functions","closures","program transformation","compiler optimization","functional programming"]},"level_frequency":{"CEFR":"C2","frequency_google_ngram":"非常に低頻度 (Very low frequency) - 関数型プログラミングの専門用語。","priority":"☆☆☆"},"readability_explanation":{"level":"C2","text":"Defunctionalization is a complex program transformation technique used in functional programming. It's about making code more efficient by getting rid of direct function calls. Instead of calling functions directly, the code uses data structures to represent functions and then uses a special 'apply' function to decide what code to run. This is useful when you want to optimize code or when you're working with a system that doesn't handle functions very well. It's an advanced topic, so you'll usually only see it discussed in specialized programming contexts."},"example_sentences":[{"sentence":"The compiler performed defunctionalization on the code to improve its efficiency.","translation":"コンパイラはコードの効率を改善するために脱関数化を実行した。","type":"general","meaning_category":"プログラミング"},{"sentence":"Defunctionalization transforms higher-order functions into first-order data structures.","translation":"脱関数化は高階関数を一次のデータ構造に変換する。","type":"technical","meaning_category":"プログラミング"}]}