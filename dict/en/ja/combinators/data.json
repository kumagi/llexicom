{"word":"combinators","priority":"★★☆","meanings":[{"part_of_speech":"noun","definition":"(プログラミング) コンビネータ: 関数型プログラミングにおいて、引数として関数を取り、それらを組み合わせて新しい関数を生成する高階関数。","english_definition":"(programming) A combinator: a higher-order function that takes functions as arguments and returns a new function by combining them.","examples":[{"sentence":"Combinators are a fundamental concept in functional programming.","translation":"コンビネータは関数型プログラミングにおける基本的な概念です。"},{"sentence":"The K combinator returns its first argument, discarding the second.","translation":"Kコンビネータは最初の引数を返し、2番目の引数を破棄します。"},{"sentence":"Using combinators can lead to more concise and reusable code.","translation":"コンビネータを使用すると、より簡潔で再利用可能なコードを作成できます。"}],"collocations":["SKI combinators","combinator library","combinator parsing","combinator expression","combinator logic"],"synonyms":["higher-order function","function composition"],"antonyms":[],"related_terms":["lambda calculus","functional programming","currying","partial application"]}],"etymology":{"value":"The term 'combinator' originates from combinatorial logic, a branch of mathematical logic. It was introduced by Moses Schönfinkel and Haskell Curry in the 1920s.","priority":"★★★"},"pronunciation":{"ipa":"ˈkɒmbɪneɪtərz","syllables":"com-bi-na-tors"},"inflection":{"noun_plural":"combinators"},"usage_notes":{"explanation":"In functional programming, combinators are used to build complex logic by composing simpler functions. They often involve techniques like currying and partial application. Combinators are particularly useful for creating reusable and modular code. They are closely related to lambda calculus, a formal system in mathematical logic that provides a theoretical foundation for functional programming.","priority":"★★★"},"common_mistakes":{"examples":[{"incorrect":"✗ Combinators are used in object-oriented programming.","correct":"✓ Combinators are primarily used in functional programming.","note":"Combinators are a core concept in functional programming, not object-oriented programming."},{"incorrect":"✗ Combinators only take one argument.","correct":"✓ Combinators can take multiple arguments, including functions.","note":"Combinators are higher-order functions, meaning they can take functions as arguments."}],"priority":"★★☆"},"related_words":{"derivatives":["combinatorial","combination"],"phrasal_verbs":[],"related_concepts":["lambda calculus","functional programming","currying","partial application","SKI combinators","Y combinator"],"priority":"★★★"},"level_frequency":{"CEFR":"C2","frequency_google_ngram":"Low frequency, specific to technical contexts (programming, mathematics).","priority":"★☆☆"},"readability_explanation":{"level":"C1","text":"'Combinators' are a concept primarily used in functional programming and mathematical logic. They are higher-order functions that take other functions as arguments and return a new function. Understanding combinators requires familiarity with functional programming principles such as function composition, currying, and lambda calculus. They are used to create more modular and reusable code by combining simpler functions. The term is more common in academic and technical discussions related to functional programming.","priority":"★★★"},"example_sentences":[{"sentence":"The parser uses a set of combinators to define the grammar.","translation":"パーサーは、文法を定義するために一連のコンビネータを使用します。","type":"technical","meaning_category":"programming"},{"sentence":"SKI combinators are a classic example of combinatory logic.","translation":"SKIコンビネータは、コンビネータ論理の古典的な例です。","type":"technical","meaning_category":"mathematics"},{"sentence":"Combinators allow for a more declarative style of programming.","translation":"コンビネータを使用すると、より宣言的なプログラミングスタイルが可能になります。","type":"technical","meaning_category":"programming"}]}