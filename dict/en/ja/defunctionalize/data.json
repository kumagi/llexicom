{"word":"defunctionalize","priority":"☆☆☆","meanings":[{"part_of_speech":"verb","transitivity":"vt","definition":"(プログラミング) 関数型プログラミングにおいて、高階関数をデータ構造に変換する","english_definition":"(programming) To transform higher-order functions into data structures, typically to enable compilation or interpretation in environments that do not directly support higher-order functions.","examples":[{"sentence":"We defunctionalized the interpreter to make it work in a first-order language.","translation":"ファーストオーダー言語で動作させるために、インタプリタを非関数化しました。"},{"sentence":"Defunctionalization can improve performance by reducing the overhead of function calls.","translation":"非関数化は、関数呼び出しのオーバーヘッドを削減することでパフォーマンスを向上させることができます。"}],"collocations":["defunctionalize an interpreter","defunctionalize a compiler","apply defunctionalization","perform defunctionalization"],"synonyms":["reify","encode","transform"],"antonyms":[]}],"etymology":{"value":"「de-」(否定) + 「functionalize」(関数化する) からなる造語。関数型プログラミングの文脈で、関数をデータに変換する操作を表す。","priority":"★★★"},"pronunciation":{"ipa":"/ˌdiːˈfʌŋkʃənəˌlaɪz/","syllables":"de-func-tion-a-lize"},"inflection":{"verb_forms":{"present_simple":["defunctionalize","defunctionalizes"],"past_simple":"defunctionalized","past_participle":"defunctionalized","present_participle":"defunctionalizing"}},"usage_notes":{"explanation":"「**defunctionalize**」は、関数型プログラミングの最適化手法の一つで、特にコンパイラやインタプリタの実装において、高階関数を直接サポートしない環境で関数を表現するために用いられます。高階関数をデータ構造（例えば、抽象構文木）で表現し、それらのデータ構造を解釈する関数を別途用意することで、高階関数と同等の機能を実現します。このプロセスは、コンパイル時最適化や部分評価と組み合わせて使用されることがあります。","priority":"★★★"},"common_mistakes":{"examples":[{"incorrect":"✗ I defunctionalized the variable.","correct":"✓ I defunctionalized the function.","note":"非関数化は関数に対して行う操作であり、変数に対して行うものではありません。"},{"incorrect":"✗ Defunctionalizing is easy.","correct":"✓ Defunctionalization is easy.","note":"非関数化という概念や手法を指す場合は、動名詞ではなく名詞の「defunctionalization」を使用します。"}],"priority":"★★☆"},"related_words":{"derivatives":["defunctionalization (名詞: 非関数化)"],"related_concepts":["higher-order function","first-order function","closure","abstract syntax tree (AST)","interpreter","compiler","partial evaluation","staging"],"priority":"★★☆"},"level_frequency":{"CEFR":"C2","frequency_google_ngram":"低頻度 (Low frequency) - 専門的なプログラミングの文脈でのみ使用される。","priority":"★☆☆"},"readability_explanation":{"level":"C2","text":"「**defunctionalize**」は、関数型プログラミングにおける高度な概念であり、高階関数をデータ構造に変換するプロセスを指します。これは、高階関数を直接サポートしない環境（例えば、特定のコンパイラやインタプリタ）で関数型プログラミングの機能をエミュレートするために行われます。このプロセスを理解するには、高階関数、クロージャ、抽象構文木などの概念に関する深い知識が必要です。また、コンパイラ最適化や部分評価などの文脈で使用されることが多いです。"},"example_sentences":[{"sentence":"The compiler uses defunctionalization to optimize the code.","translation":"コンパイラは、コードを最適化するために非関数化を使用します。","type":"verb","meaning_category":"関数をデータ構造に変換する"},{"sentence":"By defunctionalizing the evaluator, we can eliminate the need for closures.","translation":"評価器を非関数化することにより、クロージャの必要性を排除できます。","type":"verb","meaning_category":"関数をデータ構造に変換する"},{"sentence":"Defunctionalization is a key technique in implementing interpreters in strict languages.","translation":"非関数化は、厳密な言語でインタプリタを実装するための重要な手法です。","type":"noun (as defunctionalization)","meaning_category":"非関数化"}]}