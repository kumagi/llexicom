{"word":"statement-free","priority":"N/A","meanings":[{"part_of_speech":"adjective","definition":"(主にプログラミングにおいて)副作用がなく、状態を持たないこと。関数が外部の状態を変更せず、同じ入力に対して常に同じ出力を返すことを指す。","english_definition":"(chiefly in programming) free from side effects; not modifying any state outside its own scope; pertaining to a function that does not modify any state outside its own scope and always returns the same output for the same input.","examples":[{"sentence":"This function is statement-free, making it easy to test and reason about.","translation":"この関数はステートメントフリーなので、テストや推論が容易です。"},{"sentence":"Statement-free programming can lead to more reliable and maintainable code.","translation":"ステートメントフリープログラミングは、より信頼性が高く、保守しやすいコードにつながる可能性があります。"}],"collocations":["statement-free function","statement-free code","statement-free programming"],"synonyms":["pure","functional","side-effect-free","stateless"],"antonyms":["stateful","impure","side-effecting"]}],"etymology":{"value":"「statement」+「-free」。プログラミングにおける「state」とは、プログラムの実行中に変化する可能性のあるデータや変数の値を指します。「-free」は「～がない」という意味の接尾辞です。","priority":"★★★"},"pronunciation":{"ipa":"/ˈsteɪtmənt friː/","syllables":"state-ment free"},"inflection":{"notes":"形容詞なので、比較級・最上級の変化はありません。"},"usage_notes":{"explanation":"「**statement-free**」は、特に関数型プログラミングの文脈で使われる用語です。ステートメントフリーな関数は、外部の状態（グローバル変数、ファイル、データベースなど）を変更せず、入力値のみに基づいて結果を生成します。これにより、関数は予測可能で、テストが容易になり、並行処理も安全に行えるようになります。ステートメントフリーなコードは、副作用を最小限に抑えることで、プログラム全体の信頼性と保守性を向上させるのに役立ちます。","priority":"★★★"},"common_mistakes":{"examples":[{"incorrect":"✗ The database is statement-free.","correct":"✓ The database is stateless.","note":"データベース自体は状態を持つものなので、ステートメントフリーというよりは「stateless (状態を持たない)」という表現が適切です。ステートメントフリーは、関数やコードの特性を指すことが多いです。"},{"incorrect":"✗ This class is statement-free.","correct":"✓ This class contains statement-free methods.","note":"クラスは状態を持つことができるので、クラス全体がステートメントフリーであるとは限りません。クラス内の個々のメソッドがステートメントフリーである、という表現の方が適切です。"}],"priority":"★★☆"},"related_words":{"derivatives":["statement (名詞: 文、ステートメント)","state (名詞: 状態)","side effect (名詞: 副作用)"],"related_concepts":["functional programming","pure function","immutability","statelessness"]},"level_frequency":{"CEFR":"C2","frequency_google_ngram":"低頻度 (Low frequency) - 専門用語。","priority":"★☆☆"},"readability_explanation":{"level":"C1","text":"「**statement-free**」は、プログラミングで使われる専門用語で、関数やコードが「副作用を持たない」という意味です。副作用とは、関数が自分の担当以外の場所（例えば、グローバル変数や外部ファイル）を変更してしまうことです。ステートメントフリーな関数は、入力されたものだけを見て、決まった答えを返すので、とても扱いやすく、テストもしやすいです。関数型プログラミングでは、このようなステートメントフリーなコードをたくさん使うことで、プログラム全体を安全で理解しやすいものにしようとします。"},"example_sentences":[{"sentence":"The use of statement-free functions simplifies debugging.","translation":"ステートメントフリーな関数の使用はデバッグを簡素化します。","type":"adjective","meaning_category":"副作用がない"},{"sentence":"Statement-free components are easier to reuse in different contexts.","translation":"ステートメントフリーなコンポーネントは、異なるコンテキストで再利用しやすいです。","type":"adjective","meaning_category":"状態を持たない"}]}